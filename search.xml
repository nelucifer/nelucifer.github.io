<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用SoapUI 5.3.0调试webservice接口（参数格式XML）]]></title>
    <url>%2FSoapUI%E8%B0%83%E8%AF%95webservice%E6%8E%A5%E5%8F%A3.html</url>
    <content type="text"><![CDATA[最近项目中经常要调试webservice接口，从朋友处了解到他们调试webservice接口时使用SoapUI，觉得十分好用，个人也对此十分感兴趣，因此简要记录一下这个工具的使用。 使用SoapUI 5.3.0调试webservice接口（参数格式XML）准备 下载SoapUI，我使用的是5.3.0 https://www.soapui.org/downloads/latest-release.html WebService 服务接口 进入正题 新建调试项目 输入项目名称及要调试的接口有效地址，输入完毕点击OKsoapUI会自动获取所有已开放接口，在想要调试的接口方法上面选中右击，选择new request,输入名称后如下图会自动生成如下格式代码；其中 123&lt;web:in0&gt;中填写入参&lt;/web:in0&gt;&lt;!--或--&gt;&lt;arg0&gt;中填写入参&lt;/arg0&gt; 注意：xml格式的入参最好使用 &lt;[CDATA[]]&gt; 包起来。点击左上角的绿色三角就可以调试接口了。 新建测试套件 New TestSuite 在项目名称上右击，选择 New TestSuite,输入名称保存 在自己新建的TestSuite名称上右击，选择 New TestCase,输入名称保存 在Test Steps上右击 选择 Add Step –&gt;SOAP Request,输入名称并选择接口，名称最好容易识别一点 接下来就可以加入入参进行调试。一次简单的工具使用，记录下来，希望可以帮助到你，祝你好运。 欢迎关注微信公众号weyoung，记录学习笔记和一些有趣的东西，欢迎交流~~ 更多联系方式 平台 链接 个人博客 https://www.wanglixia.top/ 预览项目： https://nelucifer.gitee.io/ 个人微信公众号： weyoung segmentfault: https://segmentfault.com/u/nelucifer CSDN: https://me.csdn.net/wlx001 简书： https://www.jianshu.com/u/99211cc23788 掘金： https://juejin.im/user/59b08c575188250f4850e80e]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>soapUI</tag>
        <tag>webservice</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架整合笔记（二）Druid和Webservice配置]]></title>
    <url>%2Fssm%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B01.html</url>
    <content type="text"><![CDATA[SSM框架整合笔记（二）Druid和Webservice配置前言WebService&emsp;&emsp;Web Service 是自包含（self-contained）、使用开放协议进行通信的应用程序组件。功能：实现应用程序之间的通信；将应用程序转换为网络应用程序；使用XML来编解码数据，并使用SOAP来传输数据。元素： 使用SOAP（简单对象访问协议）：是用于交换XML编码信息的轻量级协议； WSDL（Web Service 描述语言）：用于描述Web Service及函数、参数和返回值，因为是基于XML的，因此WSDL既是机器可阅读的，又是人可阅读的； UDDI：目的是为电子商务建立标准，是一套基于Web的、分布式的、为Web Service提供的、信息注册中心的实现标准规范，同时也包含一组使企业能将自身提供的Web Service注册，以使别的企业能够发现的访问协议的实现标准。 XML是Web Service的基础； SOAP：是一种使应用程序有能力通过 HTTP 交换信息的基于 XML 的简易协议。WSDL：是基于 XML 的用来描述 Web services 以及如何访问它们的一种语言，可描述 web service，连同用于 web service 的消息格式和协议的细节。 Druid&emsp;&emsp;Druid是Java中的数据库连接池。Druid能够提供强大的监控和扩展功能。 相关文章 SSM框架整合笔记（一）详细注释https://www.wanglixia.top/ssm%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0.html#more 本文内容 ssm项目使用CXF配置webservice。 ssm项目中配置druid数据库连接池，SQL监控。 一、使用CXF配置webservice0. pom.xmlpom.xml中添加依赖如下： 12345678910111213141516171819&lt;!--&lt;properties&gt;--&gt; &lt;cxf.version&gt;3.1.6&lt;/cxf.version&gt;&lt;!--&lt;/properties&gt;--&gt;&lt;!-- cxf webservice --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-rt-frontend-jaxws&lt;/artifactId&gt; &lt;version&gt;$&#123;cxf.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-core&lt;/artifactId&gt; &lt;version&gt;$&#123;cxf.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-rt-transports-http&lt;/artifactId&gt; &lt;version&gt;$&#123;cxf.version&#125;&lt;/version&gt; &lt;/dependency&gt; 1. web.xmlweb.xml中添加配置如下： 12345678910111213&lt;!--============Webservice配置start============--&gt;&lt;!--在Web.xml中配置CXF监听器 --&gt;&lt;servlet&gt; &lt;servlet-name&gt;CXFServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;!-- 注意：&lt;servlet-mapping&gt;下的&lt;url-pattern&gt;指明了服务访问地址的形式,"/*"代表URL地址中，包名称后直接跟服务endpoint地址，若指明&lt;url-pattern&gt;为/webservice/*,则URL地址为“包名webservice/endpoint?wsdl” --&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;CXFServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/webservice/*&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;!--============Webservice配置end============--&gt; 2. spring-config.xmlspring-config.xml中添加配置如下： 1234567&lt;!-- 使用CXF方式配置webservice接口 --&gt;&lt;import resource="classpath:META-INF/cxf/cxf.xml"/&gt;&lt;!--&lt;import resource="classpath:META-INF/cxf/cxf-servlet.xml"/&gt;--&gt;&lt;!-- 自动扫描webService --&gt;&lt;context:component-scan base-package="com.weyoung.webservice"/&gt;&lt;!-- 定义webservice的发布接口 --&gt;&lt;jaxws:endpoint implementor="#thirdService" address="/testService"/&gt; 3. ThirdWebservice.java添加interface：ThirdWebservice.java，示例代码如下： 123456789101112131415161718192021222324package com.weyoung.webservice;import javax.jws.WebService;/** * @ClassName ThirdWebservice * @Description 对外发布webservice接口 * @Author Mr.wang * @Date 2019/2/26 0:38 * @Version 1.0 **/@WebServicepublic interface ThirdWebservice &#123; /** * 获取第三方请求 * @param code * @param loginData * @param intoData * @return * @throws Exception */ String getThirdPartyRequest(String code, String loginData, String intoData) throws Exception;&#125; 4. ThirdWebserviceImpl.java添加java类：ThirdWebserviceImpl.java，示例代码如下： 12345678910111213141516171819202122232425262728293031323334package com.weyoung.webservice;import org.springframework.stereotype.Component;import javax.jws.WebService;/** * @ClassName ThirdWebserviceImpl * @Description 对外发布webservice接口 * @Author Mr.wang * @Date 2019/2/26 0:45 * @Version 1.0 **/@Component("thirdService")@WebServicepublic class ThirdWebserviceImpl implements ThirdWebservice &#123; @Override public String getThirdPartyRequest(String code, String loginData, String intoData) throws Exception &#123; String result; switch (code) &#123; case "WS0001": result = "WS0001" + loginData + intoData; break; case "WS0002": result = "WS0001" + loginData + intoData; break; default: result = "OTHER" + loginData + intoData; break; &#125; return result; &#125;&#125; 测试接口访问地址：http://localhost:8080/ssm-note/webservice/ ，原访问项目后加”webservice/“，访问结果如下：点击蓝色链接后如下：使用soapUI测试webservice接口： 双击Request 1，填入参数，点击运行按钮，结果如下，调用成功： 二、配置druid数据库连接池，SQL监控0. pom.xmlpom.xml中添加依赖如下： 12345678910111213141516&lt;!--&lt;properties&gt;--&gt; &lt;druid.version&gt;1.0.25&lt;/druid.version&gt; &lt;log4j.version&gt;1.2.14&lt;/log4j.version&gt;&lt;!--&lt;/properties&gt;--&gt; &lt;!--druid==&gt;阿里巴巴数据库连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- log4j--&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; 1. web.xmlweb.xml中添加配置如下： 12345678910111213141516171819202122&lt;!-- ============阿里巴巴数据库连接池start============ --&gt;&lt;filter&gt; &lt;filter-name&gt;druidWebStatFilter&lt;/filter-name&gt; &lt;filter-class&gt;com.alibaba.druid.support.http.WebStatFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;exclusions&lt;/param-name&gt; &lt;param-value&gt;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;druidWebStatFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;servlet&gt; &lt;servlet-name&gt;druidStatView&lt;/servlet-name&gt; &lt;servlet-class&gt;com.alibaba.druid.support.http.StatViewServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;druidStatView&lt;/servlet-name&gt; &lt;url-pattern&gt;/druid/*&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;!-- ============阿里巴巴数据库连接池end============ --&gt; 2. spring-config.xmlspring-config.xml中添加配置，示例代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!-- MySQL数据源配置--&gt;&lt;bean id="MySQLDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"&gt; &lt;property name="driverClassName" value="$&#123;jdbc.mysql.driver&#125;"/&gt; &lt;property name="url" value="$&#123;jdbc.mysql.url&#125;"/&gt; &lt;property name="username" value="$&#123;jdbc.mysql.username&#125;"/&gt; &lt;property name="password" value="$&#123;jdbc.mysql.password&#125;"/&gt; &lt;!-- 配置初始化大小、最小、最大 --&gt; &lt;property name="initialSize" value="$&#123;jdbc.initialSize&#125;"/&gt; &lt;property name="minIdle" value="$&#123;jdbc.minIdle&#125;"/&gt; &lt;property name="maxActive" value="$&#123;jdbc.maxActive&#125;"/&gt; &lt;!-- 配置获取连接等待超时的时间 --&gt; &lt;property name="maxWait" value="$&#123;jdbc.maxWait&#125;"/&gt; &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt; &lt;property name="timeBetweenEvictionRunsMillis" value="$&#123;jdbc.timeBetweenEvictionRunsMillis&#125;"/&gt; &lt;property name="testWhileIdle" value="$&#123;jdbc.testWhileIdle&#125;"/&gt; &lt;!-- 这里建议配置为TRUE，防止取到的连接不可用 --&gt; &lt;property name="testOnBorrow" value="true" /&gt; &lt;property name="testOnReturn" value="false" /&gt; &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt; &lt;property name="poolPreparedStatements" value="true" /&gt; &lt;property name="maxPoolPreparedStatementPerConnectionSize" value="20" /&gt; &lt;!-- 配置提交方式，默认就是true，可以不用配置 --&gt; &lt;property name="defaultAutoCommit" value="$&#123;jdbc.defaultAutoCommit&#125;"/&gt; &lt;!-- 验证连接有效与否的SQL，不同的数据配置不同 --&gt; &lt;!--&lt;property name="validationQuery" value="select 1 " /&gt;--&gt; &lt;property name="filters" value="stat" /&gt; &lt;property name="proxyFilters"&gt; &lt;list&gt; &lt;ref bean="logFilter" /&gt; &lt;/list&gt; &lt;/property&gt;&lt;/bean&gt;&lt;bean id="logFilter" class="com.alibaba.druid.filter.logging.Log4jFilter"&gt; &lt;property name="statementExecutableSqlLogEnable" value="false" /&gt;&lt;/bean&gt; 测试Druid访问地址：http://localhost:8080/ssm-note/druid/ 访问后如下： 分享欢迎扫描下方二维码，关注weyoung公众号，一起交流学习~~ 更多联系方式 平台 链接 预览项目： https://nelucifer.gitee.io/ 个人微信公众号： weyoung segmentfault: https://segmentfault.com/u/nelucifer CSDN: https://me.csdn.net/wlx001 简书： https://www.jianshu.com/u/99211cc23788 掘金： https://juejin.im/user/59b08c575188250f4850e80e]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>webservice</tag>
        <tag>mybatis</tag>
        <tag>spring</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring系列学习之IoC与AOP]]></title>
    <url>%2Fspring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1.html</url>
    <content type="text"><![CDATA[前言spring框架的释义： Spring框架是由于软件开发的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。 为什么Spring用来完成EJB完成的事情，那么这个EJB是什么玩意？概念： EJB：Enterprise JavaBean，对于商务软件来说，其核心部分就是她的业务逻辑，业务逻辑抽象了整个商务过程的流程，并使用计算机语言将他们实现。……J2EE对于这个问题的处理方法是将业务逻辑从客户端软件中抽取出来，封装在一个组件中。这个组件运行在一个独立的服务器上，客户端软件通过网络调用组件提供的服务来实现业务逻辑，而客户端软件的仅仅负责发送调用请求和显示处理结果。在J2EE中，这个运行在一个独立的服务器上，并封装了业务逻辑的组件就是EJB组件。 从上面的概念中，可以理解为EJB概念说的就是C/S软件，简单来说EJB 就是将那些”类”放到一个服务器上，用C/S 形式的软件客户端对服务器上的”类”进行调用。感兴趣的可以看下这篇文章https://blog.csdn.net/jojo52013145/article/details/5783677 概念Spirng中的两个核心概念：依赖注入DI（dependency injection）和面向切面编程AOP（aspect-oriented programming）。 为了降低Java开发的复杂性，Spring采取了以下四种关键策略： 基于POJO（Plain Old Java Object）的轻量级和最小侵入性编程； 通过依赖注入和面向接口实现松耦合； 基于切面和管理进行声明式编程； 通过切面和模板减少样板式代码。 依赖注入传统的做法，每个对象负责管理它所依赖的对象的引用，这将会导致高度耦合和难以测试的代码。比如说，对象A要使用对象B，则在对象A中来控制对象B，如：1234567891011121314151617public class A &#123; private B b; public A () &#123; this.b = new B(); &#125; public String sayHello() &#123; return b.sayHello(userName); &#125;&#125;public class B &#123; public String sayHello(String userName) &#123; return "Hello "+ userName; &#125;&#125; 耦合具有两面性，一方面，紧密耦合的代码难以测试、难以复用、难以理解；另一方面，一定程度的耦合又是必须的——完全没有耦合的代码什么也做不了。总之，耦合是必须的，但是应当被合理地管理。 创建应用组件之间协作的行为通常称为装配。Spring有多种装配bean的方式，采用XMl、使用Java进行配置。 通过DI，对象的依赖关系将由系统中负责协调各对象的第三方组件在创建对象的时候进行设定。依赖注入的方式： 构造器注入； setter注入； 基于注解注入； 一、构造器注入如：123456789101112// 构造器注入public class A &#123; private B b; public A(B b) &#123; this.b = b; &#125; public String sayHello() &#123; return b.sayHello(userName); &#125;&#125; xml方式1234567&lt;!-- 注册A --&gt;&lt;bean id="a" class="com.lucifer.spring.di.A"&gt; &lt;constructor-arg ref="b"&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;&lt;!-- 注册B --&gt;&lt;bean id="b" class="com.lucifer.spring.di.B"&gt;&lt;/bean&gt; 二、setter注入1234567891011&lt;!-- 注册A --&gt;&lt;bean id="a" class="com.lucifer.spring.di.A"&gt; &lt;!-- 注意：这两种写法都可以，Spring将name值得每个单词的首字母转换为大写，再在前面拼上set构成set方法名，然后去对应的类中查找这个方法，通过反射调用实现注入，仅按照此种规则匹配，即对应的成员变量命名不做约束。也就是说 UserName 和 userName 都能匹配上 --&gt; &lt;!-- 写法一 --&gt; &lt;!-- &lt;property name="UserName" ref="b"&gt;&lt;/property&gt; --&gt; &lt;!-- 写法二 --&gt; &lt;property name="userName" ref="b"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 注册B --&gt;&lt;bean id="b" class="com.lucifer.spring.di.B"&gt;&lt;/bean&gt; 12345678910111213public class UserService implements IUserService &#123; private String userName123; public String sayHello(String userName) &#123; return "Hello "+ userName; &#125; public void setUserName(String userName) &#123; this.userName123 = userName; &#125;&#125; 三、基于注解的注入bean的属性autowire，autowire主要有三个属性值：constructor，byName，byType。 constructor：通过构造方法进行自动注入，spring会匹配与构造方法参数类型一致的bean进行注入，如果有一个多参数的构造方法，一个只有一个参数的构造方法，在容器中查找到多个匹配多参数构造方法的bean，那么spring会优先将bean注入到多参数的构造方法中。 byName：被注入bean的id名必须与set方法后半截匹配，并且id名称的第一个单词的首字母必须小写，这个和手动set注入有点不同。 byType：查找所有的set方法，将符合参数类型的bean注入。 注册bean的注解有以下几种： @Component：用于注册所有的bean； @Repository：用于注册dao层的bean； @Controller：用于注册控制层的bean； @Service：用于注册服务层的bean； 常见的问题，@Resource和@Autowired之间的区别是什么？描述依赖关系的主要有两种： @Resource：java的注解，默认以byName的方式去匹配与属性名相同的bean的id，如果没有再以byType的方式查找，如果byType查找到多个的话，使用@Qualifier注解（Spring注解）指定某个具体名称的bean； @Autowired：spring注解，默认是以byType的方式去匹配类型相同的bean，如果匹配到一个，那么就直接注入该bean，无论要注入的bean的那么是什么；如果匹配到多个，就会调用DefaultListableBeanFactory的determineAutowireCandidate方法来决定具体注入哪个bean。 determineAutowireCandidate方法的逻辑是： 先找Bean上有@Primary注解的，有则直接返回bean的name； 再找Bean上有@Order，@PriorityOrder注解的，有则返回bean的name； 最后再以名称匹配（ByName）的方式去查找相匹配的bean。 没有找到的话就抛出异常。 还有一点要注意：如果使用了 @Qualifier 注解，那么当自动装配匹配到多个 bean 的时候就不会进入 determineAutowireCandidate 方法，而是直接查找与 @Qualifer 指定的 bean name 相同的 bean 去注入，找到了就直接注入，没有找到则抛出异常。 注意如果通过set方法注入属性，那么Spring会通过默认的无参构造方法来实例化对象，所以如果在类中重写带有参数的构造方法，一定要把无参构造方法也写上，否则spring没有办法实例化对象，导致报错。 问题1.依赖注入（DI）和控制反转（IoC） 谁控制谁，控制什么： 传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。 为何是反转，哪些方面反转了： IoC：Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想，传统应用程序是由我们自己在对象中主动去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象，为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。 理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么” 谁依赖谁： 应用程序依赖于IoC容器； 为什么需要依赖： 应用程序需要IoC容器来提供对象需要的外部资源； 谁注入谁： 很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象； 注入了什么： 就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。 其实IoC和DI是同一个概念的不同角度描述，由于控制反转概念比较模糊（可能只是理解为容易控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。我认为可以这么理解：使用依赖注入来实现了控制反转。 面向切面编程DI能够让相互协作的软件组件保持松散耦合，而面向切面编程（aspect-oriented programming）允许把遍布在应用各处的功能分离出来形成可重用的组件。定义切点的表达式的语法采用的是AspectJ的切点表达式语言。 一、AOP的相关概念 Aspect（切面）：通知和切点共同定义了切面的全部内容； Joint Point（连接点）：程序执行过程中明确的点，是在应用执行过程中能够插入切面的一个点，切面代码利用这些点插入到应用的正常流程之中并添加新的行为； Advice（通知）：AOP在特定的切入点上执行的增强处理，五个通知类型： 前置通知（Before）：在目标方法被调用之前调用通知功能，@Before只需要指定切入点表达式即可； 后置通知（After）：在目标方法完成之后调用通知，此时不关心方法的输出是什么。不论拦截的方法是否有异常。在目标方法完成之后做增强，无论目标方法什么时候成功完成。@After可以指定一个切入点表达式； 环绕通知（Around）：需要放行操作。通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。环绕通知是最重要的通知类型，像事务、日志等都是环绕通知； 返回通知（After-returning）：在目标方法成功执行之后调用通知，@AfterReturning除了指定切入点表达式后，还可以指定一个返回值形参名returning，代表目标方法的返回值； 异常通知（After-throwing）：主要用来处理程序中未处理的异常，在目标抛出异常后调用通知，@AfterThrowing除了指定切入点表达式后，还可以指定一个throwing的返回值形参名，可以通过该形参名来访问目标方法中所抛出的异常对象； Pointcut（切入点）：带有通知的连接点，在程序中主要体现为书写切入点表达式。如果说通知定义了切面的“什么”和“何时”的话，那么切点就定义了“何处”； AOP代理：AOP框架创建的对象，代理就是目标对象的增强。Spring中的AOP代理可以使JDK动态代理，也可以是CGLIB代理，前者基于接口，后者基于子类； 织入（Weaving）：实现AOP代理所声明的功能，即把切面应用到目标对象并创建新的代理对象的过程。在目标对象的生命周期中，可以在编译期、类加载期、运行期进行织入； 关注点：切面的具体功能方法被称为关注点。 注解 通知 @After 通知方法会在目标方法返回或抛出异常后调用 @AfterReturning 通知方法会在目标方法返回后调用 @AfterThrowing 通知方法会在目标方法抛出异常后调用 @Around 通知方法会将目标方法封装起来 @Before 通知方法会在目标方法调用之前执行 Spring提供了4种类型的AOP支持： 基于代理的经典Spring AOP； 纯POJO切面； @AspectJ注解驱动的切面； 注入式AspectJ切面（适用于Spring各版本）； 前面三种都是Spring AOP实现的变体，Spring AOP构建在动态代理基础之上，因此，Spring对AOP的支持局限于方法拦截；也正是因为Spring基于动态代理，所以Spring只支持方法连接点。 AOP主要的作用是：日志记录，性能统计，安全控制，事务处理，异常处理，权限登录等等。AOP代理由Spring的IoC容器负责生成、管理，其依赖关系也由IoC容器负责管理。 二、Spring借助AspectJ的切点表达式语言来定义Spring切面Spring AOP所支持的AspectJ切点指示器|AspectJ指示器|描述||:–|:–||arg()|限制连接点匹配参数为指定类型的执行方法||@args()|限制连接点匹配参数由指定注解标注的执行方法||execution()|用于匹配是连接点的执行方法||this()|限制连接点匹配AOP代理的bean引用为指定类型的类||target|限制连接点匹配目标对象为指定类型的类||@target()|限制连接点匹配特定的执行对象，这些对象对应的类要具有指定类型的注解||within()|限制连接点匹配指定的类型||@within()|限制连接点匹配指定注解所标注的类型（当使用Spring AOP时，方法定义在由指定的注解所标注的类里）||@annotation|限定匹配带有指定注解的连接点| 12345678execution(* concert.Performance.perform(..))/* *：返回任意类型；concert.Performance：方法所属的类；perform：方法；..：使用任意参数；execution：在方法执行时触发；*/ 相关资料 Spring常用的三种注入方式:https://blog.csdn.net/a909301740/article/details/78379720 IoC基础——跟我学Spring3https://jinnianshilongnian.iteye.com/blog/1413846 Spring 实战（第四版） [美]Craig Walls 著 张卫滨 译 欢迎扫描下方二维码，关注weyoung公众号，一起交流学习~~ 更多联系方式 平台 链接 预览项目： https://nelucifer.gitee.io/ 个人微信公众号： weyoung segmentfault: https://segmentfault.com/u/nelucifer CSDN: https://me.csdn.net/wlx001 简书： https://www.jianshu.com/u/99211cc23788 掘金： https://juejin.im/user/59b08c575188250f4850e80e]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架整合笔记（一）——详细注释]]></title>
    <url>%2Fssm%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[前言&emsp;&emsp;接触SSM框架到现在也有很长时间了，之前也搭建过几个简单的项目，但是没有进行过记录学习和搭建的过程。网上关于ssm框架整合的资料也不少，不过说句实话，单看某一篇文章能够不踩坑的配置并跑起来的也不太多，在学习过程中筛选甄别这些就浪费了相当一部分时间。 本文内容&emsp;&emsp;本文理论+实践的方式，分享ssm的相关概念以及采用实践操作的方式搭建整套系统。把搭建过程中踩过的坑、笔记记录整理一下，用以和感兴趣的朋友分享下。 demo下载地址该项目持续更新中，会在代码以及该文档里面详细注释和介绍。项目托管在码云开源平台上，链接：https://gitee.com/nelucifer/ssm-note，点击克隆/下载获取该项目。 前置技能 Maven IDEA Tomcat 环境 Spring：4.2.5.RELEASE Spring MVC Mybatis：3.3.1 MySQL：5.6 IntelliJ IDEA： 2018.2.3 cxf webservice： webservice接口 pagehelper： 分页 Interceptor：拦截器配置 数据结构：powerdesigner16.5 实践步骤一、创建项目 打开IDEA，选择New-&gt;Projects，按照下面的步骤选择：选择Maven，然后勾选Create from archetype，选择webapp这一个 完成之后填入相应的maven项目组信息，GroupId是项目组织的标识符，对应java的包结构；ArtifactId是项目的标识符，对应项目的名称，即项目根目录的名称。groupId和artifactId统称为“坐标”。 填写完成之后点击Next，选择setting.xml和repository路径，如下图： 点击Finish后，maven会根据原型自动创建需要的一些配置信息以及目录结构，等待配置完成，初始项目结构如下： 在main文件夹下创建文件夹java、resources，src文件夹下创建test，test文件夹下创建java文件夹；在java文件夹上右键 -&gt; Mark Directory as，java文件夹选择Sources Root，resources文件夹上选择Resources Root，test文件夹下的java文件夹上选择Test Resources Root，操作如下：完成后的项目结构如下： 二、配置pom.xml和spring详细的解释直接在代码里面注释了。开始贴代码： 1. pom.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;!--maven模块版本：声明项目描述符遵循哪一个POM模型版本，默认是4.0.0--&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!--项目组织的唯一标识符--&gt; &lt;groupId&gt;com.weyoung&lt;/groupId&gt; &lt;!--项目的唯一标识符，和groupId共同唯一标识该项目或组件--&gt; &lt;artifactId&gt;ssm-note&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;!--打包方式，可以选择war和jar--&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;!--项目的名称，Maven产生的文档用--&gt; &lt;name&gt;ssm-note Maven Webapp&lt;/name&gt; &lt;!--项目主页的URL，Maven产生的文档用--&gt; &lt;url&gt;http://www.example.com&lt;/url&gt; &lt;!--项目的详细描述，Maven产生的文档用--&gt; &lt;description&gt;maven+ssm项目整合笔记&lt;/description&gt; &lt;!--项目的问题管理系统--&gt; &lt;issueManagement&gt; &lt;system&gt;jira&lt;/system&gt; &lt;!--该项目使用的问题管理系统的URL--&gt; &lt;url&gt;&lt;/url&gt; &lt;/issueManagement&gt; &lt;!--项目开发者列表--&gt; &lt;developers&gt; &lt;!--某个项目开发者的信息--&gt; &lt;developer&gt; &lt;!--项目开发者id--&gt; &lt;id&gt;coder_lixia&lt;/id&gt; &lt;!--项目开发者的全名--&gt; &lt;name&gt;lixia&lt;/name&gt; &lt;email&gt;ne_lucifer@163.com&lt;/email&gt; &lt;!--项目开发者主页URL--&gt; &lt;url&gt;http://www.wanglixia.top/&lt;/url&gt; &lt;!--项目开发者项目中的角色--&gt; &lt;roles&gt; &lt;role&gt;Project Manager&lt;/role&gt; &lt;/roles&gt; &lt;!--项目开发者所属组织--&gt; &lt;organization&gt;&lt;/organization&gt; &lt;!--项目开发者所属组织的URL--&gt; &lt;organizationUrl&gt;&lt;/organizationUrl&gt; &lt;/developer&gt; &lt;/developers&gt; &lt;!-- 以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里 activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt; &lt;plugin.maven-compiler&gt;3.1&lt;/plugin.maven-compiler&gt; &lt;javac.target.version&gt;1.8&lt;/javac.target.version&gt; &lt;!-- 此处spring.version即为下面$&#123;spring.version的值&#125; --&gt; &lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt; &lt;jstl.version&gt;1.2&lt;/jstl.version&gt; &lt;commons-logging.version&gt;1.1.1&lt;/commons-logging.version&gt; &lt;mybatis.version&gt;3.3.1&lt;/mybatis.version&gt; &lt;mybatis-spring.version&gt;1.2.4&lt;/mybatis-spring.version&gt; &lt;mysql-connector-java.version&gt;5.1.26&lt;/mysql-connector-java.version&gt; &lt;log4j.version&gt;1.2.14&lt;/log4j.version&gt; &lt;slf4j.log4j12.version&gt;1.7.12&lt;/slf4j.log4j12.version&gt; &lt;servlet-api.version&gt;2.5&lt;/servlet-api.version&gt; &lt;commons-io.version&gt;2.4&lt;/commons-io.version&gt; &lt;commons-fileupload.version&gt;1.3&lt;/commons-fileupload.version&gt; &lt;gson.version&gt;2.2.2&lt;/gson.version&gt; &lt;druid.version&gt;1.0.25&lt;/druid.version&gt; &lt;cxf.version&gt;3.1.6&lt;/cxf.version&gt; &lt;fastjson.version&gt;1.2.32&lt;/fastjson.version&gt; &lt;pagehelper.version&gt;5.1.2&lt;/pagehelper.version&gt; &lt;jackson.version&gt;2.7.4&lt;/jackson.version&gt; &lt;/properties&gt; &lt;!-- 发现依赖和扩展的远程仓库列表 --&gt; &lt;repositories&gt; &lt;!-- 包含需要连接到远程仓库的信息 --&gt; &lt;repository&gt; &lt;!-- 远程仓库id，可以用来匹配在settings.xml文件里配置的远程仓库 --&gt; &lt;id&gt;public&lt;/id&gt; &lt;!-- 远程仓库名称 --&gt; &lt;name&gt;aliyun nexus&lt;/name&gt; &lt;!-- 远程仓库URL --&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;!-- 处理远程仓库里发布版本的下载 --&gt; &lt;releases&gt; &lt;!-- true或false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;!-- 更新构件的频率。Maven会比较本地POM和远程POM的时间戳。选项：always（一直），daily（默认每日），inteval：X（X是以分钟为单位），never（从不）--&gt; &lt;updatePolicy&gt;never&lt;/updatePolicy&gt; &lt;!-- 当Maven验证构件校验文件失败时怎么做：ignore（忽略），fail（失败），warn（警告） --&gt; &lt;checksumPolicy&gt;ignore&lt;/checksumPolicy&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;updatePolicy&gt;never&lt;/updatePolicy&gt; &lt;checksumPolicy&gt;ignore&lt;/checksumPolicy&gt; &lt;/snapshots&gt; &lt;!-- 用于定位和排序构件的仓库布局类型-可以使default（默认）或者legacy（遗留） --&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;!-- 发现插件的远程仓库列表，这些插件用于构建和报表 --&gt; &lt;pluginRepositories&gt; &lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt; &lt;pluginRepository&gt; &lt;id&gt;public&lt;/id&gt; &lt;name&gt;aliyun nexus&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;!--项目相关的所有依赖--&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;!-- 依赖的groupID --&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;!-- 依赖的artifactID--&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;!-- 依赖的版本号 --&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;!-- 依赖类型，默认类型是jar，类型一般和使用的打包方式对应，如jar，war等，也有例外，如test-jar等 --&gt; &lt;type&gt;jar&lt;/type&gt; &lt;!-- 依赖范围。 - compile：默认范围，用于编译 - provided：类似于编译 - runtime：在运行时使用 - test：用于test时使用 - system： 需要外在提供相应的元素。通过systemPath来取得 --&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;!-- systemPath：仅用于范围为system。提供相应的路径，不鼓励使用该元素 --&gt; &lt;!--&lt;systemPath&gt;&lt;/systemPath&gt;--&gt; &lt;!-- 可选依赖，当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;!-- 当计算传递依赖时，从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的 依赖。此元素主要用于解决版本冲突问题 --&gt; &lt;!--&lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;--&gt; &lt;/dependency&gt; &lt;!-- spring配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aop&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 1)Spring核心 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-expression&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 2)Spring DAO层 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jms&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-orm&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 3)Spring web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 4)Spring test --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-logging.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- mybatis包--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--mybatis spring插件--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis-spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- mysql连接驱动包--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql-connector-java.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--druid==&gt;阿里巴巴数据库连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- log4j--&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;$&#123;slf4j.log4j12.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- servlet--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;$&#123;servlet-api.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;$&#123;jstl.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 文件上传 --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-io&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-io.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-fileupload.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 解析json--&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt; &lt;artifactId&gt;gson&lt;/artifactId&gt; &lt;version&gt;$&#123;gson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-core&lt;/artifactId&gt; &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt; &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 分页助手 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;$&#123;pagehelper.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- cxf webservice --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-rt-frontend-jaxws&lt;/artifactId&gt; &lt;version&gt;$&#123;cxf.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-core&lt;/artifactId&gt; &lt;version&gt;$&#123;cxf.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-rt-transports-http&lt;/artifactId&gt; &lt;version&gt;$&#123;cxf.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- 构建项目需要的信息 --&gt; &lt;build&gt; &lt;!-- 产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125; --&gt; &lt;finalName&gt;ssm-note&lt;/finalName&gt; &lt;!-- 子项目可以引用的默认插件信息。 --&gt; &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt; &lt;!-- 插件列表 --&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;/plugin&gt; &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.8.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.22.1&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;3.2.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt;&lt;/project&gt; 2. spring-config.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"&gt; &lt;!-- base-package属性指定了需要扫描的类包，类包及其递归子包中所有的类都会被处理 如果某个类的头上带有特定的注解【@Component/@Repository/@Service/@Controller】， 就会将这个对象作为Bean注册进Spring容器 --&gt; &lt;context:component-scan base-package="com.weyoung.service"/&gt; &lt;context:component-scan base-package="com.weyoung.dao"/&gt; &lt;!-- 配置mybatis的sqlSessionFactory --&gt; &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;property name="dataSource" ref="MySQLDataSource"/&gt; &lt;!-- 自动扫描的mybatis mapper.xml文件路径 --&gt; &lt;property name="mapperLocations" value="classpath:/mappers/*.xml"/&gt; &lt;!-- Mybatis配置文件 --&gt; &lt;property name="configLocation" value="classpath:config/mybatis-config.xml"/&gt; &lt;/bean&gt; &lt;!-- 事务管理 --&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="MySQLDataSource"/&gt; &lt;/bean&gt; &lt;!-- 自动扫描的dao接口所在的包名 --&gt; &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;property name="basePackage" value="com.weyoung.dao"/&gt; &lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/&gt; &lt;/bean&gt; &lt;!-- 引入数据库配置文件 --&gt; &lt;bean id="dataSourceConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt; &lt;property name="location" value="classpath:config/jdbc.properties"/&gt; &lt;/bean&gt; &lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/&gt; &lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt; &lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"&gt; &lt;property name="messageConverters"&gt; &lt;list&gt; &lt;bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 配置事务通知属性 --&gt; &lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt; &lt;!-- 定义事务传播属性 --&gt; &lt;tx:attributes&gt; &lt;tx:method name="insert*" propagation="REQUIRED"/&gt; &lt;tx:method name="update*" propagation="REQUIRED"/&gt; &lt;tx:method name="edit*" propagation="REQUIRED"/&gt; &lt;tx:method name="save*" propagation="REQUIRED"/&gt; &lt;tx:method name="add*" propagation="REQUIRED"/&gt; &lt;tx:method name="new*" propagation="REQUIRED"/&gt; &lt;tx:method name="set*" propagation="REQUIRED"/&gt; &lt;tx:method name="remove*" propagation="REQUIRED"/&gt; &lt;tx:method name="delete*" propagation="REQUIRED"/&gt; &lt;tx:method name="change*" propagation="REQUIRED"/&gt; &lt;tx:method name="get*" propagation="REQUIRED" read-only="true"/&gt; &lt;tx:method name="find*" propagation="REQUIRED" read-only="true"/&gt; &lt;tx:method name="load*" propagation="REQUIRED" read-only="true"/&gt; &lt;tx:method name="*" propagation="REQUIRED" read-only="true"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!-- 配置事务切面 --&gt; &lt;aop:config&gt; &lt;aop:pointcut id="serviceOperation" expression="execution(* com.weyoung.service.*.*Impl.*(..))"/&gt; &lt;aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/&gt; &lt;/aop:config&gt; &lt;!-- MySQL数据源配置--&gt; &lt;bean id="MySQLDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"&gt; &lt;property name="driverClassName" value="$&#123;jdbc.mysql.driver&#125;"/&gt; &lt;property name="url" value="$&#123;jdbc.mysql.url&#125;"/&gt; &lt;property name="username" value="$&#123;jdbc.mysql.username&#125;"/&gt; &lt;property name="password" value="$&#123;jdbc.mysql.password&#125;"/&gt; &lt;!-- 配置初始化大小、最小、最大 --&gt; &lt;property name="initialSize" value="$&#123;jdbc.initialSize&#125;"/&gt; &lt;property name="minIdle" value="$&#123;jdbc.minIdle&#125;"/&gt; &lt;property name="maxActive" value="$&#123;jdbc.maxActive&#125;"/&gt; &lt;!-- 配置获取连接等待超时的时间 --&gt; &lt;property name="maxWait" value="$&#123;jdbc.maxWait&#125;"/&gt; &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt; &lt;property name="timeBetweenEvictionRunsMillis" value="$&#123;jdbc.timeBetweenEvictionRunsMillis&#125;"/&gt; &lt;property name="testWhileIdle" value="$&#123;jdbc.testWhileIdle&#125;"/&gt; &lt;!-- 这里建议配置为TRUE，防止取到的连接不可用 --&gt; &lt;property name="testOnBorrow" value="true" /&gt; &lt;property name="testOnReturn" value="false" /&gt; &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt; &lt;property name="poolPreparedStatements" value="true" /&gt; &lt;property name="maxPoolPreparedStatementPerConnectionSize" value="20" /&gt; &lt;!-- 配置提交方式，默认就是true，可以不用配置 --&gt; &lt;property name="defaultAutoCommit" value="$&#123;jdbc.defaultAutoCommit&#125;"/&gt; &lt;!-- 验证连接有效与否的SQL，不同的数据配置不同 --&gt; &lt;!--&lt;property name="validationQuery" value="select 1 " /&gt;--&gt; &lt;property name="filters" value="stat" /&gt; &lt;property name="proxyFilters"&gt; &lt;list&gt; &lt;ref bean="logFilter" /&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter"&gt; &lt;property name="statementExecutableSqlLogEnable" value="false" /&gt; &lt;/bean&gt;&lt;/beans&gt; 3. spring-mvc.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt; &lt;!-- 自动扫描该包，使SpringMVC认为包下(包括子集)用了@controller注解的类是控制器 --&gt; &lt;context:component-scan base-package="com.weyoung.controller"/&gt; &lt;context:annotation-config/&gt; &lt;!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 --&gt; &lt;!-- 默认的注解映射的支持 --&gt; &lt;mvc:annotation-driven&gt; &lt;mvc:message-converters&gt; &lt;ref bean="stringHttpMessageConverter"/&gt; &lt;/mvc:message-converters&gt; &lt;/mvc:annotation-driven&gt; &lt;!-- 解决js,main.webapp.layouts.css,images访问不到的问题--&gt; &lt;mvc:resources mapping="/plugins/**" location="/plugins/"/&gt; &lt;mvc:resources mapping="/layouts/**" location="/layouts/"/&gt; &lt;mvc:resources mapping="/statics/**" location="/statics/"/&gt; &lt;!--拦截器--&gt; &lt;mvc:interceptors&gt; &lt;mvc:interceptor&gt; &lt;mvc:mapping path="/**"/&gt; &lt;bean class="com.weyoung.system.LoginInterceptor"&gt;&lt;/bean&gt; &lt;/mvc:interceptor&gt; &lt;/mvc:interceptors&gt; &lt;!-- 文件上传配置注意:这里申明的id必须为multipartResolver --&gt; &lt;bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"&gt; &lt;!--文件编码--&gt; &lt;property name="defaultEncoding" value="UTF-8"/&gt; &lt;!--文件大小最大值--&gt; &lt;property name="maxUploadSize" value="10485760000"/&gt; &lt;!--内存中的最大值--&gt; &lt;property name="maxInMemorySize" value="40960"/&gt; &lt;/bean&gt; &lt;!--简单的上传异常处理--&gt; &lt;bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"&gt; &lt;property name="exceptionMappings"&gt; &lt;props&gt; &lt;prop key="org.springframework.web.multipart.MaxUploadSizeExceededException"&gt;/error/upload_error.jsp &lt;/prop&gt; &lt;/props&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!--根据 controller 返回的字符串 找到viewResolver --&gt; &lt;bean id="beanNameViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver"&gt; &lt;property name="order" value="1"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- HandlerMapping --&gt; &lt;bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/&gt; &lt;!-- HandlerAdapter --&gt; &lt;bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/&gt; &lt;bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"&gt; &lt;property name="favorParameter" value="false"/&gt; &lt;property name="parameterName" value="format"/&gt; &lt;property name="ignoreAcceptHeader" value="true"/&gt; &lt;property name="mediaTypes"&gt; &lt;value&gt; json=application/json xml=application/xml &lt;/value&gt; &lt;/property&gt; &lt;property name="defaultContentType" value="text/html"/&gt; &lt;/bean&gt; &lt;!-- SpringMVC消息处理——消息转换器 --&gt; &lt;bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter"&gt; &lt;constructor-arg value="UTF-8" index="0"/&gt; &lt;property name="supportedMediaTypes"&gt; &lt;list&gt; &lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!--spring-mvc 视图解析器--&gt; &lt;bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/&gt; &lt;property name="prefix" value="/front-end/"/&gt; &lt;property name="suffix" value=".jsp"/&gt; &lt;property name="order" value="1"/&gt; &lt;/bean&gt; &lt;bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"&gt; &lt;property name="contentNegotiationManager" ref="contentNegotiationManager"/&gt; &lt;property name="defaultViews"&gt; &lt;bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/&gt; &lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt; 4. jdbc.properties123456789101112131415161718192021#============================================================================# MySQL#============================================================================jdbc.mysql.driver=com.mysql.jdbc.Driverjdbc.mysql.url=jdbc:mysql://localhost:3306/SSM_NOTE?useUnicode=true&amp;characterEncoding=utf8jdbc.mysql.username=rootjdbc.mysql.password=lucifer#============================================================================# common settings#============================================================================jdbc.initialSize=5jdbc.minIdle=5jdbc.maxActive=100jdbc.maxWait=100000jdbc.defaultAutoCommit=falsejdbc.removeAbandoned=truejdbc.removeAbandonedTimeout=600jdbc.testWhileIdle=truejdbc.timeBetweenEvictionRunsMillis=60000jdbc.minEvictableIdleTimeMillis=300000 5. log4j.properties123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# 定义输出风格ConversionPattern=%d %-5p [%t] %c - %m%n# 配置根Logger## 日志输出级别log4j.rootLogger=debug,Console,Dlog4j.logger.com.cnblogs.lzrabbit=DEBUGlog4j.logger.org.springframework=ERRORlog4j.logger.org.mybatis=DEBUGlog4j.logger.org.apache.ibatis=DEBUGlog4j.logger.org.quartz=ERRORlog4j.logger.org.apache.axis2=ERRORlog4j.logger.org.apache.axiom=ERRORlog4j.logger.org.apache=ERRORlog4j.logger.httpclient=ERROR#log4j.additivity.org.springframework=false# ==========输出到控制台==========log4j.appender.Console=org.apache.log4j.ConsoleAppenderlog4j.appender.Console.Target=System.out# Layout：日志输出格式# org.apache.log4j.PatternLayout：可以灵活地指定布局模式# org.apache.log4j.HTMLLayout：以HTML表格形式布局# org.apache.log4j.SimpleLayout：包含日志信息的级别和信息字符串# org.apache.log4j.TTCCLayout：包含日志产生的时间、线程、类别等等信息log4j.appender.Console.layout=org.apache.log4j.PatternLayoutlog4j.appender.Console.layout.ConversionPattern=$&#123;ConversionPattern&#125;#log4j.appender.Console.encoding=UTF-8# ==========输出到日志文件==========# Appender为日志输出目的地，Log4j提供的appender有以下几种：# org.apache.log4j.ConsoleAppender（控制台），# org.apache.log4j.FileAppender（文件），# org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），# org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），# org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）log4j.appender.D=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.D.DatePattern=&apos;.&apos;yyyy-MM-dd&apos;.log&apos;log4j.appender.D.File=logs/ssm-note.loglog4j.appender.D.Append=true## 输出日志级别log4j.appender.D.Threshold=DEBUGlog4j.appender.D.layout=org.apache.log4j.PatternLayoutlog4j.appender.D.encoding=UTF-8# ==========输出异常信息日志文件==========log4j.appender.E=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.E.DatePattern=&apos;.&apos;yyyy-MM-dd&apos;.log&apos;log4j.appender.E.File=logs/daily.loglog4j.appender.E.Append=truelog4j.appender.E.Threshold=ERRORlog4j.appender.E.layout=org.apache.log4j.PatternLayoutlog4j.appender.E.encoding=UTF-8log4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%t:%r]-[%p] %m%n# 打印参数# %c 输出日志信息所属的类的全名# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d&#123;yyy-MM-dd HH:mm:ss&#125;，# 输出类似：2019-2-21 01:38:37# %f 输出日志信息所属的类的类名# %l 输出日志事件的发生位置，即输出日志信息的的语句处于它所在的类的第几行# %m 输出代码中指定的信息，如log(message)中的message# %n 输出一个回车换行符，Windows平台为&quot;rn&quot;,Unix平台为&quot;n&quot;# %p 输出优先级，即DEBUG.INFO,WARN,ERROR,FATAL.如果是调用debug()输出的，则为DEBUG,以此类推# %r 输出自应用启动到输出该日志信息所耗费的毫秒数# %t 输出产生该日志的线程名 6. 其他登录业务实现代码：LoginController.java，LoginDao.java，User.java，LoginService.java，LoginServiceImpl.java，LoginMapper.xml.xml的具体实现请下载源码。 三、数据结构1. 登录表结构 2. 登录表语句1234567891011121314151617181920212223drop database if exists ssm_note;create database ssm_note;use ssm_note;/*==============================================================*//* DBMS name: MySQL 5.0 *//* Created on: 2019/2/22 1:09:58 *//*==============================================================*/drop table if exists USER_LOGIN;/*==============================================================*//* Table: USER_LOGIN *//*==============================================================*/create table USER_LOGIN( id int not null, USER_NAME varchar(30) not null, PASSWORD varchar(20) not null, REG_TIME datetime not null default CURRENT_TIMESTAMP, primary key (id)); 项目预览一、登录页： 二、欢迎页： 资料推荐 Spring文档：https://spring.io/docs 史上最全的maven的pom.xml文件详解：https://www.cnblogs.com/hafiz/p/5360195.html Spring 实战（第四版） [美]Craig Walls 著 张卫滨 译 Spring MVC 和 Spring 总结：https://www.cnblogs.com/doudouxiaoye/p/5693399.html Mybatis 官方文档：http://www.mybatis.org/mybatis-3/zh/index.html 概念整理1. Spring&emsp;&emsp;创建Spring的主要目的是用来替代更加重量级的企业级Java技术，尤其是EJB。Spring提供了更加轻量级和简单的编程模型。增强了简单老式Java对象（Plain Old Java Object，POJO）的功能。 为了降低Java开发的复杂性，Spring采取了以下四种关键策略： 基于POJO（Plain Old Java Object）的轻量级和最小侵入性编程； 通过依赖注入和面向接口实现松耦合； 基于切面和管理进行声明式编程； 通过切面和模板减少样板式代码。 2. Spring MVC&emsp;&emsp;Spring MVC基于模型-视图-控制器（Model-View-Controller，MVC）模式实现，能够构建像Spring框架那样灵活和松耦合的Web应用程序。Spring MVC是一个基于mvc的web框架。Spring MVC是Spring框架的一个模块，Spring MVC和Spring无需通过中间整合层进行整合。 3. Mybatis&emsp;&emsp;Mybatis是一款优秀的持久层框架，支持定制化SQL、存储过程以及高级映射。可以使用简单的XML或注解来配置和映射原生信息，将接口和Java的Pojo映射成数据库中的记录。 分享欢迎扫描下方二维码，关注weyoung公众号，一起交流学习~~ 更多联系方式 平台 链接 预览项目： https://nelucifer.gitee.io/ 个人微信公众号： weyoung segmentfault: https://segmentfault.com/u/nelucifer CSDN: https://me.csdn.net/wlx001 简书： https://www.jianshu.com/u/99211cc23788 掘金： https://juejin.im/user/59b08c575188250f4850e80e]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>mybatis</tag>
        <tag>spring</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery学习笔记（四）DOM篇]]></title>
    <url>%2FjQuery-usage-4.html</url>
    <content type="text"><![CDATA[DOM包裹wrap()方法如果要将元素用其他元素包裹起来，也就是给它增加一个父元素，JQuery提供了一个wrap方法 .wrap(wrappingElement)：在集合中匹配的每个元素周围包裹一个HTML结构 1&lt;p&gt;p元素&lt;/p&gt; 给p元素增加一个div包裹 1$('p').wrap('&lt;div&gt;&lt;/div&gt;') 最后的结构，p元素增加了一个父div的结构 123&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; .wrap(function) ：一个回调函数，返回用于包裹匹配元素的 HTML 内容或 jQuery 对象使用后的效果与直接传递参数是一样，只不过可以把代码写在函数体内部，写法不同而已以第一个案例为例： 123$('p').wrap(function() &#123; return '&lt;div&gt;&lt;/div&gt;'; //与第一种类似，只是写法不一样&#125;) 注意：.wrap()函数可以接受任何字符串或对象，可以传递给$()工厂函数来指定一个DOM结构。这种结构可以嵌套好几层深，但应该只包含一个核心的元素。每个匹配的元素都会被这种结构包裹。该方法返回原始的元素集，以便之后使用链式方法。 DOM包裹unwrap()方法unwarp()方法 ，作用与wrap方法是相反的。将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置。 123&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; 要删除这段代码中的div，一般常规的方法会直接通过remove或者empty方法 1$('div').remove(); 但是如果还要保留内部元素p 1$('p').unwarp(); 找到p元素，然后调用unwarp方法，这样只会删除父辈div元素了结果： 1&lt;p&gt;p元素&lt;/p&gt; 这个方法不接受任何参数。 DOM包裹wrapAll()方法wrap是针对单个dom元素处理，如果要将集合中的元素用其他元素包裹起来，也就是给他们增加一个父元素，针对这样的处理，JQuery提供了一个wrapAll方法.wrapAll(wrappingElement)：给集合中匹配的元素增加一个外面包裹HTML结构简单的看一段代码： 12&lt;p&gt;p元素&lt;/p&gt;&lt;p&gt;p元素&lt;/p&gt; 给所有p元素增加一个div包裹 1$('p').wrapAll('&lt;div&gt;&lt;/div&gt;') 最后的结构，2个P元素都增加了一个父div的结构 1234&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; .wrapAll(function) ：一个回调函数，返回用于包裹匹配元素的 HTML 内容或 jQuery 对象通过回调的方式可以单独处理每一个元素以上面案例为例， 123$('p').wrapAll(function() &#123; return '&lt;div&gt;&lt;div/&gt;'; &#125;) 以上的写法的结果如下: 123456&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt;&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; 注意：.wrapAll()函数可以接受任何字符串或对象，可以传递给$()工厂函数来指定一个DOM结构。这种结构可以嵌套多层，但是最内层只能有一个元素。所有匹配元素将会被当作是一个整体，在这个整体的外部用指定的 HTML 结构进行包裹。 DOM包裹wrapInner()方法将合集中的元素内部所有的子元素用其他元素包裹起来，并当作指定元素的子元素.wrapInner( wrappingElement )：给集合中匹配的元素的内部，增加包裹的HTML结构 12&lt;div&gt;p元素&lt;/div&gt;&lt;div&gt;p元素&lt;/div&gt; 给所有元素增加一个p包裹 1$('div').wrapInner('&lt;p&gt;&lt;/p&gt;') 最后的结构，匹配的di元素的内部元素被p给包裹了 123456&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt;&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; .wrapInner(function) ：允许我们用一个callback函数做参数，每次遇到匹配元素时，该函数被执行，返回一个DOM元素，jQuery对象，或者HTML片段，用来包住匹配元素的内容。以上面案例为例， 123$('div').wrapInner(function() &#123; return '&lt;p&gt;&lt;/p&gt;'; &#125;) 结果如下: 123456&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt;&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; 注意：当通过一个选择器字符串传递给.wrapInner() 函数，其参数应该是格式正确的 HTML，并且 HTML 标签应该是被正确关闭的。 jQuery遍历之children()方法.children(selector) 方法是返回匹配元素集合中每个元素的所有子元素（仅儿子辈，这里可以理解为就是父亲-儿子的关系） 12345&lt;div class="div"&gt; &lt;ul class="son"&gt; &lt;li class="grandson"&gt;1&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 代码如果是$(“div”).children()，那么意味着只能找到ul，因为div与ul是父子关系，li与div是祖辈关系，因此无法找到。 children()无参数允许我们通过在DOM树中对这些元素的直接子元素进行搜索，并且构造一个新的匹配元素的jQuery对象注意：jQuery是一个合集对象，所以通过children是匹配合集中每一给元素的第一级子元素 .children()方法选择性地接受同一类型选择器表达式 1234567$("div").children(".selected")$('.div').children().css('border', '3px solid red')//找到所有class=div的元素//找到其对应的子元素ul，然后筛选出最后一个，给边宽加上颜色$('.div').children(':last').css('border', '3px solid blue') jQuery遍历之find()方法jQuery是一个合集对象，快速查找DOM树中的这些元素的后代元素可以用find()方法，这也是开发使用频率很高的方法。 12345&lt;div class="div"&gt; &lt;ul class="son"&gt; &lt;li class="grandson"&gt;1&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; $(“div”).find(“li”)，li与div是祖辈关系，通过find方法就可以快速的查找到了。 .find()方法要注意的知识点： find是遍历当前元素集合中每个元素的后代。只要符合，不管是儿子辈，孙子辈都可以。 与其他的树遍历方法不同，选择器表达式对于 .find() 是必需的参数。如果我们需要实现对所有后代元素的取回，可以传递通配选择器 ‘*’。 find只在后代中遍历，不包括自己。 选择器 context 是由 .find() 方法实现的；因此，$(‘.item-ii’).find(‘li’) 等价于 $(‘li’, ‘.item-ii’)(找到类名为item-ii的标签下的li标签)。 注意：.find()和.children()方法是相似的 children只查找第一级的子节点，是父子关系查找 find查找范围包括子节点的所有后代节点，（包含父子关系） jQuery遍历之parent()方法快速查找合集里面的每一个元素的父元素（父亲-儿子的关系），此时可以用parent()方法，这个方法只会向上查找一级123456&lt;div class="div"&gt; &lt;ul class="son"&gt; &lt;li class="grandson"&gt;1&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 12// 查找ul的父元素div$(ul).parent() parent()无参数parent()方法允许在DOM树中搜索到这些元素的父级元素，从有序的向上匹配元素，并根据匹配的元素创建一个新的 jQuery 对象 注意：jQuery是一个合集对象，所以通过parent是匹配合集中每一个元素的父元素parent()方法选择性地接受同一型选择器表达式,同样的也是因为jQuery是合集对象，可能需要对这个合集对象进行一定的筛选，找出目标元素，所以允许传一个选择器的表达式 jQuery遍历之parents()方法快速查找合集里面的每一个元素的所有祖辈元素，此时可以用parents()方法其实也类似find与children的区别，parent只会查找一级，parents则会往上一直查到查找到祖先节点理解节点查找关系： 1 在li节点上找到祖 辈元素div， 这里可以用$(“li”).parents()方法 parents()无参数parents()方法允许在DOM树中搜索到这些元素的祖先元素，有序的向上匹配元素，并根据匹配的元素创建一个新的 jQuery 对象;返回的元素秩序是从离他们最近的父级元素开始的注意：jQuery是一个合集对象，所以通过parent是匹配合集中所有元素的祖辈元素 parents()方法选择性地接受同一型选择器表达式同样的也是因为jQuery是合集对象，可能需要对这个合集对象进行一定的筛选，找出目标元素，所以允许传一个选择器的表达式注意事项： .parents()和.parent()方法是相似的，但后者只是进行了一个单级的DOM树查找 $( “html” ).parent()方法返回一个包含document的集合，而$( “html” ).parents()返回一个空集合。 123//找到当前元素的所有祖辈元素,筛选出class="first-div"的元素//并且附上一个边$('.item-b').parents('.first-div').css('border', '2px solid blue')]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>前端</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人人都可快速上手的GitBook使用笔记（持续更新中）]]></title>
    <url>%2Fgitbook-usage.html</url>
    <content type="text"><![CDATA[介绍GitBook是Markdown与HTML完美的结合。 百科介绍：GitBook是一个基于Node.js的命令行工具，可通过Markdown来制作电子书、在线文档等。GitBook支持输出多种格式： PDF： 需要安装gitbook-pdf依赖； eBook： 需要安装ebook-convert； 单HTML网页： 支持将内容输出为单页的HTML。 前置条件 需要安装Node.js； 安装GitBook命令行工具； MarkDown常用语法； 本文介绍环境配置 NPM版本： 5.6.0 OS版本：Windows10 CLI version: 2.3.2 GitBook version: 3.2.3 相关网站 Gitbook好用的插件：https://plugins.gitbook.com/ Gitbook使用文档：https://github.com/GitbookIO/gitbook 使用步骤GitBook的初始化，编译和预览等均需要在命令行进行，就像hexo编写个人博客一样。 安装GitBook工具1npm install gitbook-cli -g 初始化新建一个目录，命令行打开该目录，然后以下输入命令，就可以初始化书籍，生成两个文件（没有生成其他教程说的book.json）： README.md：书籍介绍 SUMMARY.md：书籍目录 1gitbook init 编译成html生成的文件在上述目录下的_book文件夹下 1gitbook build 本地进行预览浏览器中打开http://localhost:4000进行预览。 1gitbook serve 相关命令1gitbook update # 更新gitbook 手动给GitBook添加book.json因为使用gitbook init生成的目录默认是没有book.json的，那么要引入其他的插件的话就需要自己手动在根目录创建一个book.json，配置之后需要使用gitbook install安装book.json中配置的插件。基本格式如下： { "gitbook": "3.2.3", "title": "标题", "description": "文档描述", "author": "作者", "language": "zh-hans", "links": { "gitbook": true, "sharing": { "google": false, "facebook": false, "twitter": false, "all": false } },//分享按钮是否展示 "plugins": [ "github", "donate", "splitter", "anchor-navigation-ex", "-sharing", "sharing-plus", "-highlight", "prism", "disqus", "editlink", "baidu", "sitemap", "tbfed-pagefooter", "fontsettings", "simple-page-toc", "links" ], "pluginsConfig": { "tbfed-pagefooter": { "copyright": "", "modify_label": "文件修改时间：", "modify_format": "YYYY-MM-DD HH:mm:ss" },// 文件的修改时间，以及版权声明等 "simple-page-toc": { "maxDepth": 3, "skipFirstH1": true }, "sharing": { "douban": false, "facebook": false, "google": false, "hatenaBookmark": false, "instapaper": false, "line": false, "linkedin": false, "messenger": false, "pocket": false, "qq": false, "qzone": false, "stumbleupon": false, "twitter": false, "viber": false, "vk": false, "weibo": false, "whatsapp": false, "all": [ "weibo", "qq", "qzone", "google", "douban" ] }, "github": { "url": "https://github.com/nelucifer" }, "donate": { "wechat": "", "title": "", "button": "赏", "wechatText": "微信打赏" }, "anchor-navigation-ex": { "associatedWithSummary": false, "showLevel": true, "multipleH1": true, "mode": "float", "pageTop": { "showLevelIcon": false, "level1Icon": "fa fa-hand-o-right", "level2Icon": "fa fa-hand-o-right", "level3Icon": "fa fa-hand-o-right" } }, "theme-default": { "showLevel": true }, "fontsettings": { "theme": "white", "family": "serif", "size": 2 },// 显示样式以及文字大小的主题 "sidebar": { }, "disqus": { "shortName": "webpack-handbook" //生成评论 }, "github": { "url": "https://github.com/nelucifer/front-template" }, "editlink": { "base": "https://github.com/nelucifer/", "label": "编辑本页面" //内容顶部显示 编辑本页 链接，点击跳转到配置的源码存放位置 }, "baidu": { "token": "" //百度站长工具统计 }, "sitemap": { "hostname": "http://baidu.com/"//站点地图 }, "prism": { "css": [ "prismjs/themes/prism-tomorrow.css" ] } } }]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>GitBook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis系列——windows下redis设置及安装windows服务]]></title>
    <url>%2Fredis-windows-install.html</url>
    <content type="text"><![CDATA[前言Redis是一个开源（BSD许可），内存数据结构存储，用作数据库，缓存和消息代理。 它支持数据结构，如字符串，散列，列表，集合，带有范围查询的排序集，位图，超级日志，带有半径查询和流的地理空间索引。 Redis具有内置复制，Lua脚本，LRU驱逐，事务和不同级别的磁盘持久性，并通过Redis Sentinel提供高可用性并使用Redis Cluster自动分区。本文简单记录一下windows下redis设置及安装成windows服务。 介绍 REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。 百度百科：Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 官网介绍: Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.Google 翻译：Redis是一个开源（BSD许可），内存数据结构存储，用作数据库，缓存和消息代理。 它支持数据结构，如字符串，散列，列表，集合，带有范围查询的排序集，位图，超级日志，带有半径查询和流的地理空间索引。 Redis具有内置复制，Lua脚本，LRU驱逐，事务和不同级别的磁盘持久性，并通过Redis Sentinel提供高可用性并使用Redis Cluster自动分区。 准备下载windows版的redis（解压版），下载地址：https://github.com/ServiceStack/redis-windows/tree/master/downloads下载Redis可视化工具 Redis Desktop Manager，下载地址：https://redisdesktop.com/download百度网盘：链接：https://pan.baidu.com/s/1vcRywB4JTA2xPCUvh0n1DA 提取码：y1vv安装步骤解压redis-64.3.0.503.zip；cmd命令进入该目录 文件 作用 redis-server 启动redis redis-cli redis命令行工具 redis-benchmark 基准测试工具 redis-check-aof AOF持久化文件检测工具和修复工具 redis-check-dump RDB持久化文件检测工具和修复工具 redis-sentinel 启动redis-sentinel 在解压后的文件夹里面，按住shift，然后鼠标右键点击空白区域，选择【在此处打开命令窗口】，快捷打开cmd窗口和当前目录。 启动：带配置文件启动redis:redis.windows.conf 这个文件是redis的配置文件，使用以下命令启动： 1redis-server.exe redis-windows.conf 不带配置文件启动：双击redis-server.exe；或者使用以下命令启动：1redis-server.exe 出现如下图时，启动成功。 登录redis启动redis服务后，需要登录redis来进行操作，这个时候需要按照上面步骤重新打开一个命令窗口，使用redis-cli命令进行登录，命令如下 -h 服务器/主机地址，本地就是127.0.0.1 -p 端口号，默认应该是6379 -a 密码 1redis-cli.exe -h 127.0.0.1 -a lucifer 登录成功后，如下图示： 重置密码打开redis.conf配置文件，我下载的版本配置文件名是redis-windows.conf，找到# requirepass foobared，去掉注释，井号代表注释，然后修改如下即可:1requirepass 你的密码 #我设置的是lucifer 安装成windows服务自己本地练习的时候呢，每一次都要打开目录，然后输入命令来启动服务，再打开另外一个窗口进行操作，确实是不方便，接下来将redis服务安装成windows服务。命令窗口执行以下命令： 1redis-server --service-install redis.windows.conf 常用命令 启动命令： 1redis-server --service-start 停止命令： 1redis-server --service-stop 卸载命令： 1redis-server --service-uninstall Redis可视化工具RedisDesktopManager使用黑窗口操作虽然看起来足够炫酷，但是终究还是不那么方便，因此，需要使用到RDM工具，这块比较简单了就。安装，一路next。填入连接名，随便填，你认识就行；服务器地址、端口号、密码，点测试连接；可以缓存到内容 结束]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>windows</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[好用的前端响应式框架——Bootstrap]]></title>
    <url>%2Fbootstrap-study-note.html</url>
    <content type="text"><![CDATA[引言Bootstrap是美国Twitter公司的设计师Mark Otto和Jacob Thornton合作基于HTML、CSS、JavaScript 开发的简洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。 Bootstrap的优点： 移动设备优先。 响应式设计。基于bootstrap的网站和系统，能够自适应于台式机、平板电脑和手机。 容易上手。前置技能：HTML和CSS的基础知识即可。 浏览器支持比较好。IE、FireFox、Chrome、Opera、Safari等。 文档比较完善、内置组件比较多，容易定制。 开源。 准备Bootstrap提供多种使用方式：直接下载Bootstrap并引入；使用BootstrapCDN；包管理工具；npm、RubyGems、Composer、NuGet。这里主要说一下使用第一种方式（直接下载Bootstrap并引入），也是最常见的一种方式，也可以直接使用BootstrapCDN提供的免费CDN加速版本。 下载版本： 下载适用于生产环境的Bootstrap（不包含文档）； 下载Bootstrap源码（包含文档）； Sass 用于快速地在 Rails、Compass 或 只针对 Sass 的项目中引入。 下载链接：https://v3.bootcss.com/getting-started/#download-composer开始文件结构bootstrap/ css/ bootstrap.css bootstrap.min.css bootstrap-theme.css bootstrap-theme.min.css js/ bootstrap.js bootstrap.min.jsBootstrap使用在使用Bootstrap的html模板中进行使用。12345678910111213&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Bootstrap使用和效果预览&lt;/title&gt; &lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt; &lt;link rel="stylesheet" href="/css/bootstrap.min.css"&gt; &lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt; &lt;link rel="stylesheet" href="/css/bootstrap-theme.min.css"&gt; &lt;!-- jQuery (Bootstrap 的 JavaScript 插件需要引入 jQuery) --&gt; &lt;script src="/js/jquery.js"&gt;&lt;/script&gt; &lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt; &lt;script src="/js/bootstrap.min.js"&gt;&lt;/script&gt;&lt;/head&gt; Bootstrap的相关概念Bootstrap 包含了一个响应式的、移动设备优先的、不固定的网格系统，可以随着设备或视口大小的增加而适当地扩展到 12 列。前面有说过bootstrap的一个优点，那就是移动设备优先：优先设计更小的宽度，即默认设计是移动设备的样式，再使用媒体查询来设置平板电脑、台式电脑以及大台式电脑。1234567891011/* 超小设备（手机，小于 768px） *//* Bootstrap 中默认情况下没有媒体查询 *//* 小型设备（平板电脑，768px 起） */@media (min-width: @screen-sm-min) &#123; ... &#125;/* 中型设备（台式电脑，992px 起） */@media (min-width: @screen-md-min) &#123; ... &#125;/* 大型设备（大台式电脑，1200px 起） */@media (min-width: @screen-lg-min) &#123; ... &#125; 具体设置及行为见下表： 超小设备手机（&lt;768px） 小型设备平板电脑（≥768px） 中型设备台式电脑（≥992px） 大型设备台式电脑（≥1200px） 网格行为 一直是水平的 以折叠开始，断点以上是水平的 以折叠开始，断点以上是水平的 以折叠开始，断点以上是水平的 最大容器宽度 None (auto) 750px 970px 1170px Class 前缀 .col-xs- .col-sm- .col-md- .col-lg- 列数量和 12 12 12 12 最大列宽 Auto 60px 78px 95px 间隙宽度 30px（一个列的每边分别 15px） 30px（一个列的每边分别 15px） 30px（一个列的每边分别 15px） 30px（一个列的每边分别 15px） 可嵌套 Yes Yes Yes Yes 偏移量 Yes Yes Yes Yes 列排序 Yes Yes Yes Yes Bootstrap怎么用？在一个div中的class中定义col--，第一个星号的值范围是[xs,sm,md,lg] ，第二个星号的值范围是1-12；因此设置的时候需要注意数值是否规范。12345678&lt;div class="container"&gt; &lt;div class="row"&gt; &lt;!-- 在一个div中的class中定义col-*-*，第一个星号的值范围是[xs,sm,md,lg] ，第二个星号的值范围是1-12--&gt; &lt;div class="col-*-*"&gt;&lt;/div&gt; &lt;div class="col-*-*"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="row"&gt;...&lt;/div&gt;&lt;/div&gt; Bootstrap布局组件 Bootstrap 字体图标 Bootstrap 下拉菜单 Bootstrap 按钮组 Bootstrap 按钮下拉菜单 Bootstrap 输入框组 Bootstrap 导航元素 Bootstrap 导航栏 Bootstrap 面包屑导航 Bootstrap 分页 Bootstrap 标签 Bootstrap 徽章 Bootstrap 超大屏幕 Bootstrap 页面标题 Bootstrap 缩略图 Bootstrap 警告 Bootstrap 进度条 Bootstrap 多媒体对象 Bootstrap 列表组 Bootstrap 面板 Bootstrap WellsBootstrap插件 Bootstrap 过渡效果 Bootstrap 模态框 Bootstrap 下拉菜单 Bootstrap 滚动监听 Bootstrap 标签页 Bootstrap 提示工具 Bootstrap 弹出框 Bootstrap 警告框 Bootstrap 按钮 Bootstrap 折叠 Bootstrap 轮播 Bootstrap 附加导航Bootstrap常用插件 表单验证插件 bootstrapValidator Messenger 弹框组件库结语文档上提供的BootstrapDialog模态框组件的实现比较繁琐，因此可以在网上找相关插件处理。文档 Bootstrap官网：http://www.bootcss.com/ Bootstrap官方文档：https://v3.bootcss.com/components/致谢在学习过程中，经常在菜鸟教程http://www.runoob.com/查阅资料，表示感谢。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>前端</tag>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mybatis常见错误记录]]></title>
    <url>%2Fmybatis%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;Mybatis使用过程中，常见的一些问题汇总记录。 1. Mybatis执行SQL，查出来的比使用PL/SQL等工具查出来的记录多。 问题描述：由于查询要使用到not in，因此 not in ()括号里面的东西自己使用了前端拼接传值，传值格式为’’,’’ 问题处理：在Mapper.xml中使用了#{}，这块涉及到#{}和${}的区别。替换成${} 就好了。2. MyBatis mapper文件中的变量引用方式#{}与${}的差别默认情况下,使用#{}语法,MyBatis会产生PreparedStatement语句中，并且安全的设置PreparedStatement参数，这个过程中MyBatis会进行必要的安全检查和转义。示例1：执行SQL：1Select * from emp where name = #&#123;employeeName&#125; 参数：employeeName传入值为：Smith解析后执行的SQL：1Select * from emp where name = ? 执行SQL：1Select * from emp where name = $&#123;employeeName&#125; 参数：employeeName传入值为：Smith解析后执行的SQL：1Select * from emp where name = Smith 综上所述、${}方式会引发SQL注入的问题、同时也会影响SQL语句的预编译，所以从安全性和性能的角度出发，能使用#{}的情况下就不要使用${}${}的使用场景：有时候可能需要直接插入一个不做任何修改的字符串到SQL语句中。这时候应该使用${}语法。比如，动态SQL中的字段名，如：ORDER BY ${columnName}，not in ${items}注意：当使用${}参数作为字段名或表名时、需指定statementType为“STATEMENT”，如：123&lt;select id="queryMetaList" resultType="Map" statementType="STATEMENT"&gt; Select * from emp where name = $&#123;employeeName&#125; ORDER BY $&#123;columnName&#125;&lt;/select&gt; 3. ssm-web项目启动报错（一） Could not resolve type alias ‘map ‘. Cause: java.lang.ClassNotFoundException: Cannot find class: map123&lt;select id="selectByCode" resultType="com.lucifer.pojo.BaseParams" parameterType="java.util.map"&gt; SELECT BP.ID,BP.NAME FROM BASE_PARAMS BP WHERE BP.DOMAIN=#&#123;domain&#125; AND BP.IS_CANCEL='N'&lt;/select&gt; 处理方式：把resultType改为resultMap，把parameterType改为parameterMap，重新发布并运行。 4. ssm-web项目启动报错（二） org.mybatis.spring.transaction.SpringManagedTransaction - JDBC Connection [**] will not be managed by Spring 处理方式：]]></content>
      <categories>
        <category>错误</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxJava]]></title>
    <url>%2Frxjava.html</url>
    <content type="text"><![CDATA[RxJava当被观察者(Observable)的生成速度大于观察者(Observer)的处理速度会出现 Backpressure 现象(只有在异步环境下会发生).会抛出 MissingBackpressureException 异常信息 Hot and Cold Observables Cold Observables：当被订阅后才开始发送事件的Observable(每个Subscriber都能接收到完整的事件) Hot Observables: 不管有没有被订阅,都会去发送事件的 Observable Hot Observable 是不支持背压的,Cold Observable 有一部分并不支持背压(比如interval，timer等操作符创建的Observable)rxJava2.0 已经解决了这个问题(?:Observable,有的支持背压,有的不支持) cold observable 相当于响应式拉(就是observer处理完了一个事件就从observable拉取下一个事件),hot observable通常不能很好的处理响应式拉模型,例如使用onBackpressureBuffer或者onBackpressureDrop 操作符,和其他操作符比如operators, throttling, buffers, or windows. observeOn这个操作符内部有一个缓冲区，默认长度是16.经常用到的Observable.create 就是 Cold Observable,而 just, range, timer 和 from 这些创建的同样是 Cold Observable.我们一般使用的都是Cold Observable,除非特殊需求,才会使用Hot Observable 背压操作符rxJava1.X 针对不支持背压提供的操作符有：sample(),throttleLast(),throttleFirst(),throttleWithTimeout(),debounce(),onBackpressurebuffer(),onBackpressureDrop() RxJava1.x vs RxJava2.x 2.x 发送事件时不能传 null,否则会抛出空指针异常 2.x 中 Observable 不再支持背压, 用 Flowable 来支持背压 线程调度方面 2.x 取消 Schedulers.immediate() RxJava2 BackpressureObservable拆分成了新的 Observable 和 Flowable,Observable 不具备处理背压能力,Flowable 解决了背压问题,Backpressure 只在异步情况下产生,RxJava2 的处理策略仅仅是对观察者接收事件的处理 1.ERROR产生背压问题会抛出 MissingBackpressureException 异常信息在异步调用时,RxJava中有个缓存池，用来缓存消费者处理不了暂时缓存下来的数据,缓存池的默认大小为128,即只能缓存128个事件.无论request()中传入的数字比128大或小,缓存池中在刚开始都会存入128个事件12Flowable.create(new FlowableOnSubscribe&lt;&gt;(),BackpressureStrategy.ERROR) .subscribe(new Subscriber()); BUFFER把RxJava中默认的只能存128个事件的缓存池换成一个大的缓存池，支持存很多很多的数据,比较消耗内存 DROP LATESTDROP 丢弃事件,LATEST使消费者能够接收到生产者产生的最后一个事件]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>RxJava</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记使用hexo搭建个人博客-报错集锦]]></title>
    <url>%2Fhexo-coding-github-%E6%8A%A5%E9%94%99%E9%9B%86%E9%94%A6.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;使用hexo+github/coding+next搭建个人博客过程中遇到的一些问题集中整理，包括： 报错一：TypeError: Cannot set property ‘lastIndex’ of undefined 报错二：Permission denied (publickey). 报错三：Error: ERROR: Repository not found. fatal: Could not read from remote repository. 报错一：TypeError: Cannot set property ‘lastIndex’ of undefined问题描述：使用hexo g 报错 TypeError: Cannot set property ‘lastIndex’ of undefined 问题处理：在hexo中的_config.yml 文件中的高亮功能设置错了，不是主题的_config.yml，其中的 auto_detect 应该设置为 false。12345highlight: enable: true line_number: true auto_detect: false tab_replace: 改过之后再执行就好了。 报错二： Permission denied (publickey).问题处理：第一步：创建SSH Key。windows下的目录C:\Users\用户名.ssh，看看有没有.ssh目录，，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：1ssh-keygen -t rsa -C "ne_lucifer@163.com" 你需要把邮件地址换成你自己的邮件地址，然后点击回车，使用默认值即可。第二步：登录Github（登录后路径https://github.com/settings/keys）或者Coding(登录后路径)，按如下步骤操作，用记事本打开id_rsa.pub，全选，把里面的内容粘贴到公钥内容里，title随便起一个 报错三： Error: ERROR: Repository not found. fatal: Could not read from remote repository.问题描述：使用hexo d部署项目到pages服务时报错1234567891011121314Please make sure you have the correct access rightsand the repository exists.FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: ERROR: Repository not found.fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. at ChildProcess.&lt;anonymous&gt; (F:\WorkSpaces\hexo\blog\node_modules\hexo-util\lib\spawn.js:37:17) at ChildProcess.emit (events.js:182:13) at ChildProcess.cp.emit (F:\WorkSpaces\hexo\blog\node_modules\cross-spawn\lib\enoent.js:40:29) at maybeClose (internal/child_process.js:962:16) at Socket.stream.socket.on (internal/child_process.js:381:11) at Socket.emit (events.js:182:13) at Pipe._handle.close (net.js:606:12) 查看远端有没有这个分支；使用ssh -T git@git.coding.net命令，会出现下面信息，输入yes然后回车即可部署。123The authenticity of host &apos;git.coding.net (118.25.166.124)&apos; can&apos;t be established.RSA key fingerprint is SHA256:这块是一串编码.Are you sure you want to continue connecting (yes/no)?]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>gitalk</tag>
        <tag>github</tag>
        <tag>coding</tag>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记使用hexo搭建个人博客（三）]]></title>
    <url>%2Fhexo-coding-github-3.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;使用hexo+next+github/coding+gitalk添加博客评论系统,以及hexo+next+码云+issue，这里使用的是next主题，如有问题，可以在博客下方评论。本文内容如下： 使用gitalk为博客添加评论功能、 vscode 使用七牛云做图床、 Hexo Next主题SEO优化、 Hexo 添加RSS订阅 next主题添加gitalk 准备在使用gitalk作为评论系统之前，需要在github上注册新的应用； 注册GitHub应用链接。按如下描述填写:填写完成后，点击绿色按钮，跳转到一下页面，可以看到Client ID和Client Secret，后面会用到。在项目目录下执行如下命令npm install gitalk –save 安装gitalk； 修改的内容新建gitalk.swig；路径themes/next/layout/_third-party/comments/gitalk.swig，内容如下：12345678910111213141516&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt; &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var gitalk = new Gitalk(&#123; clientID: &apos;&#123;&#123; theme.gitalk.ClientID &#125;&#125;&apos;, clientSecret: &apos;&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;&apos;, repo: &apos;&#123;&#123; theme.gitalk.repo &#125;&#125;&apos;, owner: &apos;&#123;&#123; theme.gitalk.githubID &#125;&#125;&apos;, admin: [&apos;&#123;&#123; theme.gitalk.adminUser &#125;&#125;&apos;], id: location.pathname, distractionFreeMode: &apos;&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;&apos; &#125;) gitalk.render(&apos;gitalk-container&apos;) &lt;/script&gt;&#123;% endif %&#125; 修改comments.swig路径themes/next/layout/_partials/comments.swig，在最后一个div里面加上如下内容：12&#123;% elseif theme.gitalk.enable %&#125; &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt; 修改index.swig路径themes/next/layout/_third-party/comments/index.swig，在最后一行加上如下内容：1&#123;% include &apos;gitalk.swig&apos; %&#125; 新建gitalk.styl路径themes/next/source/css/_common/components/third-party/gitalk.styl，内容如下：1234.gt-header a, .gt-comments a, .gt-popup a border-bottom: none;.gt-container .gt-popup .gt-action.is--active:before top: 0.7em; 修改third-party.styl路径themes/next/source/css/_common/components/third-party/gitalk.styl，在最后一行加上如下内容：1@import &quot;gitalk&quot;; 修改文件_config.yml路径themes/next/_config.yml，注意是主题的配置文件，增加内容如下：12345678910gitalk: enable: true githubID: nelucifer # 例：nelucifer repo: nelucifer.github.io # 存储你评论 issue 的 Github 仓库名（建议直接用 GitHub Page 的仓库名） 例：nelucifer.github.io ClientID: 这块填注册Github应用成功之后的ClientID ClientSecret: 注册Github应用成功之后的ClientSecret #owner: 'Github 用户名', adminUser: ['nelucifer'] #指定可初始化评论账户，Github仓库的管理员，可以有多个 distractionFreeMode: true #id: 'window.location.pathname' #页面的唯一标识，gitalk根据这个标识自动创建的issue的标签,此处使用页面的相对路径作为标识 参考文章&emsp;&emsp;在使用gitalk作为评论系统的时候，参考了以下文章，特此添加链接，表示感谢： hexo 博客next主题集成gitment或者gitalk评论系统 hexo next主题深度优化(五)，评论系统换成gittalk vscode + 七牛云现在使用七牛云做图床需要已经备案的域名，测试域名不能用啦。 准备 下载vscode，这儿是下载链接 七牛云，传送门安装七牛云插件 安装插件：qiniu-upload-image 文件&gt;首选项&gt;设置，在右侧setting.json填写自己的配置覆盖默认配置。配置文件如下，使用的配置是七牛云里面的【密钥管理】：123456789101112131415161718192021&#123; // 一个有效的七牛 AccessKey 签名授权。 &quot;qiniu.access_key&quot;: &quot;密钥管理里面的AK&quot;, // 七牛图片上传空间。 &quot;qiniu.bucket&quot;: &quot;weyoung-pub&quot;, // 七牛图床域名。 &quot;qiniu.domain&quot;: &quot;自己配置的图床域名，使用二级域名就行&quot;, // 七牛图片上传工具开关 &quot;qiniu.enable&quot;: true, // 七牛图片上传路径，参数化命名。 &quot;qiniu.remotePath&quot;: &quot;$&#123;fileName&#125;-$&#123;dateTime&#125;&quot;, // 一个有效的七牛 SecretKey 签名授权。 &quot;qiniu.secret_key&quot;: &quot;密钥管理里面的SK&quot;, &quot;files.autoSave&quot;: &quot;afterDelay&quot;, &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\Windows\\System32\\cmd.exe&quot;,&#125; 使用快捷键 粘贴图片路径上传：SHIFT + P直接选择图片上传：SHIFT + O 安装插件Ctrl+P 输入命令：1ext install qiniu-upload-image 完成Hexo Next 主题SEO优化SEO ？汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。 针对百度搜索引擎的优化1. 添加百度sitemap，生成sitemap文件安装两个插件12npm install hexo-generator-sitemap --save-devnpm install hexo-generator-baidu-sitemap --save-dev 上面的是传统的sitemap，下面的是百度专有的sitemap。测试是否安装成功。使用命令hexo s本地预览。本地预览：[http://localhost:4000/sitemap.xml]http://localhost:4000/sitemap.xml 和 [http://localhost:4000/baidusitemap.xml]http://localhost:4000/baidusitemap.xml 显示sitemap文件内容。 2. 注册百度搜索资源工具地址：https://ziyuan.baidu.com/添加网站之后，需要验证，验证方式有文件验证、HTML标签验证、CNAME验证。网上的例子：使用文件验证进行验证。 下载验证文件，放到博客项目的source文件夹下，使用hexo g -d，部署到自己的网站上； 部署之后，在站长工具页面点击验证，能够访问证明验证成功； 然后点击【完成验证】按钮，为保持验证通过的状态,成功验证后请不要删除HTML文件。 我使用这个验证失败，hexo会为文件加上一些样式，验证好几次验证不通过 使用HTML标签验证进行验证。我使用的是Hexo + NexT。 在themes/next/layout/_partials/head.swig文件中，修改meta标签为站长工具里面给出的标签。123&#123;% if theme.baidu_site_verification %&#125; &lt;meta name=&quot;baidu-site-verification&quot; content=&quot;这块修改&quot; /&gt;&#123;% endif %&#125; 或者在 themes/next/_config.yml 添加或者修改，注意格式 12# 百度搜索引擎优化baidu_site_verification: 站长工具里面给出的标签 在themes/next/_config.yml中将false``` 改为true12345678* 使用&lt;code&gt;hexo g -d&lt;/code&gt;，部署到自己的网站上，如果不清楚部署的可以看前两篇文章；* 然后点击【完成验证】按钮，等待百度的审核结果#### 3. 添加robots，方便搜索蜘蛛进行检索&amp;emsp;&amp;emsp;百度百科：robots是网站跟爬虫间的协议，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，也就是说robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。新建&lt;code&gt;robots.txt&lt;/code&gt;文件，添加以下文件内容，把&lt;code&gt;robots.txt&lt;/code&gt;放在的&lt;code&gt;source&lt;/code&gt;文件下。文件内容： hexo robots.txtUser-agent: * Allow: /Allow: /archives/Allow: /about/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /images/ Sitemap: http://www.wanglixia.top/sitemap.xmlSitemap: http://www.wanglixia.top/baidusitemap.xml12345678910111213在百度站长工具-【链接提交】中填写数据文件地址并提交。#### 4. 优化结构 这个我不懂，参考资料: 作者：浪子燕青啦啦啦 [HEXO SEO 高级优化](https://blog.csdn.net/lzy98/article/details/81140704)seo搜索引擎优化认为，网站的最佳结构是用户从首页点击三次就可以到达任何一个页面，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下：```yml# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://www.wanglixia.top/ #你的域名root: /#permalink: :year/:month/:day/:title/ 为了利于SEO，改为以下方式permalink: :title.htmlpermalink_defaults: 首页标题优化，SEO最重要的是你的标题，一般搜索都是搜索你的标题，更改index.swig文件(your-hexo-site\themes\next\layout); 您的站点有链接未通过https检验因为一直使用的是http，百度验证需要使用https。我是使用coding+github双线部署的； coding 设置强制https访问打开项目，【代码】-&gt;【Pages服务】-&gt;【强制 HTTPS 访问】 github 设置强制https访问打开项目，【setting】-&gt;【Enforce HTTPS】的勾打上；完成；访问一下，看下有没有变化啦！ Hexo添加RSS订阅安装feed插件1npm install hexo-generator-feed 在项目根目录的_config.yml添加内容：1234567# Extensionsplugins: hexo-generator-feedfeed: # 实现博客订阅功能 type: atom path: atom.xml limit: 20 使用hexo g -d生成并部署。使用方法：邮件中【新建订阅】，我的订阅地址为：https://www.wanglixia.top/atom.xml，如图： 完成]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>gitalk</tag>
        <tag>github</tag>
        <tag>coding</tag>
        <tag>gitee</tag>
        <tag>码云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[npm常用命令]]></title>
    <url>%2Fnpm-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"><![CDATA[&emsp;&emsp; 使用npm的时候，有一些命令及配置常用到，记录。 npm修改源&emsp;&emsp;使用npm在npm install时，速度特别慢，因此修改npm的数据源1npm config set registry https://registry.npm.taobao.org 修改后，即可进行下载啦，速度快了好多~~]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记之陀氏-穷人的美德]]></title>
    <url>%2F%E7%9C%8B%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%99%80%E6%B0%8F-%E7%A9%B7%E4%BA%BA%E7%9A%84%E7%BE%8E%E5%BE%B7.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;陀氏的《穷人的美德》，摘部分内容于此文中。 目录穷人的美德就是会赚钱 穷人最重要的美德就是会赚钱，道德就是一个人不该成为其他人的累赘 。 要爱别人，首先爱自己，因为世界上的一切都是以个人利益为基础的。 有几个人的表现特别突出，自然招来一些流言蜚语。因为没有流言蜚语，世界就无法存在，千百万人就会像苍蝇一样，因为寂寞无聊而死去。 用千万件好事去抵一桩小罪 命定的事总是会实现的，有价值的人将占有他应有的位置，而无价值的人将永远躲进小胡同，躲进他肮脏的小胡同，他喜爱而且正适合于他的小胡同，并且就在那污秽和臭气中，心甘情愿而且愉快地结束他的生命。 我们每个人都应该对世上一切人和一切事物负责，这一点是毫无疑义的，这不但是因为大家都参与了整个世界的罪恶，也是因为个人本来就应该为世上的一切人和一切事物负责。 在这种放荡生活里至少有一种固定不变的东西，它甚至是以天性为基础，而不是为幻想所左右的，它犹如血液中永不熄灭的炭火，永远燃烧着，还要燃烧很久很久，随着年龄的增长，或许也不能让它很快熄灭。 一时糊涂与意志衰退天才人物与犯罪的权利 总而言之，我得出结论，所有这些人，不仅是那些伟大的，就连那些稍微越出常轨的人，也就是说，就连那些稍微能提出点儿什么新见解的人，就其天性来说，必须是罪人–当然，只是在一定程度上，不然，他们就难以越出常轨；而让他们循规蹈矩，不越雷池一步，他们当然不会同意，这又是由于他们的天性，而照我看，他们甚至有责任不同意。 按照自然规律，人一般可以分作两类：一类是低级的（平凡的），也可以这么说吧。仅仅是一种繁殖同类的材料；另一类是名副其实的人，也就是有天赋或天才，能在自己的社会上发表新见解的人。……第一类人永远是当代的主人，第二类人却是未来的主人。第一类人保全世界，增加人的数量；第二类人则推动世界向前发展，引导它达到自己的目的。无论是这一类人，还是那一类人，都有完全同等的生存权利。 我杀死的只是原则 一般说，有新思想的人，即使只是稍微能发表某种新见解的人，通常是生得很少的，甚至少得出奇。明确的只有一点：必须有某种自然法则来正确无误地确定人的出生规律，正确无误地确定分类和区分他们的规律。 对于一个知识全面、思想深刻的人，痛苦是必然的，既有精神上的痛苦，也有肉体上的痛苦，我觉得，真正的伟人应该察觉到人世间极大地忧虑。 ……“单就这一点来说，我就是一只虱子，因为，第一，现在我认为我是只虱子；第二，因为整整一个月来，我一直在打搅仁慈的上帝，请他作证，说是，我这么做不是为了自己肉体上的享受和满足自己的淫欲，而是有一个让人感到高兴的崇高目的–哈–哈！… …” 谁能敢作敢为，谁就最最正确 权力只会给予敢于觊觎并夺取它的人。这里只有一个条件，仅仅一个条件：只要敢作敢为！ 既然我反复自问：我有没有权利掌握权力？–那么，这就是说，我没有权利掌握权力。 总是希望生命有更大的意义 他一向认为，单单生存是不够的，他总是希望生命有更大的意义。也许只是由于他抱有希望，当时他才自认为是一个比别人享有更多权利的人吧！]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>陀思妥耶夫斯基</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习jdk1.8-Lambda 表达式 与Collections]]></title>
    <url>%2F2018813214038%E5%AD%A6%E4%B9%A0jdk1-8.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;直到现在jdk1.8版本已经发布了有近5个年头了。今天做一个浅显的学习和记录，便于后面的查找。如果你也有兴趣，不妨一起交流交流，如有不对之处，还请指点指点… 写在前面&emsp;&emsp;看牛逼的代码，到处都是知识点。咱研究研究一些简单的，使用一些示例代码来进行操作。 Lambda 表达式老版本的Java中的排序方式,实现一组字符串按照字典反序排列，排序结果[“peter”,”jany”,”brain”,”anna”,”alex”]：12345678List&lt;String&gt; names = Arrays.asList("peter","anna","brain","jany","alex");Collections.sort(names, new Comparator&lt;String&gt;()&#123; @Override public int compare(String a, String b)&#123; return b.compareTo(a); &#125;&#125;) Comparator 中 compare方法介绍：Collections 中 sort方法介绍：该方法默认的排序是正序String的compareTo方法：public int compareTo(String anotherString)如果参数字符串等于此字符串，则值为0 ; 如果这个字符串的字典比字符串参数小，则值小于0; 如果此字符串的字典大小超过字符串参数，则值大于0 。Java8中的lambda表达式：123Collections.sort(names,(String a, String b) -&gt; &#123; return b.compareTo(a);&#125;) 更简单的方式:1Collections.sort(names,(String a, String b) -&gt; b.compareTo(a)); 更更简单的方式：1Collections.sort(names,(a,b) -&gt; b.compareTo(a)); 一种不使用lambda表达式的方法，reverseOrder() 以反字典（字母顺序）排列阵列：1Collections.sort(names, Comparator.reverseOrder()); Stream 接口&emsp;&emsp;Java8 中的 Stream 是对集合（Collection）对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作（aggregate operation），或者大批量数据操作 (bulk data operation)。Stream API 借助于同样新出现的 Lambda 表达式，极大的提高编程效率和程序可读性，串行Stream上的操作是在一个线程中依次完成，而并行Stream则是在多个线程上同时执行。 创建一个stream的方式,Collection.stream()创建了一个串行的stream；Collection.parallelStream()创建了一个并行的stream；：1234567List&lt;String&gt; stringCollection = new ArrayList&lt;&gt;();stringCollection.add("ddd");stringCollection.add("ccc");stringCollection.add("bbb");stringCollection.add("aaa");Stream&lt;String&gt; stream = stringCollection.stream();Stream&lt;String&gt; stringStream = stringCollection.parallelStream();]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jdk1.8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows server 2012 的一些使用记录]]></title>
    <url>%2Fwindows-server-2012.html</url>
    <content type="text"><![CDATA[写在前面windows server 2012 的一些操作记录。 关闭IIS服务器 关闭IIS服务器&emsp;&emsp;win+r输入services.msc打开服务，找到 World Wide Web Publishing Service 选择停止，用不到的话，选择禁用，然后确定；]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle中的常用函数]]></title>
    <url>%2FOracle%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html</url>
    <content type="text"><![CDATA[写在前面整理一些oracle中最常用的方法，以作记录，便于使用时进行查找。（持续更新…） 常用的一些函数nvl函数的使用:nvl(paramA,paramA)用于返回一个不为null的值；1. 有一个参数为null的情况，返回不为null的那个值；下例返回的就是 &lt;code&gt;1&lt;/code&gt;; 1select nvl(1, null) from dual; 2. 两个参数都为null的情况，返回值为null；下例返回的结果就是&lt;code&gt;null&lt;/code&gt;; 1select nvl(null,null) from dual; 3. 两个参数都不为null的情况，返回第一个参数；下例返回的结果就是&lt;code&gt;1&lt;/code&gt;; 1select nvl(1,2) from dual; 注意 123select nvl('',0.08) from dual;--在oracle中返回的是.08select decode('',null,0.08) from dual;--返回0.08 ###]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[winsows10环境下解决vmware中windows server服务器ping不通]]></title>
    <url>%2F2018-07-22-vmware-ping.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;使用vmware安装了windows server 2012，安装完毕之后，想从宿主机上远程到虚拟机中，发现本地网络和虚拟机网络不能ping通，试用了一个办法，可以ping通了，特意记录一下。 环境参考 VMware® Workstation 14 Pro：14.1.1 build-7528167 宿主机：windows 10 虚拟机：windows server 2012 解决办法 下面是宿主机的ip，即现在使用的是本地的主机： 打开VMware-编辑-虚拟网络编辑器，选择右下角更改设置，设置NAT模式的子网地址跟主机一样，这里设置为192.168.2.0 NAT设置 网关IP 也为192.168.2.***，DHCP的起始IP和结束IP的前三段也设置成跟主机一样的。然后就可以主机就可以ping通虚拟机了。 在远程的过程中还有一个问题&emsp;&emsp;就是在远程的时候提示“出现身份验证错误，要求的函数不受支持…可能是由于CredSSP加密Oracle修正”，错误如下：处理这个问题是应该在本地机器进行修改，修改的方法是： win+r键打开运行框，然后输入gpedit.msc，回车，打开本地组策略编辑器； 在 “计算机配置-管理模板-系统-凭据分配”中 找到允许Oracle修正，之后双击，打开如下界面，点击已启用，保护级别选择易受攻击，保存即可。 修正 2018-07-22 22:10&emsp;&emsp;上述方法会导致虚拟机不能联网，以下能够保证虚拟机上网，且主机能够远程虚拟机的办法。本次不使用虚拟机进行网络设置，改为使用windows自带的网络设置。该方法，主机修改为静态IP。首先，在主机命令行中执行ipconfig/all命令，查看本机IP，默认网关、以及DNS服务器地址。再将本机TCP/IPv4设置为以下属性：主机TCP/IPv4共享属性：即可。]]></content>
      <categories>
        <category>vmware</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记使用hexo搭建个人博客（二）]]></title>
    <url>%2Fhexo-coding-github-2.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;使用hexo+github/coding免费搭建个人博客，本文记录hexo博客的一些个性化配置。包括： 修改主题、 头像、 评论、 搜索、 DaoVoice在线联系、 顶部加载条、 访问量统计、 第三方统计、 个性化配置修改主题下载next主题，完成后，修改站点配置文件的 theme: landscape 为 theme: next，然后执行 hexo s 预览 1git clone https://github.com/iissnan/hexo-theme-next themes/next 增加头像并加旋转特效增加统计字数、阅读时长&emsp;&emsp;在主题配置文件themes/next/_config.yml中找到以下内容：将wordcount、min2read修改为true 123456post_wordcount: item_text: true wordcount: true min2read: true totalcount: true separated_meta: true 本地完成以上配置之后还需要增加hexo-wordcount插件，在命令行中执行以下命令： 1npm i --save hexo-wordcount 安装完毕之后，就可以预览了效果了。自定义样式，如字数统计:修改为字数统计:字,在themes/next/layout/_macro/post.swig中找到以下内容 123&lt;span title=&quot;&#123;&#123; __(&apos;post.wordcount&apos;) &#125;&#125;&quot;&gt; &#123;&#123; wordcount(post.content) &#125;&#125;&lt;/span&gt; 修改为123&lt;span title=&quot;&#123;&#123; __(&apos;post.wordcount&apos;) &#125;&#125;&quot;&gt; &#123;&#123; wordcount(post.content) &#125;&#125; 字&lt;/span&gt; 阅读时长:修改为阅读时长:分钟 123&lt;span title=&quot;&#123;&#123; __(&apos;post.min2read&apos;) &#125;&#125;&quot;&gt; &#123;&#123; min2read(post.content) &#125;&#125; &lt;/span&gt; 修改为123&lt;span title=&quot;&#123;&#123; __(&apos;post.min2read&apos;) &#125;&#125;&quot;&gt; &#123;&#123; min2read(post.content) &#125;&#125; 分钟&lt;/span&gt; 即可。 hexo增加七牛云图床及上传参考自： 使用VSCode+七牛云图床插件+自定义快捷键配置Hexo博文编写环境 工具： 使用VSCode进行博客编写； qiniu-upload-image插件，需要进行配置； vscode-Hexo插件； 使用七牛云,点击访问作为图床，这个需要自己申请和认证哈，我的认证花了两天时间~~]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记使用hexo搭建个人博客（一）]]></title>
    <url>%2Fhexo-coding-github-1.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;作为一个码农来说，笔记是必不可少的，一是为了记录，二是为了分享。特意将使用hexo+github/coding免费搭建个人博客的过程也记录了一下，网上类似的文章太多了，有些配置的版本不一样，本文记录hexo环境的搭建及部署到coding/github上. Hexo是什么？&emsp;&emsp;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&emsp;&emsp;详情可参考Hexo官方文档 环境及版本 系统: windows 10 git: version 2.9.0.windows.1 node: v10.6.0 hexo: 3.7.1 hexo-cli: 1.1.0 安装到此步骤已经认为你已经安装了git和node.js。 创建一个目录，比如在E盘根目录下，创建一个hexo文件夹，使用命令行进入此文件夹，(也可以进入此文件夹，右键Git Bash Here)输入： 12npm install -g hexo-clinpm install hexo --save 命令执行后的效果参考： 初始化项目，输入hexo init 项目名，如hexo init blog,将会自动生成blog目录，并自动生成一些目录及文件； 123hexo init blogcd blognpm install 现在可以开始预览了,会出现提示在网址http://localhost:4000/预览 12hexo ghexo s 常用命令&emsp;&emsp;在项目根目录，有个_config.yml,这个是站点配置文件，一些重要的配置都是在这里进行的。 详细的通用配置就参考官网吧，就不重复说了。下面主要记录一下一些个性化的功能。 常用命令： hexo clean ：清除缓存文件 (db.json) 和已生成的静态文件 (public)。 hexo g ：生成静态文件。 hexo s ：本地发布预览。 hexo d ：远程发布。 在coding上部署&emsp;&emsp;访问coding官网，注册账号，注册时的用户名，就是你访问自己博客地址的主体部分，注意点哦。 创建项目: 查看静态pages服务，Coding Pages 已经运行在 https://[你的用户名].coding.me时，说明你配置成功了，我这边是解析自己的域名，略有点不一样。如下图所示： 接下来就要开始准备把项目发布到coding上面了，需要先获取SSHKey，然后修改站点配置文件为coding的项目对应的ssh地址；设置Git的user name和email： 12git config --global user.name "你的git用户名，可以随便起一个"git config --global user.email "你的邮箱地址" 执行以下命令，查看是否已经有了ssh密钥：cd ~/.ssh，输入第二条命令之后，连续3次enter 12cd ~/.sshssh-keygen -t rsa -C "你的邮箱地址" 在C:\Users\你的电脑用户名.ssh 目录下，会有两个文件id_rsa和id_rsa.pub，使用记事本打开id_rsa.pub，复制里面的值，然后浏览器打开你的coding到如下页面，将复制的内容粘贴到公钥内容的文本框里面，点击保存。如下图：测试公钥是否配置成功：ssh -T git@git.coding.net，输入之后，会提示你是否确认，输入yes，回车；提示你通过ssh协议认证。修改你的站点配置文件，这个是在你的本地配置远程服务器地址，hexo项目根目录下的_config.yml，这种文件的格式非常严格，多一个空格就可能会报错。 码云和GitHub双线部署的配置，站点配置文件_config.yml下修改配置，修改为自己的仓库：12345deploy:type: gitrepo: coding: git@git.coding.net:weyoung/weyoung.coding.me.git,master github: git@github.com:nelucifer/nelucifer.github.io.git,master 执行命令,就将你的博客部署到coding上了，如果要解析为自己的域名的话，可以百度、google查看步骤。 123hexo cleanhexo ghexo d github 的部署和在coding上部署基本是一样的]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PowerDesigner导出PDM和rtf文件]]></title>
    <url>%2FPowerDesigner-export-PDM-rtf.html</url>
    <content type="text"><![CDATA[前言&emsp;&emsp;power designer是能进行数据库设计的强大的软件，是一款开发人员常用的数据库建模工具。使用它可以分别从概念数据模型(Conceptual Data Model)和物理数据模型(Physical Data Model)两个层次对数据库进行设计。 使用PowerDesigner导出rtf文件和PDM 准备 PowerDesigner 16.5已有pdm导出rtf打开pdm后，右键点击后选择New-&gt;Report。 出现以下界面，里面的结构可以按你的要求自由组合。一般将名称、代码、数据类型、注释选择导出即可。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>PowerDesigner</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信授权登录(微信订阅号使用测试账号)]]></title>
    <url>%2Fwechat-login.html</url>
    <content type="text"><![CDATA[微信作为现在最火的社交App，使用微信扫描二维码登录也更加方便和快捷，也不至于注册一大堆账号，想起来都烦。使用花生壳+微信测试账号+微信公众号+java做一个demo熟悉下微信开发。demo地址：wxlogin-demo Updated By Mr.wang 2019-1-4： 这个文章是在2017-09-17 在博客园写的，边写代码边写博客，记录的不够详细，还请包涵。微信把接口好像调整了，订阅号现在没有这个测试登录的权限了，但是整体实现应该是没有区别的。 准备 花生壳：用来作为内网穿透，以便微信登录接口（需要公网中能够访问到的地址）回调，花生壳下载链接 微信公众号：设置【授权回调页面域名】； 微信公众号开发测试账号：点击访问申请地址注意事项在微信公众号请求用户网页授权之前，开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头； 开发demo所需要的jar包 直接上代码AuthUtil.java1234567891011121314151617181920212223242526272829303132333435package com.wanglixia;import net.sf.json.JSONObject;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.util.EntityUtils;import java.io.IOException;/** * 功能描述: * &lt;p&gt; * Created by Mr.wang on 2017/9/17 11:57. */public class AuthUtil &#123; public static final String APPID = "这块填appid"; public static final String APPSECRET = "这块是appsecret"; public static JSONObject doGetJson(String url) throws IOException &#123; JSONObject jsonObject = null; DefaultHttpClient client = new DefaultHttpClient(); HttpGet httpGet = new HttpGet(url); HttpResponse httpResponse = client.execute(httpGet); HttpEntity entity = httpResponse.getEntity(); if (entity != null) &#123; String result = EntityUtils.toString(entity, "UTF-8"); jsonObject = JSONObject.fromObject(result); &#125; httpGet.releaseConnection(); return jsonObject; &#125;&#125; CallBackServlet.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.wanglixia;import net.sf.json.JSONObject;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;/** * 功能描述: * &lt;p&gt; * Created by Mr.wang on 2017/9/17 13:06. */@WebServlet("/callBack")public class CallBackServlet extends HttpServlet &#123; protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; String code = req.getParameter("code"); String url = "https://api.weixin.qq.com/sns/oauth2/access_token?" + "appid=" + AuthUtil.APPID + "&amp;secret=" + AuthUtil.APPSECRET + "&amp;code=" + code + "&amp;grant_type=authorization_code"; JSONObject jsonObject = AuthUtil.doGetJson(url); System.out.println(jsonObject.toString()); String openid = jsonObject.getString("openid"); String token = jsonObject.getString("access_token");// String expires_in = jsonObject.getString("expires_in");// String refresh_token = jsonObject.getString("refresh_token");// String scope = jsonObject.getString("scope"); String infoUrl = "https://api.weixin.qq.com/sns/userinfo?" + "access_token=" + token + "&amp;openid=" + openid + "&amp;lang=zh_CN"; JSONObject userInfo = AuthUtil.doGetJson(infoUrl); System.out.println(userInfo); //1、使用微信用户信息直接登录，无需注册和绑定// req.setAttribute("info", userInfo);// req.getRequestDispatcher("/index1.jsp").forward(req, resp); &#125;&#125; WxLogin.java12345678910111213141516171819202122232425262728package com.wanglixia;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.net.URLEncoder;/** * 功能描述: * &lt;p&gt; * Created by Mr.wang on 2017/9/17 11:17. */@WebServlet("/wxLogin")public class WxLogin extends HttpServlet &#123; protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; String backUrl = "http://这儿是你的回调地址，上图填的那个/callBack"; String url = "https://open.weixin.qq.com/connect/oauth2/authorize?" + "appid=" + AuthUtil.APPID + "&amp;redirect_uri=" + URLEncoder.encode(backUrl) + "&amp;response_type=code" + "&amp;scope=snsapi_userinfo" + "&amp;state=STATE#wechat_redirect"; resp.sendRedirect(url); &#125;&#125; index.jsp1234567891011121314151617&lt;%-- Created by IntelliJ IDEA. User: Mr.wang Date: 2017/9/17 Time: 11:02 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt; &lt;meta name="viewport" content="width=device-width,initial-scale=1.0"&gt; &lt;title&gt;$Title$&lt;/title&gt;&lt;/head&gt;&lt;body style="font-size: 40px;text-align: center;"&gt;&lt;a href="/wxLogin"&gt;微信公众授权登录&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; index1.jsp12345678910111213141516171819&lt;%-- Created by IntelliJ IDEA. User: Mr.wang Date: 2017/9/17 Time: 11:02 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt; &lt;meta name="viewport" content="width=device-width,initial-scale=1.0"&gt; &lt;title&gt;$Title$&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt;登录成功！&lt;/div&gt;&lt;div&gt;$&#123;info&#125;&lt;/div&gt;&lt;div&gt;&lt;img style="width: 100px;height: 100px;" src="$&#123;info.headimgurl&#125;"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 中间遇到的问题： 接口回调地址设置错误，这个地址需要是公网中能够访问到的地址，因此需要用花生壳来进行内网映射； 因为没有微信公众服务号，因此，找了半天，突然想起有个测试账号。 参考慕课网教程：http://www.imooc.com/learn/713]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端模板引擎Freemarker的使用（一）]]></title>
    <url>%2Ffreemarker-1.html</url>
    <content type="text"><![CDATA[介绍：FreeMarker 是一款 模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， 不是 像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。 记录Freemarker在项目中的配置与使用 准备 框架：Spring+SpringMvc+Mybatis Freemarker：官网介绍配置Maven中需要引入的依赖1234567&lt;!-- freemarker的版本号 --&gt;&lt;freemarker.version&gt;2.3.20&lt;/freemarker.version&gt;&lt;dependency&gt; &lt;groupId&gt;org.freemarker&lt;/groupId&gt; &lt;artifactId&gt;freemarker&lt;/artifactId&gt; &lt;version&gt;$&#123;freemarker.version&#125;&lt;/version&gt;&lt;/dependency&gt; 视图解析器，一般在spring-mvc.xml中配置12345678910&lt;!-- ViewResolver For FreeMarker --&gt;&lt;bean id="freemarkerResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"&gt; &lt;property name="viewClass"&gt; &lt;value&gt;org.springframework.web.servlet.view.freemarker.FreeMarkerView&lt;/value&gt; &lt;/property&gt; &lt;property name="suffix" value=".ftl"/&gt; &lt;property name="contentType" value="text/html;charset=utf-8"/&gt; &lt;property name="requestContextAttribute" value="request"/&gt; &lt;property name="order" value="0"/&gt;&lt;/bean&gt; 123456789101112131415161718192021222324&lt;!-- ViewResolver For FreeMarkerConfigurer --&gt; &lt;bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"&gt; &lt;property name="templateLoaderPaths"&gt; &lt;list&gt; &lt;value&gt;/front-end/&lt;/value&gt; &lt;value&gt;/front-end/main-frame&lt;/value&gt; &lt;value&gt;/&lt;/value&gt;&lt;!-- 配置文件路径 --&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name="freemarkerSettings"&gt;&lt;!-- 设置FreeMarker环境属性 --&gt; &lt;props&gt; &lt;prop key="template_update_delay"&gt;5&lt;/prop&gt;&lt;!--刷新模板的周期，单位为秒 --&gt; &lt;prop key="default_encoding"&gt;UTF-8&lt;/prop&gt;&lt;!--模板的编码格式 --&gt; &lt;prop key="locale"&gt;UTF-8&lt;/prop&gt;&lt;!-- 本地化设置 --&gt; &lt;prop key="datetime_format"&gt;yyyy-MM-dd HH:mm:ss&lt;/prop&gt; &lt;prop key="time_format"&gt;HH:mm:ss&lt;/prop&gt; &lt;prop key="number_format"&gt;0.####&lt;/prop&gt; &lt;prop key="boolean_format"&gt;true,false&lt;/prop&gt; &lt;prop key="whitespace_stripping"&gt;true&lt;/prop&gt; &lt;prop key="tag_syntax"&gt;auto_detect&lt;/prop&gt; &lt;prop key="url_escaping_charset"&gt;UTF-8&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt; &lt;/bean&gt; 前端.ftl文件结构 Controller.java123ModelAndView mav = new ModelAndView();mav.setViewName("/main-frame");return mav; 公用布局模板拆分使用freemarker的macro、import、include指令，我们可以将布局模板拆分为如下几个文件 /layout defaultLayout.ftl footer.ftl header.ftl sidebar.ftldefaultLayout.ftl123456789101112131415161718&lt;#macro layout&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=&quot;width: 700px; text-align:center; font-size:30px;&quot;&gt; &lt;#include &quot;header.ftl&quot;&gt; &lt;#include &quot;sidebar.ftl&quot;&gt; &lt;#-- 在这里嵌入main content --&gt; &lt;#nested&gt; &lt;#include &quot;footer.ftl&quot;&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;/#macro&gt; header.ftl1&lt;div style="background-color: #b4efb8;"&gt;header&lt;/div&gt; sidebar.ftl123&lt;div style="width:30%; height:300px; float:left; background-color: #8825ae;"&gt; sidebar&lt;/div&gt; footer.ftl1&lt;div style="background-color: #B3D3F3;"&gt;footer&lt;/div&gt; 那么在任何一个使用该布局的页面，我们只要写如下的代码，修改要嵌入到layout中的main content就好了。1234567891011121314151617181920212223&lt;#-- 引入布局指令的命名空间 --&gt;&lt;#import &quot;../layout/defaultLayout.ftl&quot; as defaultLayout&gt;&lt;#-- 调用布局指令 --&gt;&lt;@defaultLayout.layout&gt; &lt;#-- 将下面这个main content嵌入到layout指令的nested块中 --&gt; &lt;div style=&quot;width:70%; height:300px; float:left; background-color: #12c5ae;&quot;&gt; main content&lt;/div&gt;&lt;/@defaultLayout.layout&gt;&lt;#-- 引入布局指令的命名空间 --&gt;&lt;#import &quot;../layout/defaultLayout.ftl&quot; as defaultLayout&gt; &lt;#-- 调用布局指令 --&gt;&lt;@defaultLayout.layout&gt; &lt;#-- 将下面这个main content嵌入到layout指令的nested块中 --&gt; &lt;div style=&quot;width:70%; height:300px; float:left; background-color: #12c5ae;&quot;&gt; main content&lt;/div&gt; &lt;/@defaultLayout.layout&gt; 而且如果要更换布局，比如修改header，也不用每个页面都去改一遍了。这就实现了模板的可复用。问题使用模板拆分，遇到的问题：123456Caused by: java.io.FileNotFoundException: Template "../main-frame/main-frame.ftl" not found. at freemarker.template.Configuration.getTemplate(Configuration.java:742) at freemarker.core.Environment.getTemplateForInclusion(Environment.java:1694) at freemarker.core.Environment.getTemplateForImporting(Environment.java:1748) at freemarker.core.LibraryLoad.accept(LibraryLoad.java:111) ... 48 more 处理方法：模板路径不对，需要找到模板所在文件夹的上一级再往下找。 freemarker默认配置使用时，如果传到前端的值为null或者不存在，后台会报错。处理方法：12345678910111213&lt;bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"&gt; &lt;property name="templateLoaderPath" value="/template/" /&gt; &lt;property name="freemarkerSettings"&gt; &lt;!-- 设置默认的编码方式，原先是GBK，需要设置成utf-8 --&gt; &lt;props&gt; &lt;!--用于解决前端报空指针问题--&gt; &lt;prop key="classic_compatible"&gt;true&lt;/prop&gt; &lt;prop key="defaultEncoding"&gt;utf-8&lt;/prop&gt; &lt;prop key="template_exception_handler"&gt;rethrow&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt;&lt;/bean&gt; 增加了一行：1&lt;prop key="classic_compatible"&gt;true&lt;/prop&gt; 参考链接：点击查看原文问题原因：在freemarker中的空值的处理，默认情况以${xxx}的方式取值会报错，我们一般都采用${xxx?if_exists} 的方式去处理，烦死人了。经过查资料，很多人都建议使用classic_compatible=true的方式来处理，目测单词的意思应该是：“兼容传统模式”的意思。但是经过使用发现这个属性设置为true时，也有很多其他问题，比如boolean值的处理，比如include指令必须使用绝对路径，总之也会带来很多烦人的事情。最后找到源码，在Freemarker源码的Configurable类的isClassicCompatible方法上找到了详细的注释，这里翻译下，不过本人英语比较差，可能会有错误，如果有人不确定可以去看源码。 原注释大意如下： 该方法返回Freemarker模板解析引擎是否工作在“Classic Compatibile”模式下。如果这个模式被激活，则Freemarker模板解析引擎将以以下的方式工作：（类似于1.7.x这个版本的运行方式，这个也是1.7.x的版本被称为“经典的Freemarker”的由来）。（译者注：以下的1、2、3、4、5、6是译者自己加的，方便读者看） 处理未定义的表达式，也就是说”expr”为null值。 1、作为像表达式“”、“${expr}”、“ otherexpr == expr“、“otherexpr != expr”条件表达式或者是“hash[expr]”表达式的参数，这个参数将被当成空字符来对待。（译者注：这里注意空字符和null是不一样的). 2、作为“”、“”这样的表达式的参数，其循环体将不会被执行，和list的长度为0是一样的。 3、作为“”或者其他布尔表达式命令的参数，空值将被当成是false来处理。非布尔数据模型或者逻辑操作数也可以放在“”表达式中，空模型（长度为零的字符串，空的数组或者hash集合）都被当成是false来对待，其他情况下都被当成是true来处理。 4、当布尔值被当成字符串（比如用${…}输出，或者是和其他字符串连接），true值将被转换成“true”字符串处理，false值将被转换成空字符串。 5、提供给和的标量数据模型参数将被当成只包含一个该模型的list来处理。（译者注：就是说，传给和的参数不是list或者数组类型的，而是单个元素，则会被当成只有一个元素的list或者数组） 6、“”标签的路径参数将被作为绝对路径处理。（译者注：这里很多网上的文档都没有提过，是本人经过观察发现的，然后从源码和其注释中找到的。在这种情况下，如果传入的ftl路径是相对路径，则会报找不到文件的异常）。 在其他方面，甚至是在兼容模式下，这个Freemaker解析引擎是2.1引擎，你不会因此而丢掉其他新的功能。 以上就是译文， 那么如果我们设置了全局的classic_compatible属性，而在某个页面上又不想遵守这个属性该怎么办呢？这样就可以在当前这个页面上采用以下的办法，让当前的页面不再支持传统模式：&lt;#setting classic_compatible=false&gt;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>Freemarker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery学习笔记（三）DOM篇]]></title>
    <url>%2FjQuery-usage-2.html</url>
    <content type="text"><![CDATA[本文内容有： DOM内部插入append()与appendTo() DOM内部插入prepend()与prependTo() DOM外部插入after()与before() DOM外部插入insertAfter()与insertBefore() DOM节点删除之empty()的基本用法 DOM节点删除之empty和remove区别 DOM节点删除之保留数据的删除操作detach() DOM节点删除之detach()和remove()区别 （一）DOM内部插入append()与appendTo() 创建节点及节点属性 创建元素：document.createElement 设置属性：setAttribute 添加文本：innerHTML 加入文档：appendChild 几个问题： 每一个元素节点都必须单独创建 节点是属性需要单独设置，而且设置的接口不是很统一 添加到指定的元素位置不灵活最后还有一个最重要的：浏览器兼容问题处理 jQuery节点创建与属性的处理 把这个节点的结构给通过HTML标记字符串描述出来，通过$()函数处理，$(“html结构”)；eg： 12var div = $("&lt;div class='right'&gt;&lt;div class='aaron'&gt;动态创建DIV元素节点&lt;/div&gt;&lt;/div&gt;") $body.append(div) 选择器 描述 append(content) 向每个匹配的元素内部追加内容 $(A).appentTo(B) 把所有匹配的元素追加到指定的元素集合中，把A追加到B中 （二）DOM内部插入prepend()与prependTo() 选择器 描述 prepend 向每个匹配的元素内部前置内容 prependTo 把所有匹配的元素前置到指定的元素集合中，把A追加到B中 方法详解： .prepend()方法将指定元素插入到匹配元素里面作为它的第一个子元素 (如果要作为最后一个子元素插入用.append()). .prepend()和.prependTo()实现同样的功能，主要的不同是语法，插入的内容和目标的位置不同 对于.prepend() 而言，选择器表达式写在方法的前面，作为待插入内容的容器，将要被插入的内容作为方法的参数 而.prependTo() 正好相反，将要被插入的内容写在方法的前面，可以是选择器表达式或动态创建的标记，待插入内容的容器作为参数。 这里总结下内部操作四个方法的区别： append()向每个匹配的元素内部追加内容 prepend()向每个匹配的元素内部前置内容 appendTo()把所有匹配的元素追加到另一个指定元素的集合中 prependTo()把所有匹配的元素前置到另一个指定的元素集合中 1234567//找到class="aaron1"的div节点//然后通过prepend在内部的首位置添加一个新的p节点 $('.aaron1').prepend('&lt;p&gt;prepend增加的p元素&lt;/p&gt;')//找到class="aaron2"的div节点//然后通过prependTo内部的首位置添加一个新的p节点$('&lt;p&gt;prependTo增加的p元素&lt;/p&gt;').prependTo($('.aaron2')) （三）DOM外部插入after()与before() |:—|:—||.after(content)|在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点||.before(content)|在匹配元素的前面插入内容| before与after都是用来对相对选中元素外部增加相邻的兄弟节点 2个方法都是都可以接收HTML字符串，DOM 元素，元素数组，或者jQuery对象，用来插入到集合中每个匹配元素的前面或者后面 2个方法都支持多个参数传递after(div1,div2,….) 可以参考右边案例代码 注意点： after向元素的后边添加html代码，如果元素后面有元素了，那将后面的元素后移，然后将html代码插入 before向元素的前边添加html代码，如果元素前面有元素了，那将前面的元素前移，然后将html代码插入 （四）DOM外部插入insertAfter()与insertBefore() |:—|:—||.insertBefore(content)|在匹配元素前面插入集合中每个匹配的元素||.insertAfter(content)|在匹配元素后面插入集合中每个匹配的元素| 1234567//在test1元素前后插入集合中每个匹配的元素//不支持多参数$('&lt;p style="color:red"&gt;测试insertBefore方法增加&lt;/p&gt;', '&lt;p style="color:red"&gt;多参数&lt;/p&gt;').insertBefore($(".test1")) //在test2元素前后插入集合中每个匹配的元素//不支持多参数$('&lt;p style="color:red"&gt;测试insertAfter方法增加&lt;/p&gt;', '&lt;p style="color:red"&gt;多参数&lt;/p&gt;').insertAfter($(".test2")) （五）DOM节点删除之empty()的基本用法 这个方法不仅移除子元素（和其他后代元素），同样移除元素里的文本。因为，根据说明，元素里任何文本字符串都被看做是该元素的子节点。 过remove方法移除div及其内部所有元素，remove内部会自动操作事件销毁方法 1234//通过remove处理$('.hello').remove()//结果：&lt;div class="hello"&gt;&lt;p&gt;慕课网&lt;/p&gt;&lt;/div&gt; 全部被移除//节点不存在了,同事事件也会被销毁 remove表达式参数：remove比empty好用的地方就是可以传递一个选择器表达式用来过滤将被移除的匹配元素集合，可以选择性的删除指定的节点我们可以通过$()选择一组相同的元素，然后通过remove（）传递筛选的规则处理 1234567$("p").filter(":contains('3')").remove()$("button:last").on('click', function() &#123; //找到所有p元素中，包含了3的元素 //这个也是一个过滤器的处理 $("p").remove(":contains('3')")&#125;) （六）DOM节点删除之empty和remove区别 要用到移除指定元素的时候，jQuery提供了empty()与remove([expr])二个方法，两个都是删除元素，但是两者还是有区别empty方法 严格地讲，empty()方法并不是删除节点，而是清空节点，它能清空元素中的所有后代节点 empty不能删除自己本身这个节点 remove方法 该节点与该节点所包含的所有后代节点将同时被删除 提供传递一个筛选的表达式，删除指定合集中的元素 （七）DOM节点删除之保留数据的删除操作detach() 如果我们希望临时删除页面上的节点，但是又不希望节点上的数据与事件丢失，并且能在下一个时间段让这个删除的节点显示到页面，这时候就可以使用detach方法来处理detach从字面上就很容易理解。让一个web元素托管。即从当前页面中移除该元素，但保留这个元素的内存模型对象。来看看jquery官方文档的解释：这个方法不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。与remove()不同的是，所有绑定的事件、附加的数据等都会保留下来。$(“div”).detach()这一句会移除对象，仅仅是显示效果没有了。但是内存中还是存在的。当你append之后，又重新回到了文档流中。就又显示出来了。当然这里要特别注意，detach方法是JQuery特有的，所以它只能处理通过JQuery的方法绑定的事件或者数据 12345if (!$("p").length) return; //去重//通过detach方法删除元素//只是页面不可见，但是这个节点还是保存在内存中//数据与事件都不会丢失p = $("p").detach() （八）DOM节点删除之detach()和remove()区别 remove()和detach()可能就是其中的一个，可能remove()我们用得比较多，而detach()就可能会很少了 通过一张对比表来解释2个方法之间的不同|方法名|参数|事件及数据是否也被移除|元素自身是否被移除||:—|:—|:—|:—||remove|支持选择器表达|是|是（无参数时），有参数时要根据参数所涉及的范围||detach|参数同remove|否|情况同remove| remove：移除节点 无参数，移除自身整个节点以及该节点的内部的所有节点，包括节点上事件与数据 有参数，移除筛选出的节点以及该节点的内部的所有节点，包括节点上事件与数据 detach：移除节点 移除的处理与remove一致 与remove()不同的是，所有绑定的事件、附加的数据等都会保留下来 例如：$(“p”).detach()这一句会移除对象，仅仅是显示效果没有了。但是内存中还是存在的。当你append之后，又重新回到了文档流中。就又显示出来了。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>前端</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery学习笔记（二）样式篇]]></title>
    <url>%2FjQuery-usage-1.html</url>
    <content type="text"><![CDATA[本文内容有： jQuery的属性与样式之html()及.text() jQuery的属性与样式之增加样式.addClass() jQuery的属性与样式之删除样式.removeClass() jQuery的属性与样式之切换样式.toggleClass() jQuery的属性与样式之样式操作.css() .css()与.addClass()设置样式的区别 jQuery的属性与样式之.val() jQuery的属性与样式之元素的数据存储 （一）jQuery的属性与样式之html()及.text() .html()方法：&emsp;&emsp;获取集合中第一个匹配元素的HTML内容 或 设置每一个匹配元素的html内容，具体有3种用法： .html() 不传入值，就是获取集合中第一个匹配元素的HTML内容 .html(htmlString) 设置每一个匹配元素的html内容 .html(function(index, oldhtml)) 用来返回设置HTML内容的一个函数 注意事项：.html()方法内部使用的是DOM的innerHTML属性来处理的，所以在设置与获取上需要注意这个操作是针对整个HTML内容（不仅仅只是文本内容） .text()方法得到匹配元素集合中每个元素的文本内容结合，包括他们的后代，或设置匹配元素集合中每个元素的文本内容为指定的文本内容。，具体有3种用法： .text() 得到匹配元素集合中每个元素的合并文本，包括他们的后代 .text(textString) 用于设置匹配元素内容的文本 .text(function(index, text)) 用来返回设置文本内容的一个函数 注意事项：.text()结果返回一个字符串，包含所有匹配元素的合并文本 .html与.text的异同: .html与.text的方法操作是一样，只是在具体针对处理对象不同 .html处理的是元素内容，.text处理的是文本内容 .html只能使用在HTML文档中，.text 在XML 和 HTML 文档中都能使用 如果处理的对象只有一个子文本节点，那么html处理的结果与text是一样的 火狐不支持innerText属性，用了类似的textContent属性，.text()方法综合了2个属性的支持，所以可以兼容所有浏览器 （二）jQuery的属性与样式之增加样式.addClass() &emsp;&emsp;在HTML结构中里，多个class以空格分隔，当一个节点（或称为一个标签）含有多个class时，DOM元素响应的className属性获取的不是class名称的数组，而是一个含有空格的字符串，这就使得多class操作变得很麻烦。 .addClass(className)方法 .addClass(className) : 为每个匹配元素所要增加的一个或多个样式名 .addClass(function(index, currentClass)): 这个函数返回一个或更多用空格隔开的要增加的样式名 注意事项： .addClass()方法不会替换一个样式类名。它只是简单的添加一个样式类名到元素上 （三）jQuery的属性与样式之删除样式.removeClass()jQuery的属性与样式之删除样式.removeClass()jQuery通过.addClass()方法可以很便捷的增加样式。如果需要样式之间的切换，同样jQuery提供了一个很方便的.removeClass()，它的作用是从匹配的元素中删除全部或者指定的class.removeClass( )方法1. .removeClass( [className ] )：每个匹配元素移除的一个或多个用空格隔开的样式名2. .removeClass( function(index, class) ) ： 一个函数，返回一个或多个将要被移除的样式名注意事项如果一个样式类名作为一个参数,只有这样式类会被从匹配的元素集合中删除 。 如果没有样式名作为参数，那么所有的样式类将被移除 （四）jQuery的属性与样式之切换样式.toggleClass() &emsp;&emsp;jQuery提供一个toggleClass方法用于简化互斥的逻辑，通过toggleClass方法动态添加删除Class，一次执行相当于addClass，再次执行相当于removeClass。 &emsp;&emsp;.toggleClass()方法：在匹配的元素集合中的每个元素上添加或删除一个或多个样式类,如果存在（不存在）就删除（添加）一个类。 .toggleClass(className)：在匹配的元素集合中的每个元素上用来切换的一个或多个（用空格隔开）样式类名 .toggleClass(className, switch)：一个布尔值，用于判断样式是否应该被添加或移除 .toggleClass([switch])：一个用来判断样式类添加还是移除的 布尔值 .toggleClass(function(index, class, switch) [,switch])：用来返回在匹配的元素集合中的每个元素上用来切换的样式类名的一个函数。接收元素的索引位置和元素旧的样式类作为参数 注意事项： toggleClass是一个互斥的逻辑，也就是通过判断对应的元素上是否存在指定的Class名，如果有就删除，如果没有就增加； toggleClass会保留原有的Class名后新增，通过空格隔开。 （五）jQuery的属性与样式之样式操作.css() .css() 方法：获取元素样式属性的计算值或者设置元素的CSS属性获取： .css( propertyName ) ：获取匹配元素集合中的第一个元素的样式属性的计算值 .css( propertyNames )：传递一组数组，返回一个对象结果设置： .css(propertyName, value )：设置CSS .css( propertyName, function )：可以传入一个回调函数，返回取到对应的值进行处理 .css( properties )：可以传一个对象，同时设置多个样式注意事项： 浏览器属性获取方式不同，在获取某些值的时候都jQuery采用统一的处理，比如颜色采用RBG，尺寸采用px .css()方法支持驼峰写法与大小写混搭的写法，内部做了容错的处理当一个数只被作为值（value）的时候， jQuery会将其转换为一个字符串，并添在字符串的结尾处添加px，例如 .css(“width”,50}) 与 .css(“width”,”50px”})一样 （六）.css()与.addClass()设置样式的区别 &emsp;&emsp;对于样式的设置，我们学了addClass与css方法，那么两者之间有什么区别？ 可维护性： &emsp;&emsp;.addClass()的本质是通过定义个class类的样式规则，给元素添加一个或多个类。css方法是通过JavaScript大量代码进行改变元素的样式。 &emsp;&emsp;通过.addClass()我们可以批量的给相同的元素设置统一规则，变动起来比较方便，可以统一修改删除。如果通过.css()方法就需要指定每一个元素是一一的修改，日后维护也要一一的修改，比较麻烦 灵活性： &emsp;&emsp;通过.css()方式可以很容易动态的去改变一个样式的属性，不需要在去繁琐的定义个class类的规则。一般来说在不确定开始布局规则，通过动态生成的HTML代码结构中，都是通过.css()方法处理的 样式值： &emsp;&emsp;.addClass()本质只是针对class的类的增加删除，不能获取到指定样式的属性的值，.css()可以获取到指定的样式值。 样式的优先级： css的样式是有优先级的，当外部样式、内部样式和内联样式同一样式规则同时应用于同一个元素的时候，优先级如下外部样式 &lt; 内部样式 &lt; 内联样式 .addClass()方法是通过增加class名的方式，那么这个样式是在外部文件或者内部样式中先定义好的，等到需要的时候在附加到元素上； 通过.css()方法处理的是内联样式，直接通过元素的style属性附加到元素上的通过.css方法设置的样式属性优先级要高于.addClass方法。 总结： &emsp;&emsp;.addClass与.css方法各有利弊，一般是静态的结构，都确定了布局的规则，可以用addClass的方法，增加统一的类规则 &emsp;&emsp;如果是动态的HTML结构，在不确定规则，或者经常变化的情况下，一般多考虑.css()方式 （七）jQuery的属性与样式之.val() jQuery中有一个.val()方法主要是用于处理表单元素的值，比如 input, select 和 textarea。 .val()方法 .val()无参数，获取匹配的元素集合中第一个元素的当前值 .val( value )，设置匹配的元素集合中每个元素的值 .val( function ) ，一个用来返回设置值的函数 注意事项： 通过.val()处理select元素， 当没有选择项被选中，它返回null .val()方法多用来设置表单的字段的值 如果select元素有multiple（多选）属性，并且至少一个选择项被选中， .val()方法返回一个数组，这个数组包含每个选中选择项的值 .html(),.text()和.val()的差异总结： .html(),.text(),.val()三种方法都是用来读取选定元素的内容；只不过.html()是用来读取元素的html内容（包括html标签），.text()用来读取元素的纯文本内容，包括其后代元素，.val()是用来读取表单元素的”value”值。其中.html()和.text()方法不能使用在表单元素上,而.val()只能使用在表单元素上；另外.html()方法使用在多个元素上时，只读取第一个元素；.val()方法和.html()相同，如果其应用在多个元素上时，只能读取第一个表单元素的”value”值，但是.text()和他们不一样，如果.text()应用在多个元素上时，将会读取所有选中元素的文本内容。 .html(htmlString),.text(textString)和.val(value)三种方法都是用来替换选中元素的内容，如果三个方法同时运用在多个元素上时，那么将会替换所有选中元素的内容。 .html(),.text(),.val()都可以使用回调函数的返回值来动态的改变多个元素的内容。 （八）jQuery的属性与样式之元素的数据存储 jQuery提供的存储接口 jQuery.data( element, key, value ) //静态接口,存数据 jQuery.data( element, key ) //静态接口,取数据 .data( key, value ) //实例接口,存数据 .data( key ) //实例接口,存数据 &emsp;&emsp;2个方法在使用上存取都是通一个接口，传递元素，键值数据。在jQuery的官方文档中，建议用.data()方法来代替。 &emsp;&emsp;把DOM可以看作一个对象，那么我们往对象上是可以存在基本类型，引用类型的数据的，但是这里会引发一个问题，可能会存在循环引用的内存泄漏风险 &emsp;&emsp;通过jQuery提供的数据接口，就很好的处理了这个问题了，我们不需要关心它底层是如何实现，只需要按照对应的data方法使用就行了。&emsp;&emsp;同样的也提供2个对应的删除接口，使用上与data方法其实是一致的，只不过是一个是增加一个是删除罢了jQuery.removeData(element [, name]).removeData([name]) 结尾本文属于学习过程中整理自慕课网jQuery基础： 课程链接：https://www.imooc.com/learn/418； 作者：Aaron艾伦https://www.imooc.com/u/290139/courses?sort=publish 谢谢]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>前端</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery学习笔记（一）样式篇]]></title>
    <url>%2FjQuery-usage.html</url>
    <content type="text"><![CDATA[前言jQuery是一个JavaScript代码库（或者JavaScript框架）。jQuery的宗旨是“Write Less，Do more”（写更少的代码，做更多的事情）。jQuery的核心特性可以总结为：具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。jQuery兼容各种主流浏览器，如IE 6.0+、FF 1.5+、Safari 2.0+、Opera 9.0+等。 jQuery学习之样式篇选择器 选择器 描述 $(“parent &gt; child”) 子选择器：选择所有指定的“parent”元素中指定的“child”的直接子元素，相邻上下级关系 $(“ancestor descendant”) 后代选择器：选择给定的祖先元素的所有后代元素，包含这个元素的直接子元素或者、孙子、曾孙等 $(“prev + next”) 相邻兄弟选择器：选择紧跟在“prev”元素后的“next”元素 $(“prev ~ siblings”) 一般兄弟选择器：匹配“prev”元素之后的所有兄弟元素。一般兄弟指具有相同的父元素，并匹配过滤“siblings”选择器 $(“:first”) 匹配第一个元素，如$(“input:first”)找到的是第一个input $(“:last”) 匹配最后一个元素 $(“:not(selector)”) 选择所有不是给定选择器的元素 $(“:eq(index)”) 选择索引值为index的元素 $(“:gt(index)”) 选择所有索引值大于index的元素 $(“:lt(index)”) 选择所有索引值小于index的元素 $(“:even”) 索引值为偶数的元素，从零开始 $(“:odd”) 索引值为奇数的元素，从零开始 $(“:header”) 选择所有标题元素，如h1，h2等 $(“:lang(language)”) 选择指定语言的元素 $(“:root”) 选择该文档的根元素 $(“:animated”) 所有正在执行动画效果的元素 $(“:contains(text)”) 所有包含指定文本的元素，如果匹配的文本包含在其子元素中，同样匹配 $(“:has(selector)”) 所有元素中至少包含指定选择器的元素 $(“:parent”) 所有包含子元素或者文本的元素 $(“:empty”) 所有没有子元素的元素 选择器 描述 $(“:visible”) 选择所有显示的元素 $(“:hidden”) 选择所有隐藏的元素 属性选择器 $(“input[name~-‘objname’]”)$(“[attribute|-‘value’]”)选择指定属性值等于给定字符串或以该文字串为前缀（该字符串后跟一个连字符”-“）的元素 选择器 描述 $(“[attribute*=’value’]”) 选择指定属性包含给定的子字符串的元素 $(“[attribute~-‘value’]”) 选择指定属性用空格分割的值中包含一个给定值的元素 $(“[attribute=’value’]”) 选择指定属性是给定值的元素 $(“[attribute!=’value’]”) 选择指定属性不等于给定值的元素 $(“[attribute^=’value’]”) 选择指定属性是以给定字符串开始的元素 $(“[attribute$-‘value’]”) 选择指定属性是以给定字符串结尾的元素 $(“[attribute]”) 选择所有具有指定属性的元素 $(“[attributeFilter1][attributeFilterN]”) 选择匹配所有指定的属性筛选器的元素 表单元素选择器 选择器 描述 $(“:input”) 选择所有input，textarea，select和button元素 $(“:text”) 所有文本框 $(“:password”) 所有密码框 $(“:radio”) 所有单选按钮 $(“:checkbox”) 所有复选框 $(“:submit”) 所有提交按钮 $(“:image”) 所有图像域 $(“:reset”) 所有重置按钮 $(“:button”) 所有按钮 $(“:file”) 所有文件域 表单对象属性筛选选择器 选择器 描述 $(“:enabled”) 匹配可用的表单元素 $(“:disabled”) 匹配不可用的表单元素 $(“:checked”) 匹配被选中的123456789101112131415|$(&quot;:selected&quot;)|匹配被选中的```&lt;option&gt;```元素|### jQuery选择器之特殊选择器thisthis和$(this) 的区别？答：this 是JavaScript中的关键字，指的是当前的上下文对象，简单的说就是方法/属性的拥有者；eg:```jsvar ilucifer = &#123;name:&quot;寒江&quot;,getName:funcion()&#123; //this,就是imooc对象 return this.name; &#125;&#125;ilucifer .getName();//寒江 在JavaScript中this是动态的，即这个上下文对象都是可以被动态改变的(可以通过call,apply等方法)同样的在DOM中this就是指向了这个html元素对象，因为this就是DOM元素本身的一个引用通过把$()方法传入当前的元素对象的引用this，把这个this加工成jQuery对象。 结尾本文整理自慕课网jQuery基础 (一)—样式篇，课程链接：https://www.imooc.com/learn/418；作者：Aaron艾伦https://www.imooc.com/u/290139/courses?sort=publish谢谢]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>前端</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用SoapUI 5.3.0调试webservice接口（参数格式XML）]]></title>
    <url>%2FsoapUI-webservice.html</url>
    <content type="text"><![CDATA[最近项目中经常要调试webservice接口，从朋友处了解到他们调试webservice接口时使用SoapUI，觉得十分好用，个人也对此十分感兴趣，因此简要记录一下这个工具的使用。 准备 下载SoapUI，我使用的是5.3.0 下载SoapUI传送门 WebService 服务接口进入正题新建调试项目输入项目名称及要调试的接口有效地址，输入完毕点击OKsoapUI会自动获取所有已开放接口，在想要调试的接口方法上面选中右击，选择new request,输入名称后如下图会自动生成如下格式代码；其中 web:in0中填写入参注意：xml格式的入参最好使用 &lt;[CDATA[]]&gt; 包起来。点击左上角的绿色三角就可以调试接口了。新建测试套件 New TestSuite在项目名称上右击，选择 New TestSuite,输入名称保存在自己新建的TestSuite名称上右击，选择 New TestCase,输入名称保存在Test Steps上右击 选择 Add Step –&gt;SOAP Request,输入名称并选择接口，名称最好容易识别一点接下来就可以加入入参进行调试。一次简单的工具使用，记录下来，希望可以帮助到你，祝你好运。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>接口</tag>
        <tag>SoapUI</tag>
        <tag>Webservice</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql导出导入数据库]]></title>
    <url>%2Fmysql-export-database.html</url>
    <content type="text"><![CDATA[要在两台不同的电脑上进行开发，数据库需要统一，由于自己第一次完整的设计表结构，因此多次更改表结构，造成了很多不必要的麻烦，需要将数据库导出成sql脚本。 命令行下具体用法如下： mysqldump -用户名 -p密码 -d 数据库名 表名 脚本名;导出数据库名为ssm_web的表结构（其中用户名为root,密码为root,生成的脚本名为db.sql）1mysqldump -u root -proot -d ssm_web&gt;db.sql; 导出数据库名为ssm_web某张表(test)结构1mysqldump -u root -proot -d ssm_web test&gt;test.sql; 导出数据库名为ssm_web所有表结构及表数据（不加-d）1mysqldump -u root -proot ssm_web&gt;e:\lucifer\ssm_web.sql 导出数据库名为ssm_web某张表(test)结构及表数据（不加-d）1mysqldump -u root -proot ssm_web test&gt;test.sql; 导入脚本####1234567MySQL&gt; select now();+---------------------+| now() |+---------------------+| 2013-09-18 13:55:45 |+---------------------+1 row in set (0.00 sec) 执行编写好的sql脚本1234567mysql&gt; source H:/1.sql+---------------------+| now() |+---------------------+| 2013-09-18 13:54:04 |+---------------------+1 row in set (0.00 sec) select …into outfile 方式执行sql12345678910mysql&gt; select now() into outfile 'h:/data/2.sql';Query OK, 1 row affected (0.00 sec)4.使用mysql命令执行H:&gt;mysql -uaHmin -p -e "select now()"Enter passworH: ****+---------------------+| now() |+---------------------+| 2013-09-18 13:57:09 |+---------------------+ mysql命令执行sql，并将查询结果保存到文本中 执行简单sql，如果sql很长，这种方式就不是很适合了。 1mysql -uaHmin -proot test -e "select now()" -N &gt;H:/work/target1.txt 执行复杂sql，可以将复杂的sql事先编辑好，存放到文本中在执行。 1H:&gt; mysql -uroot -pmypwH -h127.0.0.1 -p3306 test &lt; H:/work/source.sql &gt; H:/work/target.txt 将最后一种执行方式加上操作系统的定时任务，就可以在mysql中实现定时执行sql，并保存执行结果的目的了。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript操作数组array]]></title>
    <url>%2Fjavascript-array.html</url>
    <content type="text"><![CDATA[shift：删除原数组第一项，并返回删除元素的值，原数组为空则返回undefined。 unshift:将参数添加到原数组开头，并返回数组的长度。 pop:删除原数组最后一项，并返回删除元素的值，原数组为空则返回undefined。 push:将参数添加到原数组末尾，并返回数组的长度。 shift：删除原数组第一项，并返回删除元素的值，原数组为空则返回undefined。unshift:将参数添加到原数组开头，并返回数组的长度。pop:删除原数组最后一项，并返回删除元素的值，原数组为空则返回undefined。push:将参数添加到原数组末尾，并返回数组的长度。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[防止js全局变量污染方法总结]]></title>
    <url>%2F%E9%98%B2%E6%AD%A2js%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E6%B1%A1%E6%9F%93%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[转载自防止js全局变量污染方法总结-待续javaScript 可以随意定义保存所有应用资源的全局变量。但全局变量可以削弱程序灵活性，增大了模块之间的耦合性。在多人协作时，如果定义过多的全局变量 有可能造成全局变量冲突，也就是全局变量污染问题,以下是两种解决办法 定义全局变量命名空间只创建一个全局变量，并定义该变量为当前应用容器，把其他全局变量追加在该命名空间下123456789var MY=&#123;&#125;; my.name=&#123; big_name:"zhangsan", small_name:"lisi"&#125;;my.work=&#123; school_work:"study", family_work:"we are"&#125;; 利用匿名函数将脚本包裹起来12345678(function()&#123; var exp=&#123;&#125;; var name="aa"; exp.method=function()&#123; return name;&#125;; window.ex=exp;&#125;)();]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SqlServer2008R2-问题汇总]]></title>
    <url>%2Fsqlserver2008r2.html</url>
    <content type="text"><![CDATA[新安装数据库sqlserver2008r2,使用客户端登录不上问题处理 1. 新安装数据库sqlserver2008r2,使用客户端登录不上问题处理问题处理：鼠标右键【计算机】–&gt;【管理】，打开界面如下：选择自己数据库的实例名：选择TCP/IP：右键【属性】，将所有TCP动态端口的【0】删掉，TCP端口设为1433；重启服务，即可连接。]]></content>
      <categories>
        <category>错误</category>
      </categories>
      <tags>
        <tag>SqlServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript常用功能]]></title>
    <url>%2Fjavascript-utils.html</url>
    <content type="text"><![CDATA[使用JS获取request参数 document.write(‘&lt;%=request.getAttribute(“param”)%&gt;’); window.navigator.userAgent 记录浏览器信息以及操作系统信息。 var searchParam = location.search.配合使用string的相关方法即可得到。 js获取上下文路径：123456getContextPath: function () &#123; var pathName = document.location.pathname; var index = pathName.substr(1).indexOf("/"); var result = pathName.substr(0, index + 1); return result; &#125; js获取项目路径：123456789101112function getRootPath()&#123; //获取当前网址，如： http://localhost:8083/uimcardprj/share/meun.jsp var curWwwPath=window.document.location.href; //获取主机地址之后的目录，如： uimcardprj/share/meun.jsp var pathName=window.document.location.pathname; var pos=curWwwPath.indexOf(pathName); //获取主机地址，如： http://localhost:8083 var localhostPaht=curWwwPath.substring(0,pos); //获取带"/"的项目名，如：/uimcardprj var projectName=pathName.substring(0,pathName.substr(1).indexOf('/')+1); return(localhostPaht+projectName); &#125;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用apache的poi组件上传并解析excel]]></title>
    <url>%2Fexcel-upload-parse.html</url>
    <content type="text"><![CDATA[通过apache的poi组件解析excel，以便将数据存储到数据库中。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public List&lt;String[]&gt; paseUserStoryFile(MultipartFile file) &#123; List&lt;String[]&gt; list = new ArrayList&lt;String[]&gt;(); try &#123; POIFSFileSystem pois = new POIFSFileSystem(file.getInputStream()); //新建WorkBook HSSFWorkbook wb = new HSSFWorkbook(pois); //获取Sheet（工作薄）总个数 int sheetNumber = wb.getNumberOfSheets(); for (int i = 0; i &lt; sheetNumber; i++) &#123; //获取Sheet（工作薄） HSSFSheet sheet = wb.getSheetAt(i); //开始行数 int firstRow = sheet.getFirstRowNum(); //结束行数 int lastRow = sheet.getLastRowNum(); //判断该Sheet（工作薄)是否为空 boolean isEmpty = false; if (firstRow == lastRow) &#123; isEmpty = true; &#125; if (!isEmpty) &#123; for (int j = firstRow + 1; j &lt;= lastRow; j++) &#123; //获取一行 HSSFRow row = sheet.getRow(j); //开始列数 int firstCell = row.getFirstCellNum(); //结束列数 int lastCell = row.getLastCellNum(); //判断该行是否为空 String[] value = new String[lastCell]; if (firstCell != lastCell) &#123; for (int k = firstCell; k &lt; lastCell; k++) &#123; //获取一个单元格 HSSFCell cell = row.getCell(k); Object str = null; //获取单元格，值的类型 int cellType = cell.getCellType(); if (cellType == 0) &#123; str = cell.getNumericCellValue(); &#125; else if (cellType == 1) &#123; str = cell.getStringCellValue(); &#125; else if (cellType == 2) &#123; &#125; else if (cellType == 4) &#123; str = cell.getBooleanCellValue(); &#125; value[k] = (String) str; &#125; &#125; //每一行循环完对应的就是一个用户故事的所有属性全部拿到 list.add(value); &#125; &#125; &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; return list; &#125;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>java</tag>
        <tag>excel</tag>
        <tag>poi</tag>
      </tags>
  </entry>
</search>
