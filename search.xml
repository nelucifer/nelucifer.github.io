<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo相关-目录]]></title>
    <url>%2FHexo.html</url>
    <content type="text"><![CDATA[Hexo相关-目录前言&emsp;&emsp;作为一个码农来说，笔记是必不可少的，一是为了记录，二是为了分享。特意将使用hexo+github/coding免费搭建个人博客的过程也记录了一下，网上类似的文章太多了，有些配置的版本不一样，本文记录hexo环境的搭建及部署到coding/github上. 文章目录 Hexo-搭建个人博客1 Hexo-搭建个人博客2 Hexo-搭建个人博客3 Hexo-搭建个人博客-报错集锦]]></content>
  </entry>
  <entry>
    <title><![CDATA[前端技术-目录]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF.html</url>
    <content type="text"><![CDATA[前端技术-目录前言相关技术：Bootstrap、JavaScript、JQuery 文章目录Bootstrap 好用的前端响应式框架Bootstrap bootstrap-table使用 JavaScript JavaScript-防止js全局变量污染方法总结 JavaScript-操作数组array JavaScript-常用功能 JQuery JQuery-学习笔记0-样式篇 JQuery-学习笔记1-样式篇 JQuery-学习笔记2-DOM篇 JQuery-学习笔记3-DOM篇]]></content>
  </entry>
  <entry>
    <title><![CDATA[工具使用-目录]]></title>
    <url>%2F%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8.html</url>
    <content type="text"><![CDATA[工具使用-目录前言本文记录开发过程中常用工具的使用及插件配置等。 文章目录 工具使用-Git-基本使用 工具使用-GitBook-使用 工具使用-Idea-常用插件 工具使用-Vmware-问题1]]></content>
  </entry>
  <entry>
    <title><![CDATA[后端技术-目录]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF.html</url>
    <content type="text"><![CDATA[后端技术-目录前言相关技术：Excel解析、Linux服务器、Windows Server、接口调试工具SoapUI、数据库MySQL、SQLServer、NoSQL、Oracle、PowerDesigner、Java相关知识、Python、定时器Quartz、安全框架Shiro、SSM框架等内容，请看下文文章目录。 文章目录常用工具 Excel解析-POI解析实例 服务器 Linux使用1 WindowsServer2012使用记录 接口相关 SoapUI-调试webservice接口 使用SoapUI调试webservice接口 数据库MySQL Mysql导出导入数据库 Mysql数据库常用方式 NoSQL windows下安装MongoDB Redis系列-0-Windows下安装Redis服务 Oracle Oracle中的常用函数 SQLServer SqlServer2008R2-问题汇总 数据库工具 PowerDesigner导出PDM和rtf文件 Java系列 Java系列-目录 Java系列-Java基础知识 Java系列-Java并发编程 Java系列-数据结构 Java系列-jdk1.8-Lambda表达式与Collections Java系列-Spring学习笔记1-Ioc与AOP Java系列-Spring学习笔记2-Spring核心组件 Python Python环境变量及Pycharm配置 定时器Quartz Quartz-学习笔记-相关概念 Quartz-学习笔记1-小试牛刀 Quartz-学习笔记2-界面配置 安全框架Shiro Shiro系列-学习笔记0-目录 Shiro系列-学习笔记1-基本概念 SSM框架-整合笔记 SSM框架-整合笔记-目录 SSM框架-整合笔记0-详细注释 SSM框架-整合笔记1-Druid和Webservice配置 SSM框架-整合笔记2-视图解析器配置 SSM框架-整合笔记3-使用注解配置切面 SSM框架-整合笔记4-统一异常处理 SSM框架-整合笔记5-缓存配置Ehcache SSM框架-整合笔记6-配置MybatisGenerator SSM框架-整合笔记7-配置Swagger SSM框架-整合笔记8-Shiro介绍 SSM框架-整合笔记9-注解方式配置Quartz定时器]]></content>
  </entry>
  <entry>
    <title><![CDATA[读书笔记-目录]]></title>
    <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[读书笔记-目录文章目录 读书笔记-陀氏-穷人的美德]]></content>
  </entry>
  <entry>
    <title><![CDATA[SSM框架-整合笔记-目录]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[SSM框架-整合笔记-目录文章目录 SSM框架-整合笔记0-详细注释 SSM框架-整合笔记1-Druid和Webservice配置 SSM框架-整合笔记2-视图解析器配置 SSM框架-整合笔记3-使用注解配置切面 SSM框架-整合笔记4-统一异常处理 SSM框架-整合笔记5-缓存配置Ehcache SSM框架-整合笔记6-配置Mybatis Generator SSM框架-整合笔记7-配置Swagger SSM框架-整合笔记8-Shiro介绍 SSM框架-整合笔记9-注解方式配置Quartz定时器]]></content>
  </entry>
  <entry>
    <title><![CDATA[RBAC权限管理系统设计]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E6%A1%86%E6%9E%B6%2FRBAC%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html</url>
    <content type="text"><![CDATA[RBAC是什么RBAC：（Role-Based-Access Control-基于角色的权限访问控制）。在RBAC中，角色和权限关联，不同的角色一般拥有不同的权限，用户拥有一个或者多个角色，在控制一类用户的权限时，需要授权或者回收某一角色的权限，将用户-角色-权限联系起来，关系表示如下： ![RBAC-2019918213812](http://img.wanglixia.top/RBAC-2019918213812.jpg) RBAC模型及分类RBAC模型又可以分为RBAC0、RBAC1、RBAC2、RBAC3，RBAC0是基础，而RBAC1、RBAC2、RBAC3都是基于RBAC0的升级。 1. RBAC0模型RBAC0模型主要由用户、角色、权限组成。 用户和角色的关系是多对一，每一个用户只能有一种角色； 用户和角色的关系是多对多，一个用户可以有多种角色； 2. RBAC1模型RBAC1模型基于RBAC0，引入了子角色的概念，子角色可以继承父角色的所有权限。 3. RBAC2模型RBAC2模型基于RBAC0，对角色增加了一些限制：角色互斥、基数约束、先决条件角色、运行时互斥； 角色互斥：同一用户不能分配到一组互斥角色集合中的多个角色，互斥角色是指权限互相制约的两个角色； 基数约束：一个角色被分配的用户数量受限，它指的是有多少用户能拥有这个角色； 先决条件角色：指要想获得较高的权限，要首先拥有低一级的权限； 运行时互斥：例如，允许一个用户具有两个角色的成员资格，但在运行中不可同时激活这两个角色； 4. RBAC3模型综合了RBAC0、RBAC1、RBAC2的所有特点。 RBAC0 用户-角色-权限设计方案本文主要说明RBAC0模型的设计方案，其余三种升级版模型请自行拓展升级。 简单的权限管理系统由五张表组成：用户表、角色表、权限表、用户-角色关系表、角色-权限关系表，示例如下： ![RBAC-简单表结构-201991821560](http://img.wanglixia.top/RBAC-简单表结构-201991821560.jpg) 附件建表脚本如下： 用户表123456789101112131415161718192021create table SYS_USER( USER_ID varchar(36) not null comment '用户ID', NICKNAME varchar(50) comment '昵称', NAME varchar(50) comment '姓名', SEX varchar(10) comment '性别', BIRTH datetime comment '出生日期', AGE int(3) comment '年龄', AGE_TYPE varchar(10) comment '年龄类型', ICON varchar(200) comment '头像', PHONE varchar(20) comment '手机', EMAIL varchar(30) comment '邮箱', ADDRESS varchar(30) comment '地址', LEVEL char(2) not null comment '用户级别-0:普通用户；1:管理员；2：超管 见字典表', SIGNATURE varchar(300) comment '个性签名', BRIEF varchar(300) comment '个人简介', ACTIVE boolean not null default 1 comment '激活状态-1：启用；0：禁用', UPDATE_TIME timestamp not null default CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment '[系统]更新时间', CREATE_TIME timestamp not null default CURRENT_TIMESTAMP comment '[系统]创建时间'); 角色表123456789101112create table SYS_ROLE( ROLE_ID varchar(36) not null comment '角色ID', ROLE_NAME varchar(50) not null comment '角色名称', ROLE_KEY varchar(200) comment '角色标识', COMMENT varchar(250) comment '描述', ORDER_NO int not null comment '显示顺序', TYPE tinyint not null default 2 comment '角色类型-1：系统；2：用户', ACTIVE boolean not null default 1 comment '激活状态-1：启用；0：禁用', CREATE_TIME timestamp not null default CURRENT_TIMESTAMP comment '创建时间', UPDATE_TIME timestamp not null default CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment '更新时间'); 权限表(菜单表)123456789101112131415161718create table SYS_MENU( MENU_ID varchar(36) not null comment '菜单ID', MENU_NAME varchar(50) not null comment '菜单名称', LINK varchar(100) comment '链接', PCODE varchar(36) comment '父级ID', ICON varchar(100) comment '图标', ICON_TYPE tinyint comment '图标类型：class；图片', COMMENT varchar(250) comment '描述', OPEN boolean not null default 1 comment '打开-1：打开；0：关闭；没有子级菜单的该字段无效', OPEN_TYPE tinyint comment '打开方式-1：主容器打开', ACTIVE boolean not null default 1 comment '激活状态-1：启用；0：禁用', LEVEL int comment '级别', TYPE tinyint not null default 2 comment '菜单类型-1：系统；2：用户', ORDER_NO int comment '序号', PERMS varchar(200) comment '权限标识', IS_LEAF boolean not null default 1 comment '是否叶子-1：是，0：否'); 用户-角色关系表12345create table SYS_USER_ROLE( USER_ID varchar(36) not null comment '用户组ID', ROLE_ID varchar(36) not null comment '角色ID'); 角色-权限关系表12345create table SYS_ROLE_RESOURCE( ROLE_ID varchar(36) not null comment '角色ID', RESOURCE_ID varchar(36) not null comment '资源ID：如MENU_ID、ELEMENT_ID、FILE_ID、FUNC_ID等');]]></content>
  </entry>
  <entry>
    <title><![CDATA[shiro学习笔记1]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FShiro%2FShiro%E7%B3%BB%E5%88%97-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html</url>
    <content type="text"><![CDATA[Shiro基本概念认证授权加密会话管理与Web集成缓存]]></content>
  </entry>
  <entry>
    <title><![CDATA[shiro学习目录]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FShiro%2FShiro%E7%B3%BB%E5%88%97-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B00-%E7%9B%AE%E5%BD%95.html</url>
    <content type="text"><![CDATA[Shiro系列学习目录前言什么是权限管理？ 权限管理用于限制用户的登录验证以及限制其访问且仅能访问自己被授权的资源，几乎任何系统里面都有权限管理，不同权限的用户所能查看的页面、数据以及所能进行的操作都是有限制的。在一般的权限管理系统中，会引入角色的概念（如超级管理员、管理员、VIP用户、普通用户等），方便管理同一类（多个）用户的权限，常见的是RBAC（Role-Based-Access Control-基于角色的权限访问控制），在RBAC中，角色和权限关联，不同的角色一般拥有不同的权限，用户拥有一个或者多个角色，在控制一类用户的权限时，需要授权或者回收某一角色的权限，将用户-角色-权限联系起来。详细内容及一般权限管理系统的设计请见下文链接（《RBAC权限管理系统设计》），本文不做赘述。 一、Shiro到底是什么，能干什么？网页上搜索Shiro去看其讲解以及说明，就可以看到类似以下内容的定义： Shiro是一个安全框架，可以用来帮助我们完成：认证、授权、加密以及会话管理，与Web集成、缓存等。 这里可以看到几个名词，在下面的内容里，将会对这些名称一一加以解释并在实际代码中进行说明。 本文用于记录自己学习Shiro框架的过程以及自己对于Shiro的理解，感兴趣的话可以加好友或者给本文留言交流学习。 二、Shiro的整体架构 系列文章链接： RBAC权限管理系统设计 Shiro系列-学习笔记1-基本概念]]></content>
  </entry>
  <entry>
    <title><![CDATA[[目录]基础知识目录]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FJava%E7%B3%BB%E5%88%97%2FJava%E7%B3%BB%E5%88%97-%E7%9B%AE%E5%BD%95.html</url>
    <content type="text"><![CDATA[基础知识系列博客目录 一、Java相关 Java基础 Java并发编程 Java垃圾回收 Java虚拟机 常见概念区别 二、数据结构 三、框架 Spring基础 SpringBoot SpringCloud SpringMVC Mybatis Velocity 四、数据库 MySQL MSSQL Oracle Redis MongoDB 五、Web服务器 Tomcat Jetty Nginx 六、Linux 七、JavaScript 八、Vue 九、Restful 1.swagger 十、二十三种设计模式 语言知识一、Java相关1.Java基础 Java基础知识 2.Java并发编程 Java并发编程 3.Java垃圾回收4.Java虚拟机5.常见概念区别二、数据结构 数据结构 三、框架1.Spring基础 Spring系列学习之IoC与AOP Spring系列学习之Spring核心组件 2.SpringBoot3.SpringCloud4.SpringMVC5.Mybatis四、数据库1.MySQL [ ]索引原理 [ ]数据库优化 [ ]如何建立索引 [ ]主从数据库如何搭建 [ ]存过、函数、视图的区别以及写法 [ ]常用工具方法 2.MSSQL3.Oracle4. Redis5. MongoDB五、Web服务器1.Tomcat2.Jetty3.Nginx六、Linux七、JavaScript八、Vue九、Restful1.swagger十、二十三种设计模式]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>Oracle</tag>
        <tag>MySQL</tag>
        <tag>Linux</tag>
        <tag>JavaScript</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java并发编程]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FJava%E7%B3%BB%E5%88%97%2FJava%E7%B3%BB%E5%88%97-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[数据结构]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FJava%E7%B3%BB%E5%88%97%2FJava%E7%B3%BB%E5%88%97-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</url>
    <content type="text"><![CDATA[数据结构相关概念抽象数据类型（Abstract Data Type）：一是数据对象集，二是与数据集合相关联的操作集； 类型名称：矩阵数据对象集：一个m n的矩阵由 m n个三元组构成，其中a是矩阵元素的值，i是元素所在的行号，j是元素所在的列号。 算法（algorithm）算法是一个有限指令集，它接收一些输入（有些情况下不需要输入），产生输出，并一定在有限步骤之后终止。算法复杂度： 空间复杂度S(n)：根据算法写成的程序在执行时占用存储单元的长度。这个长度往往与输入数据的规模n有关。空间复杂度过高的算法可能导致占用内存超限，造成程序非正常中断。 时间复杂度T(n)：根据算法写成的程序在执行时耗费时间的长度。这个长度往往也与输入数据的规模n有关。时间复杂度过高的低效算法可能导致我们有生之年都等不到运行结果。 一般而言，在分析算法的效率时，经常关注下面两种复杂度：最坏情况复杂度Tworst(n)和平均复杂度Tavg(n) 渐近表示法： T(n) = O(f(n))：表示存在常数C&gt;0, n0&gt;0，使得当n&gt;=n0时有T(n)&lt;=C(f(n))。 T(n) = Ω(g(n))：表示存在常数C&gt;0,n0&gt;0，使得当n&gt;=n0时有T(n)&gt;=C(g(n))。 T(n) = Θ(h(n))：表示同时有T(n)=O(h(n))和T(n)=Ω(h(n))；（线性复杂度）。 注意O( ) 和 Ω( )分别表示上界和下届，但一个函数可以有很多不同的上界和下界。一般地我们希望上下界越接近真实函数越好，所以通常取最小的上界作为O函数，最大的下界作为Ω函数。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Creat_react_app部署方式]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%2FCreat-react-app-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0-%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F.html</url>
    <content type="text"><![CDATA[Creat_react_app部署方式项目常用命令安装依赖1npm install 错误集合使用npm install 报错’react-scripts’ 不是内部或外部命令，也不是可运行的程序或批处理文件。解决办法： 配置npm包地址 1npm config set registry https://registry.npmjs.org/ 检查地址 1curl https://registry.npmjs.org/ 清除npm缓存 1npm cache clean --force 再重新npm安装 1npm instanll]]></content>
  </entry>
  <entry>
    <title><![CDATA[python环境变量及Pycharm配置]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FPython%2FPython-0-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8F%8APycharm%E9%85%8D%E7%BD%AE.html</url>
    <content type="text"><![CDATA[python环境变量及Pycharm配置前言python环境配置 下载:https://www.python.org/downloads/ 双击运行 python-2.7.13.msi，一路next，然后将 C:\Python27 添加至 Path 环境变量。 cmd打开命令窗口，输入python出现以下内容，配置成功 12Python 2.7.13 (v2.7.13:a06454b1afa1, Dec 17 2016, 20:42:59) [MSC v.1500 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information. [使用]安装pip，cmd窗口下，python -m pip install -U pip, 等待完成。出现Successfully installed pip-19.1.1安装成功。 [不使用]下载最新版pip安装包，https://pypi.org/project/pip/#files；解压 pip-19.1.1.tar.gz 到指定目录，cmd进入该目录，执行 python setup.py install 进行安装，然后将 C:\Python27\Scripts 添加至 Path 环境变量。 安装依赖 pip install -r requirements.txt 打包exe 运行 pyinstaller aaa.py 进行打包exe。 pip文档：https://pip.pypa.io/en/stable/installing/； 卸载pip1python -m pip uninstall pip 错误处理Pycharm报：Please select a valid Python interpreter打开setting输入interpreter，看到project interpreter，选择一个Project Interpreter Traceback (most recent call last):123456789101112131415161718Traceback (most recent call last): File "D:\DevTools\JetBrains\PyCharm 2018.3.7\helpers\pydev\pydevd.py", line 1741, in &lt;module&gt; main() File "D:\DevTools\JetBrains\PyCharm 2018.3.7\helpers\pydev\pydevd.py", line 1735, in main globals = debugger.run(setup['file'], None, None, is_module) File "D:\DevTools\JetBrains\PyCharm 2018.3.7\helpers\pydev\pydevd.py", line 1135, in run pydev_imports.execfile(file, globals, locals) # execute the script File "D:/kyee/projects/EMR/medinsproxy/app.py", line 4, in &lt;module&gt; from adapter import * File "D:\kyee\projects\EMR\medinsproxy\adapter.py", line 14, in &lt;module&gt; fileConfig('./logging.conf') File "D:\DevTools\Python27\lib\logging\config.py", line 77, in fileConfig formatters = _create_formatters(cp) File "D:\DevTools\Python27\lib\logging\config.py", line 113, in _create_formatters flist = cp.get("formatters", "keys") File "D:\DevTools\Python27\lib\ConfigParser.py", line 607, in get raise NoSectionError(section)ConfigParser.NoSectionError: No section: 'formatters' 解决办法【暂未解决】：执行pip install medinsproxy;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Mysql数据库常用方式]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E6%96%B9%E5%BC%8F.html</url>
    <content type="text"><![CDATA[概要： 修改数据库编码； 更改数据库名； 修改数据库编码：utf8mb4的最低mysql版本支持版本为5.5.3+，若不是，请升级到较新版本。1. 先修改my.inimy.ini 文件，找到以下几项或者在[client]、[mysql]、[mysqld]下面按照如下位置添加对应编码，设置为utf8mb4；我的是MySQL5.6版本，my.ini没有再安装目录，在以下目录：C:\ProgramData\MySQL\MySQL Server 5.6 123456789[client] default-character-set = utf8mb4 [mysql] default-character-set = utf8mb4 [mysqld] character-set-client-handshake = FALSE character-set-server = utf8mb4 collation-server = utf8mb4_unicode_ci init_connect='SET NAMES utf8mb4' 重启MySQL服务，查看编码的脚本：1SHOW VARIABLES WHERE Variable_name LIKE 'character\_set\_%' OR Variable_name LIKE 'collation%'; 2. 数据库连接的配置数据库连接参数中:characterEncoding=utf8会被自动识别为utf8mb4，也可以不加这个参数，会自动检测。而autoReconnect=true是必须加上的。 3. 修改列编码将数据库和已经建好的表也转换成utf8mb4更改数据库编码：1ALTER DATABASE LX_NOTE CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; 更改表编码：1ALTER TABLE TABLE_NAME SYS_MENU TO CHARACTER SET utf8mb4 COLLATEutf8mb4_general_ci; 如有必要，还可以更改列的编码 更改数据库名1. ！！！备份数据库！！！2. 脚本 mysql_rename.sh12345678910#!/bin/bashmysql -uroot -p'lucifer' --host=127.0.0.1 -e 'create database if not exists LX_NOTE DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci'list_table=$(mysql -uroot -plucifer --host=127.0.0.1 -Nse "select table_name from information_schema.TABLES where TABLE_SCHEMA='SSM_NOTE'")for table in $list_table do #echo $TABLE mysql -uroot -plucifer --host=127.0.0.1 -e "rename table SSM_NOTE.$table to LX_NOTE.$table"done 3. cmd命令窗口运行该脚本，参考命令如下：1C:\Program Files\MySQL\MySQL Server 5.6\bin&gt;e:mysql_rename.sh 4. 完成后就发现数据库已经移动过去了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[quartz学习笔记之界面配置（二）]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FQuartz%2FQuartz-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE.html</url>
    <content type="text"><![CDATA[本文内容通过xml配置一个调度器Scheduler，所有的任务通过该调度器来进行调度，结合官方提供的数据结构以及调度实现来达到前端控制定时器的目的。 调度器Scheduler的作用调度器是Quartz的核心组成部分，其作用是调度Job能够被Trigger触发，是Quartz的驱动。下图是列出来的定时器的核心概念、组成部分以及 调度器的创建Scheduler的实现类有以下几个： RemoteScheduler: 远程调度器； StdScheduler：默认标准调度器（最为常用的）； RemoteMBeanScheduler：抽象类， JBoss4RMIRemoteMBeanScheduler：是抽象类RemoteMBeanScheduler 的实现类调度器的创建主要是通过其工厂模式创建的，创建方式有： StdSchedulerFactory； 使用一组参数（java.util.Properties）来创建和初始化Quartz调度器； 配置参数一般在quartz.properties中 调用getScheduler方法就能创建和初始化调度器对象； 通过new StdSchedulerFactory().getScheduler(); 来获取调度器。 DirectSchedulerFactory； 定时器创建以后，可以进行增加、删除以及显示Job和Trigger，对Job进行暂停/恢复等操作，调用了.start()方法后，Scheduler才正式开始执行Job和Trigger； StdSchedulerFactoryStdSchedulerFactory依赖于一系列属性决定如何产生Scheduler，提供配置信息的方式如下： 通过java.util.Properties属性实例； 通过外部属性文件提供； 通过含有属性文件内容的java.io.InputStream提供； 1234567// 1. 无参方法，会优先加载当前工作目录的quartz.properties，如果未找到，则试图从系统的classpath中加载该配置文件。 factory.initialize();// 2.通过外部属性文件提供// factory.initialize("lx-quartz-scheduler.properties");// 3. 通过含有属性文件内容的java.io.InputStream提供// factory.initialize(new FileInputStream(new File("lx-quartz-scheduler.properties")));scheduler = factory.getScheduler("quartzScheduler"); 前端控制定时器暂停、恢复等核心方法原理：配置定时器项目默认调度器名字，并结合quartz官方提供的表结构以及自动从数据库加载定时器配置的机制，使用调度器Scheduler的几个核心方法结合数据库配置达到使用前端界面控制定时器恢复、执行等操作。 void start(); // 启动 void standby();// 挂起 void shutdown();// 关闭 void shutdown(true); // 等待所有正在执行的job执行完毕之后，再关闭scheduler； 暂停定时器核心方法修改数据库的执行器状态123456789101112131415@Overridepublic Message updateJobStatus(QuartzJobInfo job) &#123; QuartzTriggers triggers = new QuartzTriggers(); triggers.setSchedName(job.getSchedName()); triggers.setTriggerGroup(job.getTriggerGroup()); triggers.setTriggerName(job.getTriggerName()); triggers.setTriggerState(job.getTriggerState()); quartzTriggersDao.updateByPrimaryKeySelective(triggers); if (QRTZ_TRIGGER_STATUS_WAITING.equals(job.getTriggerState())) &#123; quartzManager.resumeJob(job.getJobName(), job.getJobGroup()); &#125; else &#123; quartzManager.pauseJob(job.getJobName(), job.getJobGroup()); &#125; return Message.success();&#125; 12345678910111213141516 /** * 调度器暂停Job * * @param jobName job名字 * @param jobGroupName job组名 */public void pauseJob(String jobName, String jobGroupName) &#123; JobKey jobKey = JobKey.jobKey(jobName, jobGroupName); try &#123; scheduler.pauseJob(jobKey); &#125; catch (SchedulerException e) &#123; throw new BusinessException("暂停任务[" + jobGroupName + SPLIT_DOT + jobName + "]中出现异常!", e); &#125; catch (IllegalArgumentException e) &#123; throw new BusinessException("暂停任务[" + jobGroupName + SPLIT_DOT + jobName + "]中出现异常!", e); &#125;&#125; 恢复定时器核心方法1234567891011121314/** * 调度器恢复Job * * @param jobName job名字 * @param jobGroupName job组名 */public void resumeJob(String jobName, String jobGroupName) &#123; JobKey jobKey = JobKey.jobKey(jobName, jobGroupName); try &#123; scheduler.resumeJob(jobKey); &#125; catch (SchedulerException e) &#123; throw new BusinessException("恢复任务[" + jobGroupName + SPLIT_DOT + jobName + "]中出现异常!", e); &#125;&#125; 效果 回顾定时器配置：SimpleTrigger和CronTriggerspring-servlet.xml 中添加配置，用于托付给spring来管理； 配置JobDetail； 配置Trigger； 配置Scheduler；首先配置JobDetail，前面的概念中也了解到定义的方式，方式如下： MethodInvokingJobDetailFactoryBean JobDetailFactoryBean：可以传入参数jobDataMap；比较灵活； extends QuartzJobBean 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;description&gt;Quartz定时器配置&lt;/description&gt;&lt;!-- JobDetail 定义方式一： MethodInvokingJobDetailFactoryBean--&gt;&lt;bean id="lxJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"&gt; &lt;!-- 指定类 --&gt; &lt;property name="targetObject" ref="lxJobDetailBean"/&gt; &lt;!-- 指定方法 --&gt; &lt;property name="targetMethod" value="init"/&gt;&lt;/bean&gt;&lt;!-- JobDetail 定义方式二：JobDetailFactoryBean --&gt;&lt;bean id="lxJobDetailBean1" class="org.springframework.scheduling.quartz.JobDetailFactoryBean"&gt; &lt;property name="jobClass" value="com.weyoung.platform.quartz.schedule.LxQuartzJobBean"/&gt; &lt;!-- 传入自定义参数 --&gt; &lt;property name="jobDataMap"&gt; &lt;map&gt; &lt;entry key="anotherBean" value-ref="anotherBean"/&gt; &lt;/map&gt; &lt;/property&gt; &lt;property name="durability" value="true"/&gt;&lt;/bean&gt;&lt;!-- Trigger方式一：SimpleTriggerFactoryBean 距离当前时间1秒之后执行，之后每隔两秒钟执行一次 --&gt;&lt;bean id="lxSimpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"&gt; &lt;property name="jobDetail" ref="lxJobDetail"/&gt; &lt;property name="startDelay" value="1000"/&gt; &lt;property name="repeatInterval" value="2000"/&gt;&lt;/bean&gt;&lt;!-- Trigger方式二：CronTriggerFactoryBean 每隔五秒钟执行一次 --&gt;&lt;bean id="lxCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"&gt; &lt;property name="jobDetail" ref="lxJobDetailBean1"/&gt; &lt;property name="cronExpression" value="0/5 * * ? * *"/&gt;&lt;/bean&gt;&lt;bean id="lxQuartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"&gt; &lt;property name="jobDetails"&gt; &lt;list&gt; &lt;ref bean="lxJobDetail"/&gt; &lt;ref bean="lxJobDetailBean1"/&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name="triggers"&gt; &lt;list&gt; &lt;ref bean="lxSimpleTrigger"/&gt; &lt;ref bean="lxCronTrigger"/&gt; &lt;/list&gt; &lt;/property&gt;&lt;/bean&gt; 其中，定义的类lxJobDetailBean、lxJobDetailBean1、anotherBean代码如下：LxJobDetailBean.java12345678910111213141516171819202122232425package com.weyoung.platform.quartz.schedule;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Component;import java.text.SimpleDateFormat;import java.util.Date;/** * @功能描述: * @时间: 2019/6/29 11:26 * @author: Mr.wang */@Component("lxJobDetailBean")public class LxJobDetailBean &#123; private static final Logger LOGGER = LoggerFactory.getLogger(LxJobDetailBean.class); public void init() &#123; Date date = new Date(); SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss"); LOGGER.info("-----------lxJobDetailBean.init-----------" + sdf.format(date)); &#125;&#125; LxQuartzJobBean.java 12345678910111213141516171819202122232425262728293031323334353637383940package com.weyoung.platform.quartz.schedule;import com.weyoung.platform.quartz.entity.AnotherBean;import org.quartz.JobExecutionContext;import org.quartz.JobExecutionException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.scheduling.quartz.QuartzJobBean;import java.text.SimpleDateFormat;import java.util.Date;/** * @功能描述: * @时间: 2019/6/29 11:33 * @author: Mr.wang */public class LxQuartzJobBean extends QuartzJobBean &#123; // 定义一个需要传入的参数，并给一个setter方法 private AnotherBean anotherBean; private static final Logger LOGGER = LoggerFactory.getLogger(LxQuartzJobBean.class); /** * 业务逻辑 * * @param jobExecutionContext * @throws JobExecutionException */ @Override protected void executeInternal(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123; Date date = new Date(); SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss"); LOGGER.info("---------LxQuartzJobBean.executeInternal---------" + sdf.format(date)); &#125; public void setAnotherBean(AnotherBean anotherBean) &#123; this.anotherBean = anotherBean; &#125;&#125; AnotherBean.java 123456789101112131415package com.weyoung.platform.quartz.entity;import org.springframework.stereotype.Component;/** * @功能描述: * @时间: 2019/6/29 11:36 * @author: Mr.wang */@Component("anotherBean")public class AnotherBean &#123; public void someMessage () &#123; &#125;&#125; Quartz中作业存储方式 RAMJobStore：作业、触发器、调度信息存储在内存中，这种方式存取速度比较快，但是如果定时器项目重启或者崩溃的话，存储的信息都会丢失； JDBC作业存储：作业、触发器、调度信息存储在数据库中，支持事务，支持集群； 前面的笔记里面记录了Quartz官方提供的表结构及创建脚本等，使用该脚本创建数据库； 修改调度器信息及使用quartz.propertie文件配置我的项目暂时是把定时器放在项目主程序中，也是使用同一个数据库，当然也可以分开。如果需要自己配置数据库的话，在quartz.properties中配置就行。因此，修改spring-quartz.xml配置如下：12345678910&lt;!-- 调度器，调度器的id不要改，数据库中记录调度器名称 --&gt;&lt;bean id="lxQuartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"&gt; &lt;!-- 使用spring中配置的数据源，需要在这儿配置 --&gt; &lt;property name="dataSource" ref="masterDataSource"/&gt; &lt;property name="overwriteExistingJobs" value="true"/&gt;&lt;!--覆盖JOB：true、以数据库中已经存在的为准： --&gt; &lt;property name="autoStartup" value="true"/&gt;&lt;!--自启动--&gt; &lt;property name="startupDelay" value="20"/&gt; &lt;!-- 定时任务延时启动，程序启动后20秒再启动定时任务 --&gt; &lt;!-- 调度器配置文件 --&gt; &lt;property name="configLocation" value="classpath:config/quartz.properties"/&gt;&lt;/bean&gt; quartz.properties文件的配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#===========================================================================# Configure Main Scheduler Properties 调度器属性# ===========================================================================org.quartz.scheduler.instanceName=lxQuartzSchedulerorg.quartz.scheduler.instanceid=AUTOorg.quartz.scheduler.rmi.export=falseorg.quartz.scheduler.rmi.proxy=falseorg.quartz.scheduler.wrapJobExecutionInUserTransaction=false# ===========================================================================# Configure ThreadPool 线程池属性# ===========================================================================#线程池的实现类（一般使用SimpleThreadPool即可满足几乎所有用户的需求）org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool#指定线程数，至少为1（无默认值）(一般设置为1-100直接的整数合适)org.quartz.threadPool.threadCount=10#设置线程的优先级（最大为java.lang.Thread.MAX_PRIORITY 10，最小为Thread.MIN_PRIORITY 1，默认为5）org.quartz.threadPool.threadPriority=5===========================================================================# Configure JobStore 存储调度信息（工作，触发器和日历等）# ===========================================================================# 信息保存时间 默认值60秒org.quartz.jobStore.misfireThreshold=60000#保存job和Trigger的状态信息到内存中的类#org.quartz.jobStore.class=org.quartz.simpl.RAMJobStoreorg.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX# Mysql需要使用下面的链接org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate#org.quartz.jobStore.useProperties = false## 我们采用程序中的数据源，因此这块不配置，在spring-quartz.xml中配置#org.quartz.jobStore.dataSource = masterDataSourceorg.quartz.jobStore.tablePrefix = QRTZ_#org.quartz.jobStore.isClustered = false#============================================================================# Configure Datasources#============================================================================#org.quartz.dataSource.myDS.driver=com.mysql.jdbc.Driver#org.quartz.dataSource.myDS.URL=jdbc:mysql://localhost:3306/SSM_NOTE#org.quartz.dataSource.myDS.user=root#org.quartz.dataSource.myDS.password=lucifer#org.quartz.dataSource.myDS.maxConnections=5# ===========================================================================# Configure SchedulerPlugins 插件属性 配置# ===========================================================================# 自定义插件org.quartz.plugin.triggHistory.class=org.quartz.plugins.history.LoggingTriggerHistoryPlugin org.quartz.plugin.triggHistory.triggerFiredMessage=Trigger &#123;1&#125;.&#123;0&#125; fired job &#123;6&#125;.&#123;5&#125; at: &#123;4, date, HH:mm:ss MM/dd/yyyy&#125; org.quartz.plugin.triggHistory.triggerCompleteMessage=Trigger &#123;1&#125;.&#123;0&#125; completed firing job &#123;6&#125;.&#123;5&#125; at &#123;4, date, HH:mm:ss MM/dd/yyyy&#125; with resulting trigger instruction code: &#123;9&#125; qrtz_triggers表中的字段特别解析：MISFIRE_INSTR：Misfire处理规则:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule();// 1scheduleBuilder.withMisfireHandlingInstructionFireNow();// -1scheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();// 5scheduleBuilder.withMisfireHandlingInstructionNextWithExistingCount();// 4scheduleBuilder.withMisfireHandlingInstructionNextWithRemainingCount();// 2scheduleBuilder.withMisfireHandlingInstructionNowWithExistingCount();// 3scheduleBuilder.withMisfireHandlingInstructionNowWithRemainingCount();/*1：withMisfireHandlingInstructionFireNow——以当前时间为触发频率立即触发执行——执行至FinalTIme的剩余周期次数——以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到——调整后的FinalTime会略大于根据starttime计算的到的FinalTime值-1：withMisfireHandlingInstructionIgnoreMisfires——以错过的第一个频率时间立刻开始执行——重做错过的所有频率周期——当下一次触发频率发生时间大于当前时间以后，按照Interval的依次执行剩下的频率——共执行RepeatCount+1次2：withMisfireHandlingInstructionNowWithExistingCount——以当前时间为触发频率立即触发执行——执行至FinalTIme的剩余周期次数——以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到——调整后的FinalTime会略大于根据starttime计算的到的FinalTime值3：withMisfireHandlingInstructionNowWithRemainingCount——以当前时间为触发频率立即触发执行——执行至FinalTIme的剩余周期次数——以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到——调整后的FinalTime会略大于根据starttime计算的到的FinalTime值4：withMisfireHandlingInstructionNextWithRemainingCount——不触发立即执行——等待下次触发频率周期时刻，执行至FinalTime的剩余周期次数——以startTime为基准计算周期频率，并得到FinalTime——即使中间出现pause，resume以后保持FinalTime时间不变5：withMisfireHandlingInstructionNextWithExistingCount——不触发立即执行——等待下次触发频率周期时刻，执行至FinalTime的剩余周期次数——以startTime为基准计算周期频率，并得到FinalTime——即使中间出现pause，resume以后保持FinalTime时间不变*/// Cron的MisFire策略；使用最多的CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule("");// -1: 以错过的第一个频率时间立刻开始执行,重做错过的所有频率周期后当下一次触发频率发生时间大于当前时间后，再按照正常的Cron频率依次执行；cronScheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();// 2: 不触发立即执行，等待下次Cron触发频率到达时刻开始按照Cron频率依次执行；cronScheduleBuilder.withMisfireHandlingInstructionDoNothing();// 1:以当前时间为触发频率立刻触发一次执行，然后按照Cron频率依次执行cronScheduleBuilder.withMisfireHandlingInstructionFireAndProceed(); 错误12org.springframework.web.context.ContextLoader - Context initialization failedorg.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;quartzJobServiceImpl&apos;: Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;quartzManager&apos;: Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;lxQuartzScheduler&apos; defined in class path resource [spring/spring-quartz.xml]: Invocation of init method failed; nested exception is java.lang.NoClassDefFoundError: javax/transaction/UserTransaction 是因为缺少jar包，添加如下依赖,即可 12345&lt;dependency&gt; &lt;groupId&gt;javax.transaction&lt;/groupId&gt; &lt;artifactId&gt;jta&lt;/artifactId&gt; &lt;version&gt;1.1&lt;/version&gt;&lt;/dependency&gt;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Quartz</tag>
        <tag>Spring Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[quartz学习笔记之小试牛刀（一）]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FQuartz%2FQuartz-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80.html</url>
    <content type="text"><![CDATA[本文内容本文记录从数据库中加载定时任务的配置并运行的过程。 数据结构官方提供的表结构: 官网地址：http://www.quartz-scheduler.org/; 网盘下载官方文档及自己整理PDM结构链接：https://pan.baidu.com/s/1IpNn3yAiFpwi8kbywY1Ppg,提取码：zqe0 Maven中使用添加依赖12345678910111213&lt;quartz.version&gt;2.2.3&lt;/quartz.version&gt;&lt;!--Quartz定时器的依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt; &lt;artifactId&gt;quartz&lt;/artifactId&gt; &lt;version&gt;$&#123;quartz.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt; &lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt; &lt;version&gt;$&#123;quartz.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;!--Quartz定时器的依赖--&gt; Spring中配置方式使用@Scheduled 注解；1234567891011121314151617181920212223242526272829```javapackage com.weyoung.platform.quartz.schedule;import com.weyoung.framework.annotation.QuartzLog;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;/** * @Author Mr.wang * @Description * @Date 2019/4/29 */@Componentpublic class MainSchedule &#123; private static final Logger logger = LoggerFactory.getLogger(MainSchedule.class); public MainSchedule() &#123; logger.info(&quot;-------------------------定时器MainSchedule创建成功-------------------------&quot;); &#125; @Scheduled(cron = &quot;0/1 * * * * ?&quot;) @QuartzLog public static void run() &#123; logger.info(&quot;-------------------------定时器调度start-------------------------&quot;); &#125;&#125; 使用SchedulingConfigurer配置定时任务，使用工具类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165#### 测试表数据```sql-- qrtz_job_details 表数据INSERT INTO `qrtz_job_details` ( `SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`, `DESCRIPTION`, `JOB_CLASS_NAME`, `IS_DURABLE`, `IS_NONCONCURRENT`, `IS_UPDATE_DATA`, `REQUESTS_RECOVERY`, `JOB_DATA`) VALUES ( &apos;quartzScheduler&apos;, &apos;1&apos;, &apos;1&apos;, &apos;测试任务&apos;, &apos;com.weyoung.platform.quartz.job.TestJob2.execute&apos;, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, NULL ) ;INSERT INTO `qrtz_job_details` ( `SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`, `DESCRIPTION`, `JOB_CLASS_NAME`, `IS_DURABLE`, `IS_NONCONCURRENT`, `IS_UPDATE_DATA`, `REQUESTS_RECOVERY`, `JOB_DATA`) VALUES ( &apos;quartzScheduler&apos;, &apos;2&apos;, &apos;1&apos;, &apos;TestJob&apos;, &apos;com.weyoung.platform.quartz.job.TestJob.execute&apos;, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, NULL ) ;-- qrtz_triggers 触发器信息表数据INSERT INTO `qrtz_triggers` ( `SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`, `JOB_NAME`, `JOB_GROUP`, `DESCRIPTION`, `NEXT_FIRE_TIME`, `PREV_FIRE_TIME`, `PRIORITY`, `TRIGGER_STATE`, `TRIGGER_TYPE`, `START_TIME`, `END_TIME`, `CALENDAR_NAME`, `MISFIRE_INSTR`, `JOB_DATA`) VALUES ( &apos;quartzScheduler&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, &apos;触发器信息&apos;, &apos;1561338500&apos;, &apos;1561338500&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1561338500&apos;, NULL, NULL, NULL, NULL ) ;INSERT INTO `qrtz_triggers` ( `SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`, `JOB_NAME`, `JOB_GROUP`, `DESCRIPTION`, `NEXT_FIRE_TIME`, `PREV_FIRE_TIME`, `PRIORITY`, `TRIGGER_STATE`, `TRIGGER_TYPE`, `START_TIME`, `END_TIME`, `CALENDAR_NAME`, `MISFIRE_INSTR`, `JOB_DATA`) VALUES ( &apos;quartzScheduler&apos;, &apos;2&apos;, &apos;1&apos;, &apos;2&apos;, &apos;1&apos;, &apos;触发器信息&apos;, &apos;1561338500&apos;, &apos;1561338500&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1561338500&apos;, NULL, NULL, NULL, NULL ) ;-- qrtz_cron_triggers 触发器的CRON表达式信息INSERT INTO `qrtz_cron_triggers` ( `SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`, `CRON_EXPRESSION`, `TIME_ZONE_ID`) VALUES ( &apos;quartzScheduler&apos;, &apos;1&apos;, &apos;1&apos;, &apos;* * * * * ? *&apos;, &apos;Asia/Shanghai&apos; ) ;INSERT INTO `qrtz_cron_triggers` ( `SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`, `CRON_EXPRESSION`, `TIME_ZONE_ID`) VALUES ( &apos;quartzScheduler&apos;, &apos;2&apos;, &apos;1&apos;, &apos;3 * * * * ? *&apos;, &apos;Asia/Shanghai&apos; ) ; QuartzUtil.java 定时任务工具类package com.weyoung.platform.quartz.utils;import com.weyoung.framework.exception.BusinessException;import org.apache.commons.lang3.StringUtils;import org.quartz.*;import org.quartz.impl.StdSchedulerFactory;import org.springframework.stereotype.Component;import static com.weyoung.framework.common.Constants.SPLIT_DOT;/** * @Author Mr.wang * @Description 定时任务管理器 * @Date 2019/5/9 */@Component("quartzUtil")public class QuartzUtil &#123; private static Scheduler scheduler; static &#123; try &#123; scheduler = new StdSchedulerFactory().getScheduler(); &#125; catch (SchedulerException e) &#123; throw new BusinessException("获取调度器实例异常!", e); &#125; &#125; private static String JOB_GROUP_NAME = "LX_JOB_GROUP_NAME"; private static String TRIGGER_GROUP_NAME = "LX_TRIGGER_GROUP_NAME"; public static void setScheduler(Scheduler scheduler) &#123; QuartzUtil.scheduler = scheduler; &#125; /** * 添加一个定时任务，使用默认的任务组名，触发器名，触发器组名 * * @param jobClass Job任务类实例 * @param jobName job名字(请保证唯一性) * @param cronExpression cron时间表达式 * @throws SchedulerException */ public void addJob(String jobName, Class jobClass, String cronExpression) throws SchedulerException &#123; addJob(jobClass, jobName, null, jobName, null, cronExpression, 5); &#125; /** * 开始一个simpleSchedule()调度(创建一个新的定时任务) * * @param jobClass Job任务类实例 * @param jobName job名字(请保证唯一性) * @param jobGroupName job组名(请保证唯一性) * @param cronExpression cron时间表达式 * @param triggerName trigger名字(请保证唯一性) * @param triggerGroupName triggerJob组名(请保证唯一性) * @param triggerPriority trigger优先级 * @throws SchedulerException */ public void addJob(Class jobClass, String jobName, String jobGroupName, String triggerName, String triggerGroupName, String cronExpression, int triggerPriority) throws SchedulerException &#123; if (StringUtils.isEmpty(jobGroupName)) &#123; jobGroupName = JOB_GROUP_NAME; &#125; if (StringUtils.isEmpty(triggerGroupName)) &#123; triggerGroupName = TRIGGER_GROUP_NAME; &#125; // 1、创建一个JobDetail实例，指定Quartz JobDetail jobDetail = JobBuilder // 任务执行类 .newJob(jobClass) // 任务名，任务组 .withIdentity(jobName, jobGroupName) .build(); // 2、创建Trigger // 优先级默认是5，数字越高优先级越高 Trigger trigger = TriggerBuilder.newTrigger() .withIdentity(triggerName, triggerGroupName).startNow() .withSchedule(CronScheduleBuilder.cronSchedule(cronExpression)) .withPriority(triggerPriority) .build(); try &#123; // 判断调度其中是否存在该任务，不存在时添加，否则会出现错误 if (!scheduler.checkExists(JobKey.jobKey(jobName, jobGroupName))) &#123; scheduler.scheduleJob(jobDetail, trigger); &#125; &#125; catch (SchedulerException e) &#123; throw new BusinessException("添加任务[" + jobName + "]到调度器中出现异常!", e); &#125; // 4、启动 this.startSchedule(); &#125; /** * 开始任务 */ public void startSchedule() &#123; try &#123; if (scheduler.isShutdown()) &#123; // 恢复 scheduler.resumeAll(); &#125; else &#123; // 启动 scheduler.start(); &#125; &#125; catch (SchedulerException e) &#123; throw new BusinessException("开启任务调度器中出现异常!", e); &#125; &#125; /** * 暂停Job * * @param jobName job名字 * @param jobGroupName job组名 */ public void pauseJob(String jobName, String jobGroupName) &#123; JobKey jobKey = JobKey.jobKey(jobName, jobGroupName); try &#123; scheduler.pauseJob(jobKey); &#125; catch (SchedulerException e) &#123; throw new BusinessException("暂停任务[" + jobGroupName + SPLIT_DOT + jobName + "]中出现异常!", e); &#125; &#125; /** * 恢复Job * * @param jobName job名字 * @param jobGroupName job组名 */ public void resumeJob(String jobName, String jobGroupName) &#123; JobKey jobKey = JobKey.jobKey(jobName, jobGroupName); try &#123; scheduler.resumeJob(jobKey); &#125; catch (SchedulerException e) &#123; throw new BusinessException("恢复任务[" + jobGroupName + SPLIT_DOT + jobName + "]中出现异常!", e); &#125; &#125; /** * 修改一个任务的触发时间(使用默认的任务组名，触发器名，触发器组名) */ public void modifyJobTime(String jobName, String cronExpression) throws SchedulerException &#123; rescheduleJob(jobName, null, cronExpression); &#125; /** * 更新任务表达式 * * @param triggerName trigger名字 * @param triggerGroupName trigger组名 * @param newCronExpression cron时间表达式 * @throws SchedulerException */ public void rescheduleJob(String triggerName, String triggerGroupName, String newCronExpression) throws SchedulerException &#123; if (StringUtils.isBlank(triggerGroupName)) &#123; triggerGroupName = TRIGGER_GROUP_NAME; &#125; TriggerKey triggerKey = TriggerKey.triggerKey(triggerName, triggerGroupName); // 获取trigger CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey); // 按新的cronExpression表达式重新构建trigger trigger = trigger .getTriggerBuilder() .withIdentity(triggerKey) .withSchedule(CronScheduleBuilder.cronSchedule(newCronExpression)) .build(); // 按新的trigger重新设置job执行 try &#123; scheduler.rescheduleJob(triggerKey, trigger); &#125; catch (SchedulerException e) &#123; throw new BusinessException("更新任务调度策略出现异常!", e); &#125; &#125; /** * 移除一个任务和触发器(使用默认的任务组名，触发器名，触发器组名) */ public void removeJob(String jobName, String triggerName) throws SchedulerException &#123; this.removeJob(jobName, null, triggerName, null); &#125; /** * 移除一个任务和触发器 */ public void removeJob(String jobName, String jobGroupName, String triggerName, String triggerGroupName) throws SchedulerException &#123; if (StringUtils.isEmpty(jobGroupName)) &#123; jobGroupName = JOB_GROUP_NAME; &#125; if (StringUtils.isEmpty(triggerGroupName)) &#123; triggerGroupName = TRIGGER_GROUP_NAME; &#125; JobKey jobKey = JobKey.jobKey(jobName, jobGroupName); TriggerKey triggerKey = TriggerKey.triggerKey(triggerName, triggerGroupName); // 停止触发器 scheduler.pauseTrigger(triggerKey); // 移除触发器 scheduler.unscheduleJob(triggerKey); // 删除任务 scheduler.deleteJob(jobKey); &#125;&#125; 实现SchedulingConfigurer接口的类作用是从数据库中加载定时器配置信息；注：@PostConstruct注解使这个方法在项目启动后加载执行LxJobConfig.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package com.weyoung.platform.quartz.schedule;import com.weyoung.framework.exception.BusinessException;import com.weyoung.platform.quartz.dao.QuartzJobDetailsDao;import com.weyoung.platform.quartz.pojo.QuartzJobInfo;import com.weyoung.platform.quartz.utils.QuartzUtil;import org.apache.commons.lang3.StringUtils;import org.quartz.SchedulerException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.context.annotation.Configuration;import org.springframework.scheduling.annotation.EnableScheduling;import org.springframework.scheduling.annotation.SchedulingConfigurer;import org.springframework.scheduling.config.ScheduledTaskRegistrar;import javax.annotation.Resource;import java.util.List;import static com.weyoung.framework.common.Constants.SPLIT_DOT;/** * @author Mr.wang * @功能描述: 加载定时器列表 * @时间: 2019/6/23 20:24 */@Configuration@EnableSchedulingpublic class LxJobConfig implements SchedulingConfigurer &#123; private static final Logger LOGGER = LoggerFactory.getLogger(LxJobConfig.class); @Resource private QuartzJobDetailsDao quartzJobDetailsDao; @Resource QuartzUtil quartzUtil; @Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) &#123; loadConfigsFromDb(); &#125; /** * 从数据库中获取job配置信息并放入调度器中 */ private void loadConfigsFromDb() &#123; LOGGER.info("-----------------LxJobConfig------------------loadConfigsFromDb-----------------"); // 从数据库加载Job配置信息 List&lt;QuartzJobInfo&gt; jobDetails = quartzJobDetailsDao.selectCronJobAndTriggerList(new QuartzJobInfo()); jobDetails.stream().forEach(config -&gt; &#123; String jobClassName = config.getJobClassName(); if (jobClassName.indexOf(SPLIT_DOT) == -1) &#123; throw new BusinessException("定时任务配置异常，类名参数配置错误[" + jobClassName + "]！"); &#125; if (StringUtils.isEmpty(config.getCronExpression())) &#123; throw new BusinessException("定时任务配置异常，CRON表达式配置错误[" + config.getCronExpression() + "]！"); &#125; int splitIdx = jobClassName.lastIndexOf("."); String className = jobClassName.substring(0, splitIdx); try &#123; Class&lt;?&gt; jobClass = Class.forName(className); quartzUtil.addJob(jobClass, config.getJobName(), config.getJobGroup(), config.getTriggerName(), config.getTriggerGroup(), config.getCronExpression(), config.getPriority()); &#125; catch (ClassNotFoundException e) &#123; throw new BusinessException("定时任务配置异常，类名[" + className + "]未找到！", e); &#125; catch (SchedulerException e) &#123; throw new BusinessException("添加定时任务异常！", e); &#125; &#125;); &#125;&#125; 测试任务类1： TestJob.java12345678910111213141516171819202122232425262728package com.weyoung.platform.quartz.job;import org.quartz.Job;import org.quartz.JobExecutionContext;import org.quartz.JobExecutionException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.text.SimpleDateFormat;import java.util.Date;/** * @功能描述: * @时间: 2019/6/24 19:47 * @author: Mr.wang */public class TestJob implements Job &#123; private static final Logger LOGGER = LoggerFactory.getLogger(TestJob2.class); @Override public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123; Date date = new Date(System.currentTimeMillis()); SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); String now = sf.format(date); LOGGER.info("---------------&gt;TestJobMain execute" + now); &#125;&#125; 测试任务类2：TestJob2123456789101112131415161718192021222324252627package com.weyoung.platform.quartz.job;import org.quartz.Job;import org.quartz.JobExecutionContext;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.text.SimpleDateFormat;import java.util.Date;/** * @Author Mr.wang * @Description 定时任务实现类-测试 * @Date 2019/6/2 */public class TestJob2 implements Job &#123; private static final Logger LOGGER = LoggerFactory.getLogger(TestJob2.class); @Override public void execute(JobExecutionContext context) &#123; Date date = new Date(); SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); String format = sf.format(date); LOGGER.info("TestJob2.execute.run:&#123;&#125;", format); &#125;&#125; 执行结果信息 只需要定时任务类实现Job接口重写其execute方法即可。说明上面的方式通过实现SchedulingConfigurer接口的configureTasks方法使加载数据库中定时任务的配置以及放入调度器的这一系列操作在应用启动后就开始自动执行，并使用QuartzUtil工具类将一个Job接口的实现类放入调度器中并进行调度，其核心在于QuartzUtil这个工具类。后面的文章会将一个普通类变成一个定时调度的任务、以及通过界面管理调度器、触发器、任务等信息，包括不重启添加任务、暂停任务、恢复任务以及删除任务的方法。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Quartz</tag>
        <tag>Spring Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[quartz学习笔记之相关概念整理]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FQuartz%2FQuartz-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5.html</url>
    <content type="text"><![CDATA[Quartz三个核心概念 调度器：Scheduler 任务：Job 触发器：TriggerQuartz体系结构 JobDetail：包含任务的实现类以及类的信息； Trigger：决定任务什么时候被调用；分为SimpleTrigger和CronTrigger（常用）； scheduler：定时、周期地执行JobDetail的信息Quartz重要组成 Job： 接口，只有一个参数； JobDetail：Job的实现类； JobBuilder：创建JobDetail的实例； JobStore：保存Job数据；（保存到内存中、数据库中）； Trigger： TreadPool： TriggerBuilder： Scheduler：调度器； Calender：一个Trigger可以和多个Calender关联，以排除或者包含某些时间点 监听器：JobListener、TriggerListener、SchedulerListener； 代码示例（一）123456789101112131415161718192021222324252627282930313233package com.weyoung.platform.quartz.schedule;import org.quartz.*;import org.quartz.impl.StdSchedulerFactory;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.text.SimpleDateFormat;import java.util.Date;/** * @Author Mr.wang * @Description * @Date 2019/6/2 */public class QuartzJobInit implements Job &#123; private static final Logger LOGGER = LoggerFactory.getLogger(QuartzJobInit.class); @Override public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123; Date date = new Date(); SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); String format = sf.format(date); run(format); &#125; public void run(String format) &#123; LOGGER.info("QuartzJobInit.execute.run:&#123;&#125;", format); System.out.println("QuartzJobInit.execute.run:&#123;&#125;" + format); &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738package com.weyoung.platform.quartz.schedule;import org.quartz.*;import org.quartz.impl.StdSchedulerFactory;import java.text.SimpleDateFormat;import java.util.Date;/** * @功能描述: * @时间: 2019/6/22 23:43 * @作者: wanglixia */public class TestJob &#123; public static void main(String[] args) &#123; // 创建一个JobDetail实例，将该实例与QuartzJobInit的Class进行绑定 JobDetail jobDetail = JobBuilder.newJob(QuartzJobInit.class).withIdentity("myJob", "group1").build(); // 创建一个Trigger实例，用来触发Job去执行 Trigger trigger = TriggerBuilder.newTrigger().withIdentity("myTrigger", "triggerGroup1") .startNow() .withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(2).repeatForever()).build(); // 创建Scheduler实例， StdSchedulerFactory factory = new StdSchedulerFactory(); Scheduler scheduler = null; try &#123; scheduler = factory.getScheduler(); scheduler.start(); Date date = new Date(); SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); String format = sf.format(date); System.out.println("QuartzJobInit.main" + format);// LOGGER.info("QuartzJobInit.main", format); scheduler.scheduleJob(jobDetail, trigger); &#125; catch (SchedulerException e) &#123; e.printStackTrace(); &#125; &#125;&#125; Job 接口的实现 Job接口中只有一个execute方法，然后在其中写业务逻辑； 生命周期：每次调度器Scheduler在执行job时，会在调用execute方法之前创建一个新的job实例；调用完成后，关联的job对象实例会被释放，释放的实例会被垃圾回收机制回收。 JobDetail为Job实例提供了许多设置属性，以及JobDataMap成员变量属性，用来存储特定Job实例的状态信息，调度器需要借助JobDetail对象来添加Job实例。重要属性如下： name group 任务所在组 jobClass 任务实现类 jobDataMap JobExecutionContext 当Scheduler调用一个Job时，就会将JobExecutionContext传递给Job的execute方法； Job能通过JobExecutionContext对象访问到Quartz运行时候的环境以及Job本身的明细数据。 JobDataMap 在进行任务调度时JobDataMap存储在JobExecutionContext中，非常方便获取； JobDataMap可以用来装载任何可序列化的数据对象，当job实例对象被执行时这些参数对象会传递给它； JobDataMap实现了JDK的Map接口，并且添加了一些非常方便的方法用来存取基本数据类型。JobDataMap获取方式：从Map中直接获取； 方式一：JobDataMap 添加数据：1234567891011121314// 创建一个JobDetail实例，将该实例与QuartzJobInit的Class进行绑定JobDetail jobDetail = JobBuilder.newJob(QuartzJobInit.class) .withIdentity("myJob", "group1") // 传参 .usingJobData("message", "hello myJob") .usingJobData("FloatJobValue", 3.14F) .build();// 创建一个Trigger实例，用来触发Job去执行Trigger trigger = TriggerBuilder.newTrigger() .withIdentity("myTrigger", "triggerGroup1") .usingJobData("message", "hello myTrigger") .usingJobData("DoubleTriggerValue", 2.0D) .startNow() .withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(2).repeatForever()).build(); 获取数据：1234567891011JobKey key = context.getJobDetail().getKey(); System.out.println("key============&gt;" + key.getName()+":" + key.getGroup()); TriggerKey triggerKey = context.getTrigger().getKey(); System.out.println("triggerKey============&gt;" + triggerKey.getName()+":" + triggerKey.getGroup()); JobDataMap jobDataMap = context.getJobDetail().getJobDataMap(); JobDataMap dataMap = context.getTrigger().getJobDataMap(); String message = jobDataMap.getString("message"); float floatJobValue = jobDataMap.getFloatValue("FloatJobValue"); String triggerMsg = dataMap.getString("message"); double doubleJobValue = dataMap.getDoubleValue("DoubleTriggerValue"); 方式二：getMergedJobDataMap Trigger和JobDetail中有相同的key时，Trigger中的值就会覆盖掉JobDetail中的值。 Job实现类中添加setter方法对应JobDataMap的键值（Quartz框架默认的JobFactory实现类在初始化job实例对象时会自动调用这些setter方法）。 直接定义属性，添加getter和setter方法即可；1JobDataMap mergedJobDataMap = context.getMergedJobDataMap(); 触发器 Trigger重要的两个实现类 CronTriggerImpl 基于日历的作业调度器，而不是像SimpleTrigger那样精确指定间隔时间，比SimpleTrigger更常用； CRON表达式：L可以和W一起使用；周字段的英文字母不区分大小写； SimpleTriggerImpl 在一个指定时间段内执行一次作业任务；或者在指定时间间隔内多次执行作业任务； 重复次数可以为0，正整数或是SimpleTrigger.REPEAT_INDEFINITELY常量值。 重复时间间隔必须是0或者长整数； 一旦制定了endAt，那么它就会覆盖重复次数参数的效果。endAt优先于withRepeatCount；重要属性 JobKey：job实例的标识，触发器被触发时，该jobkey指定的实例会被触发执行； StartTime：触发器首次被触发的时间；类型java.util.Date； EndTime：触发器不再被触发的时间；类型java.util.Date； 调度器SchedulerScheduler-工厂模式 SchedulerFactory创建的； StdSchedulerFactory； 使用一组参数（java.util.Properties）来创建和初始化Quartz调度器； 配置参数一般在quartz.properties中 调用getScheduler方法就能创建和初始化调度器对象； DirectSchedulerFactory； 主要函数 Date scheduleJob(JobDetail jobDetail, Trigger trigger);绑定jobDetail和trigger注册进scheduler中；返回最近一次即将执行的时间； void start(); // 启动 void standby();// 挂起，挂起后可通过start恢复 void shutdown();// 关闭，不能恢复执行，强行恢复报出异常 shutdown(true):// 等待所有正在执行的job执行完毕之后，再关闭scheduler； shutdown(false):// 表示直接关闭scheduler quartz.properties 文档的位置及加载顺序；优先读取工程中自定义的，没有的话去读quartz中的文件； 组成部分 调度器属性 org.quartz.scheduler.instanceName：用来区分特定的调度器实例，可以按照功能用途来给调度器起名； org.quartz.scheduler.instanceId：和前者一样，也允许任何字符串，但这个值必须在所有调度器实例中是唯一的，尤其是在一个集群当中，作为集群的唯一key。如果想让Quartz生成这个值的话，可以设置为AUTO; 线程池属性 threadCount：指定线程数，至少为1； threadPriority：线程的优先级； org.quartz.threadPool.class：线程池的实现类； 作业存储设置 描述了在调度器实例的生命周期中，Job和Trigger的信息是如何被存储的； 插件配置 满足特定需求用到的Quartz插件的配置。 详细配置如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495# Default Properties file for use by StdSchedulerFactory# to create a Quartz Scheduler Instance, if a different# properties file is not explicitly specified.## ===========================================================================# Configure Main Scheduler Properties 调度器属性# ===========================================================================org.quartz.scheduler.instanceName: DefaultQuartzSchedulerorg.quartz.scheduler.instanceid:AUTOorg.quartz.scheduler.rmi.export: falseorg.quartz.scheduler.rmi.proxy: falseorg.quartz.scheduler.wrapJobExecutionInUserTransaction: false# =========================================================================== # Configure ThreadPool 线程池属性 # ===========================================================================#线程池的实现类（一般使用SimpleThreadPool即可满足几乎所有用户的需求）org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool#指定线程数，至少为1（无默认值）(一般设置为1-100直接的整数合适)org.quartz.threadPool.threadCount: 10#设置线程的优先级（最大为java.lang.Thread.MAX_PRIORITY 10，最小为Thread.MIN_PRIORITY 1，默认为5）org.quartz.threadPool.threadPriority: 5#设置SimpleThreadPool的一些属性#设置是否为守护线程#org.quartz.threadpool.makethreadsdaemons = false#org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true#org.quartz.threadpool.threadsinheritgroupofinitializingthread=false#线程前缀默认值是：[Scheduler Name]_Worker#org.quartz.threadpool.threadnameprefix=swhJobThead;# 配置全局监听(TriggerListener,JobListener) 则应用程序可以接收和执行 预定的事件通知# ===========================================================================# Configuring a Global TriggerListener 配置全局的Trigger监听器# MyTriggerListenerClass 类必须有一个无参数的构造函数，和 属性的set方法，目前2.2.x只支持原始数据类型的值（包括字符串）# ===========================================================================#org.quartz.triggerListener.NAME.class = com.swh.MyTriggerListenerClass#org.quartz.triggerListener.NAME.propName = propValue#org.quartz.triggerListener.NAME.prop2Name = prop2Value# ===========================================================================# Configuring a Global JobListener 配置全局的Job监听器# MyJobListenerClass 类必须有一个无参数的构造函数，和 属性的set方法，目前2.2.x只支持原始数据类型的值（包括字符串）# ===========================================================================#org.quartz.jobListener.NAME.class = com.swh.MyJobListenerClass#org.quartz.jobListener.NAME.propName = propValue#org.quartz.jobListener.NAME.prop2Name = prop2Value# =========================================================================== # Configure JobStore 存储调度信息（工作，触发器和日历等）# ===========================================================================# 信息保存时间 默认值60秒org.quartz.jobStore.misfireThreshold: 60000#保存job和Trigger的状态信息到内存中的类org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore# =========================================================================== # Configure SchedulerPlugins 插件属性 配置# ===========================================================================# 自定义插件 #org.quartz.plugin.NAME.class = com.swh.MyPluginClass#org.quartz.plugin.NAME.propName = propValue#org.quartz.plugin.NAME.prop2Name = prop2Value#配置trigger执行历史日志（可以看到类的文档和参数列表）org.quartz.plugin.triggHistory.class = org.quartz.plugins.history.LoggingTriggerHistoryPlugin org.quartz.plugin.triggHistory.triggerFiredMessage = Trigger &#123;1&#125;.&#123;0&#125; fired job &#123;6&#125;.&#123;5&#125; at: &#123;4, date, HH:mm:ss MM/dd/yyyy&#125; org.quartz.plugin.triggHistory.triggerCompleteMessage = Trigger &#123;1&#125;.&#123;0&#125; completed firing job &#123;6&#125;.&#123;5&#125; at &#123;4, date, HH:mm:ss MM/dd/yyyy&#125; with resulting trigger instruction code: &#123;9&#125; #配置job调度插件 quartz_jobs(jobs and triggers内容)的XML文档 #加载 Job 和 Trigger 信息的类 （1.8之前用：org.quartz.plugins.xml.JobInitializationPlugin）org.quartz.plugin.jobInitializer.class = org.quartz.plugins.xml.XMLSchedulingDataProcessorPlugin#指定存放调度器(Job 和 Trigger)信息的xml文件，默认是classpath下quartz_jobs.xmlorg.quartz.plugin.jobInitializer.fileNames = my_quartz_job2.xml #org.quartz.plugin.jobInitializer.overWriteExistingJobs = false org.quartz.plugin.jobInitializer.failOnFileNotFound = true #自动扫描任务单并发现改动的时间间隔,单位为秒org.quartz.plugin.jobInitializer.scanInterval = 10#覆盖任务调度器中同名的jobDetail,避免只修改了CronExpression所造成的不能重新生效情况org.quartz.plugin.jobInitializer.wrapInUserTransaction = false# =========================================================================== # Sample configuration of ShutdownHookPlugin ShutdownHookPlugin插件的配置样例# ===========================================================================#org.quartz.plugin.shutdownhook.class = \org.quartz.plugins.management.ShutdownHookPlugin#org.quartz.plugin.shutdownhook.cleanShutdown = true## Configure RMI Settings 远程服务调用配置##如果你想quartz-scheduler出口本身通过RMI作为服务器，然后设置“出口”标志true(默认值为false)。#org.quartz.scheduler.rmi.export = false#主机上rmi注册表(默认值localhost)#org.quartz.scheduler.rmi.registryhost = localhost#注册监听端口号（默认值1099）#org.quartz.scheduler.rmi.registryport = 1099#创建rmi注册，false/never：如果你已经有一个在运行或不想进行创建注册# true/as_needed:第一次尝试使用现有的注册，然后再回来进行创建# always:先进行创建一个注册，然后再使用回来使用注册#org.quartz.scheduler.rmi.createregistry = never#Quartz Scheduler服务端端口，默认是随机分配RMI注册表#org.quartz.scheduler.rmi.serverport = 1098#true:链接远程服务调度(客户端),这个也要指定registryhost和registryport，默认为false# 如果export和proxy同时指定为true，则export的设置将被忽略#org.quartz.scheduler.rmi.proxy = false 基于Maven的SpringMvc工程整合Quartz使用Quartz配置作业 MethodInvokingJobDetailFactoryBean； JobDetailFactoryBean：比较灵活，支持给作业传递数据； Quartz相关文档 官网地址：http://www.quartz-scheduler.org/ 表结构下载地址：快速下载：链接：https://pan.baidu.com/s/1IpNn3yAiFpwi8kbywY1Ppg 提取码：zqe0 相关链接本文整理自：慕课网教程Java定时任务调度工具详解之Quartz篇:https://www.imooc.com/learn/846]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Quartz</tag>
        <tag>Spring Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Idea常用插件整理]]></title>
    <url>%2F%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%2F%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-Idea-%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6.html</url>
    <content type="text"><![CDATA[idea好用的插件BashSupport、.ignore、Lombok、Jrebel、Database Navigator、CSV Plugin、Vue.js、FindBugs-IDEA、GsonFormat、CMD Support、Alibaba Java Coding Guidelines、PlantUML integration、Mongo Plugin、YAML/Ansible support、Git Flow Integration、Swagger、GitToolBox、WakaTime、Translation、Free MyBatis plugin、GenerateSerialVersionUID、JavaDoc、JUnitGenerator V2.​0、nginx Support、Jenkins Control Plugin、QAPlug、QAPlug-FindBugs、Bootstrap、SQL Query Plugin、SoapUI IntelliJ Plugin、Sql Generator、Jira Browser]]></content>
  </entry>
  <entry>
    <title><![CDATA[SSM框架整合笔记（十）注解方式配置Quartz定时器]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B09-%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AEQuartz%E5%AE%9A%E6%97%B6%E5%99%A8.html</url>
    <content type="text"><![CDATA[Quartz定时器介紹 Quartz定时器环境配置 Quartz 2.3.0 pom.xml 添加依赖12345678910111213&lt;quartz.version&gt;2.3.0&lt;/quartz.version&gt;&lt;!--Quartz定时器的依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt; &lt;artifactId&gt;quartz&lt;/artifactId&gt; &lt;version&gt;$&#123;quartz.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt; &lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt; &lt;version&gt;$&#123;quartz.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;!--Quartz定时器的依赖--&gt; 定时器调度类1234567891011121314@Componentpublic class MainSchedule &#123; private static final Logger logger = LoggerFactory.getLogger(MainSchedule.class); public MainSchedule() &#123; logger.info("-------------------------定时器MainSchedule创建成功-------------------------"); &#125; @Scheduled(cron = "0/1 * * * * ?") public static void run() &#123; logger.info("-------------------------定时器调度start-------------------------"); logger.info("-------------------------定时器调度end-------------------------"); &#125;&#125; spring-quartz.xml配置文件添加1234567891011121314&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"&gt; &lt;description&gt;Quartz定时器配置&lt;/description&gt; &lt;context:component-scan base-package="com.weyoung.platform.quartz.schedule"/&gt; &lt;!--开启@Scheduled注解--&gt; &lt;task:annotation-driven/&gt;&lt;/beans&gt; ssm项目从数据库中动态获取定时器配置；定时任务工具类QuartzManager（主要是对quartz的新增、更改、关闭等）]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>工具</tag>
        <tag>框架</tag>
        <tag>ssm</tag>
        <tag>quartz</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架整合笔记（九）Shiro介绍]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B08-Shiro%E4%BB%8B%E7%BB%8D.html</url>
    <content type="text"><![CDATA[Shiro整体架构 Authenticator：认证器，管理登录登出； Authorizer：授权器； SessionManager：Session管理器，可以不借助web容器使用session； SessionDAO：session的增删改查； CacheManager：缓存管理机制，缓存角色数据和权限数据； Realm：Shiro和数据库数据源之间的桥梁，shiro通过Realm获取角色数据，权限数据； cryptography：加密。 主体提交请求-&gt;调用Authenticator-&gt;通过Realm获取认证信息； Shiro基本概念如上文说明，认证（Authentication）和授权（Authorization）特别像的两个词，我自己的理解是认证简单说就是证明王大锤是王大锤，授权就是说明王大锤的职能，比如砸墙。如有不当之处，请通过评论或公众号等联系方式联系笔者纠正，谢谢。 Shiro认证认证过程： 创建SecurityManager； 主体提交认证； SecurityManager认证； Authenticator认证； Realm验证； Shiro授权 创建SecurityManager; 主体授权； SecurityManager授权； Authorizer授权； Realm获取角色权限数据； 内置Realm 内置Realm： a. IniRealm b. JdbcRealm * 在不设置查询语句的时候，默认有查询语句； * 权限查询开关默认为关闭，需要打开； 自定义Realm参考下文的具体代码 Shiro加密 Shiro散列配置 HashedCredentialsMatcher 自定义Realm中使用散列 盐的使用 Shiro集成SpringShiro基本配置与用户登录一、添加shiro相关依赖pom.xml 123456789101112131415161718192021&lt;shiro.version&gt;1.3.2&lt;/shiro.version&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-core&lt;/artifactId&gt; &lt;version&gt;$&#123;shiro.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt; &lt;version&gt;$&#123;shiro.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-web&lt;/artifactId&gt; &lt;version&gt;$&#123;shiro.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt; &lt;version&gt;$&#123;shiro.version&#125;&lt;/version&gt;&lt;/dependency&gt; 二、配置Shiro过滤器web.xml123456789101112131415&lt;!-- ============Shiro过滤器start============--&gt;&lt;filter&gt; &lt;description&gt;shiro 权限拦截&lt;/description&gt; &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;targetFilterLifecycle&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;!-- ============Shiro过滤器end============--&gt; 三、添加Shiro的配置 配置shiroFilter过滤器shiroFilter； 自定义的表单过滤器、角色、权限过滤器sysRolesFilter； 配置权限管理器securityManager 自定义的userRealm spring-shiro.xml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;description&gt;Shiro配置&lt;/description&gt;&lt;!-- shiro的过滤器工厂，id需要配置的和web.xml中配置的一样 --&gt;&lt;bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean"&gt; &lt;property name="securityManager" ref="securityManager"/&gt; &lt;!--配置登录请求地址--&gt; &lt;property name="loginUrl" value="/index"/&gt; &lt;!--配置成功认证后跳转的url--&gt; &lt;property name="successUrl" value="/sys/home"/&gt; &lt;!--认证未成功【无权限访问】跳转的界面，可配置为403请求地址--&gt; &lt;property name="unauthorizedUrl" value="/error403"/&gt; &lt;!--引入自己定义的重写了表单过滤器的过滤器--&gt; &lt;property name="filters"&gt; &lt;map&gt; &lt;entry key="authc" value-ref="formAuthenticationFilter"/&gt; &lt;entry key="roles" value-ref="sysRolesFilter"/&gt; &lt;/map&gt; &lt;/property&gt; &lt;!-- 将权限配置为动态加载 --&gt; &lt;property name="filterChainDefinitionMap" ref="chainDefinitionSectionMetaSource"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean class="com.weyoung.platform.shiro.filter.SysRolesFilter" id="sysRolesFilter"/&gt;&lt;bean id="chainDefinitionSectionMetaSource" class="com.weyoung.platform.shiro.service.ChainDefinitionSectionMetaSource"&gt; &lt;!-- 定义默认的URL权限 --&gt; &lt;property name="filterChainDefinitions"&gt; &lt;value&gt; &lt;!-- anon表示此地址不需要任何权限即可访问 --&gt; /=anon /assets/**=anon /webservice/**=anon /view/system/**=anon /view/templates/**=anon /sys/login=anon /error403=anon /swagger-ui.html=anon /webjars/**=anon /druid/**=authc /errorException=anon /sys/logout=anon &lt;!--/sys/home=anon--&gt; /sys/home=authc /sys/home=roles["admin"] /**=authc &lt;/value&gt; &lt;/property&gt;&lt;/bean&gt;&lt;!-- 缓存管理器 使用Ehcache实现 --&gt;&lt;bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"&gt; &lt;property name="cacheManager" ref="ehCacheManager"/&gt;&lt;/bean&gt;&lt;!-- 权限管理器 --&gt;&lt;bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"&gt; &lt;property name="realm" ref="userRealm"/&gt; &lt;property name="cacheManager" ref="shiroCacheManager"/&gt;&lt;/bean&gt;&lt;!-- 自定义用于授权和认证的realm，init-method：初始化方法 --&gt;&lt;bean id="userRealm" class="com.weyoung.platform.shiro.realm.SystemAuthRealm"&gt; &lt;!-- 定义需要缓存的认证数据、授权数据，缓存区的名字就是ehcache.xml 自定义cache的name --&gt; &lt;property name="authorizationCacheName" value="authCache"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!--重写的表单过滤器--&gt;&lt;bean id="formAuthenticationFilter" class="com.weyoung.platform.shiro.filter.MyFormAuthenticationFilter"&gt; &lt;property name="loginUrl" value="/"/&gt;&lt;/bean&gt; spring-mvc.xml 123456789101112&lt;!-- 保证实现了Shiro内部lifecycle函数的bean执行，不能和mvc的配置分开，否则不生效 --&gt;&lt;bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/&gt;&lt;!-- AOP式方法级权限检查 ，启用了ioc容器中使用shiro注解 --&gt;&lt;bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"&gt; &lt;property name="proxyTargetClass" value="true"/&gt;&lt;/bean&gt;&lt;bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"&gt; &lt;property name="securityManager" ref="securityManager"/&gt;&lt;/bean&gt; 四、自定义Realm主要用于从数据库中动态加载角色、权限信息shiro并不是在认证之后就马上对用户授权,而是在用户认证通过之后,接下来要访问的资源或者目标方法需要权限的时候才会调用doGetAuthorizationInfo()方法,进行授权. Realm：域，是Shiro和应用程序之间的连接器。Shiro从Realm获取权限数据（如用户、角色、权限及其之间的关系），SecurityManager验证用户身份时，需要使用Realm的认证器确定用户身份合法，使用Realm的授权器获取用户的角色和权限。 在前端发起登录请求时，执行subject.login(token);代码时， 本文使用示例。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/*** 用户验证* 通过账户信息返回认证信息** @param token* @return* @throws AuthenticationException*/@Overrideprotected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123; logger.debug("------------Shiro开始验证------------"); // 1.获取登录的username String userName = (String) token.getPrincipal(); // 2.根据用户输入的账号username获取用户的信息 UserLogin userLogin = loginDao.getUserLoginByUserName(userName); // 是否此用户是否存在 if (userLogin == null) &#123; throw new UnknownAccountException(LOGIN_PASS_ERROR_MSG); &#125; else &#123; password = userLogin.getPassword(); &#125; // 检测账号是否被锁定// if (Boolean.TRUE.equals(userLogin.getLocked())) &#123;// throw new LockedAccountException();// &#125; String credentials = password; // 3. 设置密码盐值// String salt = "weyoung";// ByteSource credentialsSalt = new Md5Hash(salt); String realmName = getName(); SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(userName, credentials, realmName); // 4. 身份认证成功，返回认证信息 logger.debug("------------Shiro完成验证------------"); return info;&#125;/*** 授权并返回权限信息** @param principalCollection* @return*/@Overrideprotected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123; logger.debug("------------Shiro开始授权------------"); // 1.从shiro中取出用户对象 String userName = (String) principalCollection.getPrimaryPrincipal(); // 2.从数据库或者缓存中加载用户的角色标识和权限列表 List&lt;SysRolePermission&gt; rolePermissions = this.getRolesByUserName(userName); List&lt;String&gt; roleKeys = rolePermissions.stream().map(SysRolePermission::getRoleKey).distinct().collect(Collectors.toList()); List&lt;String&gt; permissions = rolePermissions.stream().map(SysRolePermission::getPerms).distinct().collect(Collectors.toList()); SimpleAuthorizationInfo info = new SimpleAuthorizationInfo(); info.addStringPermissions(permissions); info.addRoles(roleKeys); logger.debug("------------Shiro完成授权------------"); return info;&#125; 五、登录实现12345678910111213141516171819202122@RequestMapping(value = "/sys/login", method = RequestMethod.POST)public String systemLogin(HttpServletRequest request, HttpServletResponse response) throws Exception &#123; String userName = request.getParameter("userName"); String password = request.getParameter("password"); Subject currentUser = SecurityUtils.getSubject(); UsernamePasswordToken token = new UsernamePasswordToken(userName, password); String viewName = REDIRECT_VIEW_URL_INDEX; try &#123; // 这块执行shiro的登录，进入上面描述的自定义的Realm中的认证方法中 currentUser.login(token); &#125; catch (AuthenticationException e) &#123; if (e instanceof IncorrectCredentialsException) &#123; logger.error("登录失败!&#123;&#125;", LOGIN_PASS_ERROR_MSG); &#125; return viewName; &#125; // 获取用户信息存入session，通过Shiro管理的session，要获取依然必须通过Shiro UserInfo userInfo = loginService.getSysUserByUserName(userName); currentUser.getSession().setAttribute(SESSION_DEFAULT, userInfo); // 登录成功 return REDIRECT_VIEW_URL_HOME;&#125; 六、Shiro过滤器 Shiro内置过滤器 认证相关的过滤器：anon：不需要任何认证,authBasic：,authc：需要认证后访问,user,logout perms,roles,ssl,port 添加过滤器123456789101112131415161718public class RolesOrFilter extends AuthorizationFilter &#123; @Override protected boolean isAccessAllowed(ServletRequest servletRequest, ServletResponse servletResponse, Object o) throws Exception &#123; Subject subject = getSubject(servletRequest, servletResponse); String[] roles = (String[]) o; if (roles == null || roles.length == 0) &#123; return true; &#125; for (String role : roles) &#123; if (subject.hasRole(role)) &#123; return true; &#125; &#125; return false; &#125;&#125; 七、通过注解方式进行授权 @RequiresRoles:都可以传入多个参数 @RequiresPermissions: pom中引入 12345&lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt; &lt;version&gt;1.8.13&lt;/version&gt;&lt;/dependency&gt; 如果需要实现通过注解配置授权，需要在spring-mvc.xml中添加如下代码。注意：以下的注解代码尽量不要和springMVC的配置分开，否则会不生效 12345&lt;aop:config proxy-target-class="true"&gt;&lt;bean class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/&gt;&lt;bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"&gt; &lt;property name="securityManager" ref="securityManager"/&gt;&lt;/bean&gt; controller中添加示例：123456789101112131415@RequiresRoles("admin")@RequestMapping(value = "/testRole", method = RequestMethod.GET)@ResponseBodypublic String testRole() &#123; System.out.println("testRole"); return "testRole success";&#125;@RequiresPermissions("admin1")@RequestMapping(value = "/testRole1", method = RequestMethod.GET)@ResponseBodypublic String testRole1() &#123; System.out.println("testRole1"); return "testRole1 success";&#125; Shiro数据库表结构设计 Shiro会话管理和缓存管理Shiro会话(Session)管理 shiro session 管理 SessionManager：session管理器、SessionDAO：session增删改查 通过Redis实现session共享 Redis实现session共享存在的问题 pom中添加： 12345&lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.9.0&lt;/version&gt;&lt;/dependency&gt; 添加RedisSessionDao123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869public class RedisSessionDao extends AbstractSessionDAO &#123; @Resource private JedisUtil jedisUtil; private final String SHIRO_SESSION_PREFIX = "lucifer-session:"; private byte[] getKey(String key) &#123; return (SHIRO_SESSION_PREFIX + key).getBytes(); &#125; private void saveSession(Session session) &#123; if (session != null &amp;&amp; session.getId() != null) &#123; byte[] key = getKey(session.getId().toString()); byte[] value = SerializationUtils.serialize(session); jedisUtil.set(key, value); jedisUtil.expire(key, 600); &#125; &#125; @Override protected Serializable doCreate(Session session) &#123; Serializable sessionId = generateSessionId(session); // 对session和sessionId进行捆绑 assignSessionId(session, sessionId); saveSession(session); return sessionId; &#125; @Override protected Session doReadSession(Serializable sessionId) &#123; System.out.println("doReadSession"); if (sessionId == null) &#123; return null; &#125; byte[] key = getKey(sessionId.toString()); byte[] value = jedisUtil.get(key); return (Session) SerializationUtils.deserialize(value); &#125; @Override public void update(Session session) throws UnknownSessionException &#123; saveSession(session); &#125; @Override public void delete(Session session) &#123; if (session == null || session.getId() == null) &#123; return; &#125; byte[] key = getKey(session.getId().toString()); jedisUtil.del(key); &#125; @Override public Collection&lt;Session&gt; getActiveSessions() &#123; Set&lt;byte[]&gt; keys = jedisUtil.keys(SHIRO_SESSION_PREFIX); Set&lt;Session&gt; sessions = new HashSet&lt;&gt;(); if (CollectionUtils.isEmpty(keys)) &#123; return sessions; &#125; for (byte[] key : keys ) &#123; Session session = (Session) SerializationUtils.deserialize(jedisUtil.get(key)); sessions.add(session); &#125; return sessions; &#125;&#125; 添加spring-redis.xml文件，内容：12345678910111213&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt; &lt;bean class="redis.clients.jedis.JedisPool" id="jedisPool"&gt; &lt;constructor-arg ref="jedisPoolConfig"/&gt; &lt;constructor-arg value="127.0.0.1"/&gt; &lt;constructor-arg value="6379"/&gt; &lt;/bean&gt; &lt;bean class="redis.clients.jedis.JedisPoolConfig" id="jedisPoolConfig"/&gt;&lt;/beans&gt; spring.xml中添加如下代码;123456789101112&lt;!-- 使用自定义的sessionManager --&gt;&lt;bean class="com.lucifer.session.CustomSessionManager" id="sessionManager"&gt; &lt;property name="sessionDAO" ref="redisSessionDao"/&gt;&lt;/bean&gt;&lt;bean class="com.lucifer.session.RedisSessionDao" id="redisSessionDao"/&gt;&lt;!--创建securityManager对象--&gt;&lt;bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"&gt; ....添加如下代码.... &lt;property name="sessionManager" ref="sessionManager"/&gt;&lt;/bean&gt; 解决Redis实现session共享存在的问题：多次访问redis；CustomSessionManager.java中的代码 123456789101112131415161718192021222324252627public class CustomSessionManager extends DefaultWebSessionManager &#123; /** * 解决多次访问redis * @param sessionKey * @return * @throws UnknownSessionException */ @Override protected Session retrieveSession(SessionKey sessionKey) throws UnknownSessionException &#123; Serializable sessionId = getSessionId(sessionKey); ServletRequest request = null; if (sessionKey instanceof WebSessionKey) &#123; request = ((WebSessionKey) sessionKey).getServletRequest(); &#125; if (request != null &amp;&amp; sessionId != null) &#123; Session session = (Session) request.getAttribute(sessionId.toString()); if (session != null)&#123; return session; &#125; &#125; Session session = super.retrieveSession(sessionKey); if (request != null &amp;&amp; sessionId != null) &#123; request.setAttribute(sessionId.toString(), session); &#125; return session; &#125;&#125; Shiro使用Redis实现缓存管理 CacheManeger、Cache可以使用echache或者shiro实现。 Redis实现CacheManager 添加RedisCacheManager.java： 123456789public class RedisCacheManager implements CacheManager &#123; @Resource private RedisCache redisCache; @Override public &lt;K, V&gt; Cache&lt;K, V&gt; getCache(String s) throws CacheException &#123; return redisCache; &#125;&#125; 添加RedisCache.java： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566@Componentpublic class RedisCache&lt;K, V&gt; implements Cache&lt;K, V&gt; &#123; @Resource private JedisUtil jedisUtil; private final String CACHE_PREFIX = "lucifer-cache:"; private byte[] getKey(K k) &#123; if (k instanceof String) &#123; return (CACHE_PREFIX + k).getBytes(); &#125; return SerializationUtils.serialize(k); &#125; @Override public V get(K k) throws CacheException &#123; System.out.println("从redis中获取数据"); byte[] value = jedisUtil.get(getKey(k)); if (value != null) &#123; return (V) SerializationUtils.deserialize(value); &#125; return null; &#125; @Override public V put(K k, V v) throws CacheException &#123; byte[] key = getKey(k); byte[] value = SerializationUtils.serialize(v); jedisUtil.set(key, value); jedisUtil.expire(key, 600); return v; &#125; @Override public V remove(K k) throws CacheException &#123; byte[] key = getKey(k); byte[] value = jedisUtil.get(key); jedisUtil.del(key); if (value != null) &#123; return (V) SerializationUtils.deserialize(value); &#125; return null; &#125; @Override public void clear() throws CacheException &#123; // &#125; @Override public int size() &#123; return 0; &#125; @Override public Set&lt;K&gt; keys() &#123; return null; &#125; @Override public Collection&lt;V&gt; values() &#123; return null; &#125;&#125; spring.xml中添加配置 1234567&lt;bean class="com.lucifer.cache.RedisCacheManager" id="cacheManager"/&gt;&lt;!--创建securityManager对象--&gt;&lt;bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"&gt; ....省略.... &lt;property name="cacheManager" ref="cacheManager"/&gt;&lt;/bean&gt; Shiro自动登录 Shiro RememberMe spring.xml中添加1234567&lt;bean class="org.apache.shiro.web.mgt.CookieRememberMeManager" id="cookieRememberMeManager"&gt; &lt;property name="cookie" ref="cookie"/&gt;&lt;/bean&gt;&lt;bean class="org.apache.shiro.web.servlet.SimpleCookie" id="cookie"&gt; &lt;constructor-arg value="rememberMe"/&gt; &lt;property name="maxAge" value="200000"/&gt;&lt;/bean&gt; controller中的示例代码：1234567@RequestMapping(value = "/subLogin", method = RequestMethod.POST, produces = "application/json;charset=utf-8")@ResponseBodypublic String subLogin(User user) &#123;........ token.setRememberMe(user.isRememberMe());........&#125; 遇到问题问题一 Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘securityManager’ defined in class path resource [spring/spring-shiro.xml]: Cannot resolve reference to bean ‘shiroCacheManager’ while setting bean property ‘cacheManager’; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘shiroCacheManager’ defined in class path resource [spring/spring-shiro.xml]: Initialization of bean failed; nested exception is org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type [org.springframework.cache.ehcache.EhCacheCacheManager] to required type [net.sf.ehcache.CacheManager] for property ‘cacheManager’; nested exception is java.lang.IllegalStateException: Cannot convert value of type [org.springframework.cache.ehcache.EhCacheCacheManager] to required type [net.sf.ehcache.CacheManager] for property ‘cacheManager’: no matching editors or conversion strategy found 处理方式：spring-ehcache.xml从12345678910111213&lt;!--Ehcache配置--&gt;&lt;!-- 启用缓存 --&gt;&lt;cache:annotation-driven cache-manager="ehCacheManager"/&gt;&lt;!-- 声明缓存管理器 --&gt;&lt;bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"&gt; &lt;property name="configLocation" value="classpath:ehcache.xml" /&gt; &lt;!-- true:一个cacheManager对象共享，false：多个对象独立 --&gt; &lt;property name="shared" value="true"/&gt; &lt;!-- 这里是关键！！！没有必错 --&gt;&lt;/bean&gt;&lt;bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"&gt; &lt;property name="cacheManager" ref="ehcache"/&gt;&lt;/bean&gt; 修改为 123456&lt;!-- 声明缓存管理器 --&gt;&lt;bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"&gt; &lt;property name="configLocation" value="classpath:ehcache.xml" /&gt; &lt;!-- true:一个cacheManager对象共享，false：多个对象独立 --&gt; &lt;property name="shared" value="true"/&gt; &lt;!-- 这里是关键！！！没有必错 --&gt;&lt;/bean&gt; spring-shiro.xml 12345678910&lt;!-- 缓存管理器 使用Ehcache实现 --&gt;&lt;bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"&gt; &lt;property name="cacheManager" ref="ehCacheManager" /&gt;&lt;/bean&gt;&lt;!-- 权限管理器 --&gt;&lt;bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"&gt; &lt;property name="realm" ref="userRealm"/&gt; &lt;property name="cacheManager" ref="shiroCacheManager"/&gt;&lt;/bean&gt; 问题二 2019-04-11 23:16:31,395 ERROR [RMI TCP Connection(4)-127.0.0.1] org.springframework.web.context.ContextLoader - Context initialization failedorg.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘shiroFilter’ defined in class path resource [spring/spring-shiro.xml]: Cannot resolve reference to bean ‘formAuthenticationFilter’ while setting bean property ‘filters’ with key [TypedStringValue: value [authc], target type [null]]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘formAuthenticationFilter’ defined in class path resource [spring/spring-shiro.xml]: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property ‘loginUrl’ of bean class [com.weyoung.platform.shiro.filter.FormAuthenticationFilter]: Bean property ‘loginUrl’ is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? 相关 https://www.cnblogs.com/rxl007/p/5787433.html;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>工具</tag>
        <tag>框架</tag>
        <tag>ssm</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bootstrap-table使用]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%2FBootstrap%2FBootstrap-%E6%8F%92%E4%BB%B6-bootstrap-table-export.html</url>
    <content type="text"><![CDATA[Bootstrap-Table导出插件bootstrap-table-export使用方式 一、Bootstrap-table-export插件使用 二、Bootstrap-table 表头和表格错位问题 三、表格添加自定义按钮 四、Bootstrap中tab页及插件使用 使用方式一、Bootstrap-table-export插件使用Bootstrap-table-export插件下载：https://bootstrap-table.com/docs；在该文档的extensions目录下，可以看到可以使用的依赖插件列表，其中就包括Export文件。 导出支持以下格式：[‘json’, ‘xml’, ‘png’, ‘csv’, ‘txt’, ‘sql’, ‘doc’, ‘excel’,’xlsx’, ‘pdf’]默认支持，其他的需要单独引入插件：[‘json’, ‘xml’, ‘csv’, ‘txt’, ‘sql’, ‘excel’] 找到dist\extensions\export\bootstrap-table-export.min.js文件，引入项目中； 使用该插件还需要引入以下依赖： tableExport.jquery.plugin：下载地址：https://github.com/hhurz/tableExport.jquery.plugin； 把tableExport.min.js文件引入项目中； 解决bootstraptable导出excel提示文件名跟格式不匹配问题，还需要引入上面下载的项目中的 \libs\FileSaver\FileSaver.min.js； jquery.base64.js：下载地址：http://plugins.jquery.com/base64/，把jquery.base64.js文件引入项目中； xlsx.full.min.js：支持的下载格式，如 [‘json’, ‘xml’, ‘csv’, ‘txt’, ‘sql’, ‘excel’]，下载地址：https://github.com/handevelop/js-xlsx-master; TableExport插件依赖于jQuery（1.2.1+），FileSaver.js。为了支持.xlsx（Office Open XML SpreadsheetML Format）格式，你必须在 FileSaver.js 和 TableExport.js文件之前引入xlsx-core.js文件。为了使旧的浏览器（Firefox &lt; 20, Opera &lt; 15, Safari &lt; 6）支持.xlsx，需要在 FileSaver.js 文件之前引入 Blob.js文件。 二、Bootstrap-table 表头和表格错位问题在bootstrap-table.js源码中找到以下位置： 1234this.$tableHeader.show();// 注释掉下面两行 取消表头初始化，解决表头和内容不对齐问题// this.resetHeader();// padding += this.$header.outerHeight(true); 三、 表格添加自定义按钮如下： 第一步：table 表格上方添加一个div，里面自定义按钮，为了和自带的按钮放到一排，需要设置该div的id为toolbar： 123456789101112131415161718192021&lt;div class="form-group"&gt; &lt;div id="toolbar" class="btn-group"&gt; &lt;button type="button" class="btn btn-success" id="btn_add"&gt; &lt;span class="glyphicon glyphicon-plus"&gt;&lt;/span&gt; 新增 &lt;/button&gt; &lt;button type="button" class="btn btn-danger" id="btn_del"&gt; &lt;span class="glyphicon glyphicon-trash"&gt;&lt;/span&gt; 批量删除 &lt;/button&gt; &lt;button type="button" class="btn btn-info" id="btn_import"&gt; &lt;span class="glyphicon glyphicon-import"&gt;&lt;/span&gt; 批量导入 &lt;/button&gt; &lt;button type="button" class="btn btn-primary" id="btn_search"&gt; &lt;span class="glyphicon glyphicon-search"&gt;&lt;/span&gt; 查询 &lt;/button&gt; &lt;/div&gt;&lt;/div&gt; 第二步：使用js初始化表格时，需要添加设置： 12toolbar: "#toolbar", //指定工具栏toolbarAlign: "left", //工具栏对齐方式 四、Bootstrap中tab页及插件使用1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950;(function ($) &#123; $.extend($, &#123; /** * 添加标签页 * @param tabItem &#123;id: '标签页id', name: '标签页name', url: 'iframe要加载的url',closable 是否可关闭&#125; */ addTab: function (tabItem) &#123; var theOriginalId = tabItem.id; var newId = theOriginalId.replace(/\./g, ""); var tabId = 'tab_title_' + newId; var panelId = 'tab_panel_' + newId; var iframeId = 'tab_iframe_' + newId; if (!$('#' + tabId)[0]) &#123; $("li[id^=tab_title_]").removeClass('active'); $('.content-wrapper &gt; .tab-content').children($("div[id^=tab_panel_]")).removeClass('active'); $('.content-wrapper &gt; .nav.nav-tabs').append( $('&lt;li&gt;').attr(&#123;'id': tabId&#125;).addClass('active') .append($('&lt;a&gt;').attr(&#123;'href': '#' + panelId, 'data-toggle': 'tab'&#125;) .append($('&lt;span&gt;').text(tabItem.name)) .append(function () &#123; if (tabItem.closable) &#123; return $('&lt;i&gt;').addClass('glyphicon glyphicon-remove small').attr(&#123;'tabclose': tabId&#125;) .css(&#123;position: 'absolute', right: '4px', top: '4px', 'cursor': 'pointer'&#125;) .on('click', function (e) &#123; $.closeTab(tabId); &#125;); &#125; &#125;)) ) $('.content-wrapper &gt; .tab-content').append( $('&lt;div&gt;').attr(&#123;'role': 'tabpanel', 'id': panelId&#125;).addClass('tab-pane active') .append($('&lt;iframe&gt;').attr(&#123;'id': iframeId, frameborder: '0', 'src': tabItem.url&#125;) .css(&#123;'overflow-x': 'hidden', 'overflow-y': 'hidden', 'width': '100%', 'height': '100%'&#125;) .on('load', function () &#123; $(this).parent().height($.ContentHeight()); &#125;)) ) $('#' + tabId).children('a[data-toggle=tab]').tab('show'); &#125; &#125;, closeTab: function (tabId) &#123; var closeId = tabId; var panelId = 'tab_panel_' + closeId.substring(10); if ($('#' + panelId).hasClass('active')) &#123; $('#' + closeId).prev().children('a').tab('show'); &#125; $("#" + closeId).remove(); $("#" + panelId).remove(); &#125; &#125;); 使用：123456$.addTab(&#123; id: 'bootstrap_tab_id_', name: '标签页名称', url: '标签页加载的url', closable: true // 是否可关闭&#125;) 相关文档： bootstrap-table文档和相关插件：https://bootstrap-table.com/docs/extensions/export/ Bootstrap可关闭标签页，主要参考bootstrap-closable-tab：https://github.com/zyqwst/bootstrap-closable-tab]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>bootstrap-table-export</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springmvc使用常见问题]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E6%A1%86%E6%9E%B6%2FSpringmvc%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html</url>
    <content type="text"><![CDATA[前言在SpringMvc中使用@PathVariable有句号或小数点时，会导致最后一个小数点以及后面的值丢失；处理办法，在{id}中添加:.+，在@RequestMapping的value中使用SpEL来表示，value中的{id}换成{id:.+} ：123456@RequestMapping(value = "/queryById/&#123;id:.+&#125;", method = RequestMethod.GET)@ResponseBodypublic Message queryById(@PathVariable String id) throws Exception &#123; SysMenu sysMenu = sysMenuService.queryById(id); return Message.success(sysMenu);&#125; 参考SpringMvc的@PathVariable有句号或小数点时，取值不全解决办法]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>ssm</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础知识]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FJava%E7%B3%BB%E5%88%97%2FJava%E7%B3%BB%E5%88%97-Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html</url>
    <content type="text"><![CDATA[一、Java相关概念1、Java特点 面向对象，语法简单； 在语言定义阶段、字节码检查阶段、程序执行阶段进行三级代码安全检查机制； 与平台无关：跨平台； 解释、和编译两种运行方式； 多线程： Java内置了语言级多线程功能，支持多线程； 动态执行： Java执行代码是在运行时动态载入的； 2、Java 虚拟机Java虚拟机（Java virtual machine，JVM），编译后的Java程序指令不直接在硬件系统的CPU中执行，而是有JVM执行。JVM的具体实现包括： 指令集（等价于CPU的指令集） 寄存器组 类文件格式 栈 垃圾收集堆 内存区。 JVM的代码格式为压缩的字节码，Java主要的类型检查是在编译时由字节码校验器完成的。 JVM的实现叫做Java运行时系统或者运行时环境（runtime environment），即运行时。 3、Java虚拟机的性能在程序执行时，Hotspot对每个字节码执行进行分析，根据其执行次数，动态决定它的执行方式。多次重复执行的指令。则立即编译为可执行代码，否则，使用解释执行的方式。 4、垃圾收集内存漏洞：内存得不到释放，系统中没有内存可用时程序就会崩溃。Java中的垃圾收集是自动进行的。 5、Java的组成部分 Java解释器的三项主要工作： 下载代码：由类下载器完成； 校验代码：由字节码校验器完成； 运行代码：由运行时解释器完成； 类下载器：Java运行时系统区别对待来自不同源的类文件。类下载器把本地文件系统的类名空间和网络源输入的类名空间区分开来，以增加安全性。 字节码校验器： 通过网络传送的所有类文件都要经过字节码校验器的检验。校验器主要检查; 类遵从JVM的类文件格式； 不出现访问违例情况； 代码不会引起运算栈溢出； 所有运算代码的参数类型正确； 不会发生非法数据转换； 对象域访问是合法的； 6、Jdk安装后的目录结构 bin：Java开发工具，包括Java编译器、解释器等； javac：Java编译器，用来将Java程序编译成字节码； java：Java解释器，执行已经转换成字节码的Java应用程序； jdb：Java调试器，用来调试Java程序； javap：反编译，将类文件还原回方法和变量； javadoc：文档生成器，创建HTML文件； appletviewer：Applet解释器。 demo：示例程序； lib：Java开发类库； jre：Java运行环境，包括Java虚拟机、运行类库等； 二、Java 基本数据类型 数据类型： 基本数据类型 数值类型 整数类型：byte、short、int、long 浮点数类型：float、double 字符类型：char 布尔类型：boolean 复合数据类型： 类类型：class 数组： 接口类型：interface 三、面向对象（OOP）面向对象的概念：对象、抽象数据类型、类、类型层次（子类）、继承性、多态性。面向对象的方法学包括： 面向对象的分析（object-oriented analysis，OOA）； 面向对象的设计（object-oriented design，OOD）； 面向对象的程序设计（object-oriented program，OOP）； OOP把问题看成是相互作用的事物的集合，用属性来描述事物，对事物的操作定义为方法，事物被称为对象，把属性称为数据，即对象=数据+方法。对象在程序中通过抽象数据来描述，这个抽象数据类型就是类。 OOP的三大技术： 封装：将数据和对数据的操作捆绑在一起成为类，即封装； 继承：将一个已有类中的数据和方法保留，并加上自己特殊的数据和方法，从而构建成一个新类，即继承； C++具有多重继承能力，而Java只允许单重继承； Java的多重继承能力可以通过接口来实现。 多态：在一个类或多个类中，可以让多个方法使用同一个名字，从而具有多态性。 1、Object 类Object类是Java中所有类的父类，Object是唯一没有父类的类。 2、Java中的限定修饰符 public：可以被其他任何对象访问； private：类中的private成员只能被这个类本身访问，类外不可见； protected：只可以被同一包及其子类的实例对象访问； friendly：限定符如果不写的话，默认就是friendly，可以被其所在包中的各类访问； 类型 无修饰符 private protected public 同一类 是 是 是 是 同一包中的子类 是 否 是 是 同一类中的非子类 是 否 是 是 不同包中的子类 否 否 是 是 不同包中的非子类 否 否 否 是 3、与OOP有关的关键字 static：可修饰数据成员，也可修饰成员方法，表明其索命的对象是静态的。静态成员与类相对应，被类的所有对象共享，定义了类之后即已存在；类中定义的公有静态变量相当于全局变量。 final：用final修饰的类不能再派生子类。 abstract：用abstract可以修饰类或成员方法，表明被修饰的成分是抽象的； this：指代本类； super：指代父类； 对象引用：Java系统在内存中为实例分配相应的空间后会将存储地址返回，称此存储地址为对象的引用，也称为引用变量。 四、运算符 算数运算符：加（+）、减（-）、乘（*）、除（/）、取模（%）； 关系运算符：大于（&gt;）、大于等于（&gt;=）、小于（&lt;）、小于等于（&lt;=）、等于（==）、不等于（!=）； 逻辑运算符：逻辑与（&amp;）、逻辑或（||）、逻辑非（!） 位运算符： 只能操作整型和字符型数据进行操作。 按位取反（~）： 按位与（&amp;）： 按位或（|）： 异或（^）： 右移（&gt;&gt;）：右每移一位，相当于被2除一次。128&gt;&gt;1得到64 左移（&lt;&lt;）： 无符号右移（&gt;&gt;&gt;）：逻辑右移，左侧空位用0填充；算数右移不改变原数的符号，逻辑右移不能保证这一点。 扩展赋值运算符（+=、-=、*=、/=、%=、&amp;=、|=、^=、&gt;&gt;=、&lt;&lt;=、&gt;&gt;&gt;=） 条件运算符：（?:） 点运算符：（.） 实例运算符：（instanceof） new 运算符 数组下标运算符：（[]） 五、数组、向量和字符串1、数组初始化静态初始化（定义时初始化）和动态初始化； int[] ages = {12,13}; String names[] = {"John","June"} 2、多维数组 int intArray[][]; int intArray[][] = {{2,3},{1,2}}; 数组复制：System.arraycopy 六、向量类VectorVector：允许不同类型的元素共存于一个变长数组中，是可变大小的数组。使用场景： 需要处理的对象数目不定； 需要将不同类的对象组合成一个数据序列； 需要做频繁的对象序列中元素的插入和删除； 经常需要定位序列中的对象和其他查找操作； 在不同的类之间传递大量的数据。局限性：其中的对象不能是简单数据类型； 1、==和equals方法的区别 “==”判定两字符串对象是否是同一实例，即它们在内存中的存储空间是否相同。 2、StringBufferStringBuffer用来处理可变字符串。 七、对象和类1、按值传递Java只“按值”传送自变量，即方法调用不会改变自变量的值。 当对象实例作为自变量传送给方法时，自变量的值是对对象的引用，也就是说，传递给方法的是引用值。在方法内，这个引用值是不会变化的，但可以修改该引用指向的对象内容。 1234567891011121314151617181920212223242526272829303132333435363738394041public class PassTest &#123; float ptValue; public static void main(String[] args) &#123; String str; int val; PassTest pt = new PassTest(); val = 11; pt.changeInt(val); System.out.println("Int Value is:" + val); str = new String("hello"); pt.changeStr(str); System.out.println("Str Value is:" + str); pt.ptValue = 101f; // 通过对象引用改值 pt.changeObjValue(pt); System.out.println("Current ptValue is:" + pt.ptValue); &#125; public void changeInt(int value) &#123; value = 55; &#125; public void changeStr(String value) &#123; value = new String("different"); &#125; public void changeObjValue(PassTest ref) &#123; ref.ptValue = 99f; &#125;&#125; 运行结果： 12345Int Value is:11Str Value is:helloCurrent ptValue is:99.0Process finished with exit code 0 2、重载重载：允许对多个方法使用同一个方法名。方法之间区别于： 方法名； 参数列表； 返回值； 3、对象的构造和初始化调用构造方法时，步骤如下： 分配新对象的空间，并进行默认的初始化； 执行显式的成员初始化； 执行构造方法。构造方法不能说明为native、abstract、synchronized或final，也不能从父类继承构造方法。 构造方法的特性总结如下： 构造方法的名字与类名相同； 没有返回值类型； 必须为所有的变量赋初值； 通常要说明为public类型的，即共有的； 可以按需包含参数列表。 每个类必须有一个构造方法，默认构造方法的参数列表及方法体均为空。 4、finalize()方法finalize() 方法属于Object类，它可被所有类使用。在对对象实例进行垃圾收集之前，Java自动调用对象的finalize()方法，它相当于C++中的析构方法，用来释放对象所占用的系统资源。 5、单重继承一个类如果有父类，则其父类只能有一个。 6、异类集合异类集合是由不同质内容组成的集合，即集合内所含元素的类型可以不完全一致。 7、instanceof运算符由于类的多态性，类的变量既可以指向本类实例，又可以指向其子类的实例。需要判明某个引用到底执行哪个实例，通过instanceof运算符来实现。 8、转换对象如果用instanceof运算符已判明父类的引用指向的是子类实例，就可以转换该引用。 沿类层次向上转换总是合法的； 对于向下转换，只能是父类到子类转换，其他类之间是不允许的。 9、方法重写子类中定义方法所用的名字、返回类型及参数表和父类中方法使用的完全一样，称子类方法重写了父类中的方法，逻辑上来看，也就是子类中的成员方法将隐藏父类中的同名方法。 重写方法的目的：既可以是取代或修改原有的方法，也可以是要在某些方面进行扩展，或者加以改进。 重写的同名方法中，子类方法不能比父类方法的访问权限更严格。 面向对象语言的一个重要特性：要执行的是与对象真正类型（运行时类型）相关的方法，而不是与引用类型（编译时类型）相关的方法。这也是多态的另一个重要性质，称作虚方法调用。 示例： Employee.java 12345678public class Employee &#123; String name; int salary; public String getDetails() &#123; return "Name:" + name + "\n" + "Salary:" + salary; &#125;&#125; Manager.java 1234567891011121314public class Manager extends Employee &#123; String department; @Override public String getDetails() &#123; return "Name:" + name + "\n" + "Manager of " + department; &#125; public static void main(String[] args) &#123; Employee e = new Manager(); String details = e.getDetails(); System.out.println(details); &#125;&#125; 运行结果：可以看到执行的是Manager类中的方法，因为实例的真正类型是Manager。 12Name:nullManager of null 注：如果子类已经重写了父类中的方法，但在子类中想使用父类中被隐藏的方法，可以使用super关键字。 10、重载和重写的区别。方法名相同，参数表不同，则是对方法的重载。重载的方法属于同一个类，而重写的方法分属于父、子类中。 重写方法的允许访问范围不能小于原方法； 重写方法所抛出的异常不能比原方法更多。 11、父类构造方法调用注意点： 一个父类的对象要在子类运行前完全初始化。 子类不能从父类继承构造方法； 如果在子类的构造方法中没有明确调用父类的构造方法，则系统在执行子类的构造方法时会自动调用父类默认的构造方法（即无参构造方法）； 如果在子类的构造方法的定义中调用了父类的构造方法，则调用语句必须出现在子类构造方法的第一行。 八、Java包一个Java源代码文件称为一个编译单元，一个编译单元中只能有一个public类，且该类名与文件名相同。 包是类的容器，用于分隔类名空间，避免类名冲突。 1、classpath环境变量在文件系统的目录中，环境变量classpath将指示着javac编译器如何查找所需要的对象，classpath是设置的环境变量。 2、封装 指对象的全部属性数据和对数据的全部操作结合在一起，形成一个统一体（即对象）； 尽可能地隐藏对象的内部细节，只保留有限的对外接口，对数据的操作都通过这些接口实现。 九、类成员 类变量：static修饰的变量，类中所有对象共享的变量； 类方法：静态方法，static修饰的方法； 十、关键字final1、 终极类终极类：使用final修饰的，不能被继承的类； 2、终极方法终极方法：使用final修饰的，不能被重写的方法； 3、终极变量终极变量：标记为final的变量就变成一个常量，企图改变终极变量的取值将引起编译错误； 如果将一个引用类型的变量标记为final，那么这个变量将不能再指向其他对象，但它所指对象的取值仍然是可以改变的。 示例：12345678910111213public class Car &#123; int number = 1234; public static void main(String[] args) &#123; final Car myCar = new Car(); myCar.number = 8888;// 可以// myCar = new Car();// 错误 System.out.println(myCar.number);// 8888 &#125;&#125; 十一、抽象类abstract修饰的类。抽象类的子类所继承的抽象方法同样还是抽象方法，因此必须提供其父类中所有抽象方法的实现代码，否则它还是抽象类。 注意：一个抽象类中可以包含非抽象方法和成员变量。即：包含抽象方法的类一定是抽象类，但抽象类中的方法不一定都是抽象方法。 抽象方法，用abstract修饰的方法。 十二、接口 接口（interface）是抽象类功能的另一种实现方法； 接口中的多有方法都是抽象方法，都没有方法体，因此可以把接口看成特殊的抽象类； Java中的多重继承的变种实现方法，Java中允许一个类实现（implements）多个接口，从而实现了比多重继承更加强大的能力，并具有更加清晰的结构； 1、接口的实现与类的继承区别实现接口的类不从该接口的定义中继承任何行为，在实现该接口的类的任何对象中都能够调用这个接口中定义的方法。在实现的过程中，这个类还可以同时实现其他接口。要实现接口，可在一个类的声明中用关键字implements表示该类已经实现的接口。实现接口的类必须实现接口中的所有抽象方法。 Java中可以通过在implements后面声明多个接口名来同时实现多个接口，也就是一个类可以实现多个接口。 十三、内部类内部类，也被称为嵌套类。 1、 内部类的属性 类名只能在定义的范围内被使用，内部类的名称必须区别于外部类； 内部类可以使用外部类的类变量和实例变量，也可使用外部类的局部变量； 内部类可以定义为abstract类型； 内部类也可以是一个接口，这个接口必须由另一个内部类来实现； 内部类可以被定义为private或者protected类型。当一个类中嵌套另一个类时，访问保护并不妨碍内部类使用外部类的成员； 被定义为static型的内部类将自动转换为顶层类，它们不能再使用局部范围中或其他内部类中的数据和变量； 内部类不能定义static型成员，而只有顶层类才能定义static型成员。如果内部类需要使用static型成员，这个成员必须在外部类中加以定义。 十四、匿名类在定义一个内部类时，也可以将整个类的描述包含在一个表达式的范围里，使用这种方法是在定义了一个匿名类的同事创建了一个对象。 十五、包装类Java使用基本类型及类和对象来表示数据，管理的数据只有两类，即基本类型值及对象引用。java.lang包中的包装类Byte、Short、Integer、Long、Float、Double、Character、Boolean、Void。 十六、异常异常Java把程序运行中可能遇到的错误分为两类， 非致命性的，通过修正后程序还能继续执行，这类错误称为异常，也称为例外； 致命性的，即程序遇到了非常严重的不正常状态，不能简单地恢复执行，这就是错误。 异常的使用场景： 当方法因为自身无法控制的原因而不能完成其任务； 文件不存在，网络连接无法建立等； 处理在方法、类库、类中抛出的异常，如FileInputStream.read产生IOException； 在大的项目中采用统一的方式处理异常时； 编写文字处理器一类的程序等； 不经常发生但却可能发生的故障。 异常处理 第一种方式：捕获到所发生的异常类，并进行相应的处理。 1234567try &#123;&#125; catch (ExceptionType1 e) &#123; // 抛出ExceptionType1异常时要执行的异常&#125; finally &#123; // 必须执行的代码&#125; 第二种方式：不在当前方法内处理异常，而是把异常抛出到调用方法中。 公共异常 ArithmeticException整数除法中，如果除数为0，则发生该类异常。 NullPointerException如果一个对象还没有实例化，那么访问该对象或调用它的方法将导致NullPointerException异常。 NegativeArraySizeException创建数组时，如果元素个数是个负数，则会引发此类异常。 SecurityException该类异常一般在浏览器内抛出。 ArrayStoreException程序试图存取数组中错误的数据类型。 ArrayIndexOutOfBoundsException访问数据时，如果数组下标超出长度，则导致数组下标越界异常。 FileNotFoundException试图存取一个并不存在的文件时发生该异常。 IOException通常的I/O错误。 异常分类类java.lang.Throwable是使用异常处理机制可被抛出并捕获的所有异常对象的父类。它有三个基本子类。 Error：表示很难恢复的错误，如内存越界。 RuntimeException：用来表示设计或实现方面的问题，如数组越界等。 其他异常表示运行时因环境的影响可能发生并可被处理的问题。 用户自定义的所有异常都必须是Exception子类。 十七、Java数据流数据流是指一组有顺序的、有起点和终点的字节集合。 输入数据流Java.io包中所有的输入数据流都是由抽象类InputStream继承而来，并且实现了其中所有方法，包括读取数据、标记位置、重置读写指针、获取数据量等。输入数据流（input stream）是指只能读不能写的数据流，用于向计算机内输入信息而用。 主要数据操作方法有： int read() 从输入流中读一个字节的二进制数据，然后以此数据为低位数据，配上一个全零字节，形成一个0~255之间的整数返回。 int read(byte[] b)：将多个字节读到数组中，填满整个数组; int read(byte[] b, int off, int len)：从输入流中读取长度为len的数据，从数组b中索引为off的位置开始放置读入的数据，读毕返回读取的字节数; void close()：结束对一个数据流的操作时应该将其关闭，同时释放与该数据流相关的资源。 int available()：返回目前可以从数据流中读取的字节数（但实际的读操作所读得的字节数可能大于该返回值）。 long skip(long l)：跳过数据流中指定数量的字节不读。返回值表示实际跳过的字节数。 boolean markSupported() void mark(int markarea) void reset() 输出数据流output stream 只能写不能读的流，用于从计算机中输出数据。 void write(int i)：将字节i写入到数据流中，它只输出低位字节。抽象方法。 void write(byte b[] )：将数组b[]中的全部b.length个字节写入数据流。 void write(byte b[], int off, int len)：将数组b[]中从第off个字节开始的len个字节写入数据流。 void close()：当结束对输出数据流的操作时应该将其关闭； void flush()：将不够一个缓冲区单位而留在缓冲区的用flush方法将这部分数据强制提交。 为加快数据传输速度，提高数据输出效率，有时输出数据流会在提交数据之前把所要输出的数据先锁定在内存缓冲区中，然后成批地进行输出，每次传输过程都以某特定数据长度为单位进行传输。 文件数据流文件数据流包括：FileInputStream和FileOutputStream，这两个类用来进行文件的I/O处理，其数据源或者数据终点都应当是文件。 过滤流一个过滤器数据流在创建时与一个已经存在的数据流相连，这样在从这样的数据流中读取数据时，它提供的是对一个原始输入数据流的内容进行了特定处理的数据。 缓冲区数据流： BufferedInputStream和BufferedOutputStream，都属于过滤器数据流，都是在数据流上增加了一个缓冲区。 数据数据流：前面的数据流中，处理的数据都是指字节或字节数组，这是进行数据传输时系统默认的数据类型。DataInputStream和DataOutputStream，允许通过数据流来读写Java原始类型，包括布尔型（boolean）、浮点型（float）等。 管道数据流：管道数据流主要用于线程间的通信，一个线程中的PipedInputStream对象从另一个线程中互补的PipedOutputStream一起使用，来建立一个通信信道。管道数据流必须同时具备可用的输入端和输出端。 创建一个通信信道的步骤如下： 建立一个输入数据流： PipedInputStream pis = new PipedInputStream(); 建立输出数据流：PipedOutputStream pos = new PipedOutputStream(); 将输入数据流和输出数据流连接起来：pis.connect(pos); 对象流：能够输入输出对象的流称为对象流。ObjectOutputStream、ObjectInputStream。 可持久化记录自己的状态以便将来再生的能力，叫对象的持久性（persistence）。对象通过写出描述自己状态的数值来记录自己的过程叫持久化（或串行化，serialization）。持久化的主要任务是写出对象实例变量的数值，如果变量是另一个对象的引用，则引用的对象也要串行化。当一个类声明实现Serializable接口时，表明该类加入了对象串行化协议。在Java中，允许可串行化的对象通过对象流进行传输。 对象结构表串行化只能保存对象的非静态成员变量，而不能保存任何成员方法和静态成员变量，而且保存的只是变量的值，对于变量的任何修饰符都不能保存，访问权限对于数据域的持久化没有影响。 读者和写者读者（Reader）和写者（Writer）是Java提供的对不同平台之间数据流中数据进行转换的功能。其他程序设计语言使用ASCII字符集，ASCII字符集是以一个字节（byte）（8位）来表示一个字符，所以可以认为一个字符就是一个字节，但Java使用的Unicode是一种大字符集，要用两个字节（16位）来表示一个字符，这是字节与字符就不再一样了。为了实现与其他程序语言及不同平台进行交互，Java必须提供一种16位的数据流处理方案，使得数据流中的数据可以进行与以往16位平台时的相同处理。这种16位方案称作读者和写者，用来在字节流和字符流之间作为中介。 缓冲区读者和缓冲区写者BufferedReader、BufferedWriter。 十八、文件的处理File类随机访问文件 RandomAccessFile访问随机位置的记录。 十九、线程线程的结构 虚拟CPU：封装在java.lang.Thread类中，它控制着整个线程的执行； 执行的代码：传递给Thread类，由Thread类控制顺序执行； 处理的数据：传递给Thread类，是在代码执行过程中所要处理的数据。 多线程的优势 多线程编程简单，效率高。使用多线程可以在线程间直接共享数据和资源，而多进程之间不能做到这一点。 适合于开发服务程序，如Web服务、聊天服务等。 适合于开发有多种交互接口的程序，如聊天程序的客户端，网络下载工具。 适合于有人机交互又有计算量的程序，如字处理程序Word、Excel等。 线程的状态 新建（new）：线程对象刚刚创建，还没有启动，此时还处于不可运行状态； 可运行状态（runnable）：线程已经启动，处于线程的run()方法之中。这种情况下线程可能正在运行，也可能没有运行，只要CPU一空闲，马上就会运行。可以运行但并没在运行的线程都排在一个队列中，这个队列称为就绪队列。 调用线程的start()方法可使线程处于“可运行”状态。 死亡（dead）：线程死亡的原因有两个：一是run()方法中最后一个语句执行完毕；二是当线程处于可运行状态时，调用了stop()方法结束了线程的运行。使其进入了死亡状态。 阻塞（blocked）：一个正在执行的线程因特殊原因被暂停执行，就进入阻塞状态。阻塞时线程不能进入就绪队列排队，必须等到引起阻塞的原因消除，才可重新进入队列排队。sleep()和wait()就是两个常用的引起阻塞的方法。 中断线程：当run()执行结束返回时，线程自动终止。使用stop()也可以终止线程的执行。interrupt()不仅可中断正在运行的线程，而且也能中断处于blocked状态的线程，此时interrupt()会抛出一个InterruptedException异常。Java提供的几个用于测试线程是否被中断的方法： void interrupt()：向一个线程发送一个中断请求，同时把这个线程的“interrupted”状态置为true。若该线程处于“blocked”状态，会抛出InterruptedException异常。 static boolean interrupted()：检测当前线程是否已被中断，并重置状态“interrupted”值。即如果连续两次调用该方法，则第二次调用将返回false。 boolean isInterrupted()：检测当前线程是否已被中断，不改变状态“interrupted”值。 创建线程的方法一：继承Thread类定义一个线程类，继承Thread类并重写run方法。 从Thread类派生出一个子类，在类中一定要实现run()； 用该类创建一个对象； 用start()方法启动该线程。 创建线程的方法二：实现Runnable接口Runnable是Java中用以实现线程的接口，从根本上讲，任何实现线程功能的类都必须实现该接口。前面的Thread类实际上就是因为实现了Runnable接口，所以它的子类才相应具有线程功能的。 Runnable接口中只定义了一个方法就是run()方法，也就是线程体。用Runnable()接口实现多线程时，也必须实现run()方法，也需用start()启动线程，但此时常用Thread类的构造方法来创建线程对象。 两种创建线程方法的使用场景1. 适用于采用实现Runnable接口方法的情况因为Java只允许单继承，如果一个类已经继承了Thread，就不能再继承其他类，在一些情况下，这就被迫采用实现Runnable的方法。 2. 适用于采用继承Thread方法的情况当一个run()方法置于Thread类的子类中时，this实际上引用的是控制当前运行系统的Thread实例。 线程的相关操作方法 start()：启动线程对象； run()：用来定义线程对象被调度之后所执行的操作，必须重写run()方法； yield()：强制终止线程的执行； isAlive()：测试当前线程是否在活动； sleep(int millsecond)：使线程休眠一段时间，时间长短由参数决定； void Wait()：使线程处于等待状态。 线程的调度Java中，线程调度通常是抢占式，而不是时间片式。Java的线程调度采用如下的优先级策略： 优先级高的先执行，优先级低的后执行； 多线程系统会自动为每个线程分配一个优先级，默认时，继承其父类的优先级； 任务紧急的线程，其优先级较高； 同优先级的线程按“先进先出”的原则。 Thread类有三个与线程优先级有关的静态量： MAX_PRIORITY：最大优先权，值为10； MIN_PRIORITY：最小优先权，值为1； NORM_PRIORITY：默认优先权，值为5。 线程的基本控制 结束线程：使用stop()方法强制停止，即强迫死亡。 检查线程：isAlive()； 挂起线程：sleep()，用于暂时停止一个线程的执行；suspend()强制挂起线程和resume()唤醒其继续执行；join()引起现行线程等待，知道方法join()所调用的线程结束。 线程间的通信管道流可以连接两个线程间的通信。 线程间的资源互斥共享同时运行的线程需要共享数据时，必须保证共享数据的一致性。保证对共享数据操作的完整性，这种完整性称为共享数据操作的同步，共享数据叫做条件变量。 对象互斥锁对象互斥锁阻止多个线程同时访问同一个条件变量。Java可以为每一个对象的实例配有一个“对象互斥锁”。实现方法： 用关键字volatile来声明一个共享数据（变量）； 用关键字synchronized来声明一个操作共享数据的方法或一段代码。 一般情况下，多使用syncharonized关键字在方法的层次上实现对共享资源操作的同步，很少使用volatile关键字声明共享变量。 死锁如果一个线程持有一个锁并试图获取另一个锁时，就有死锁的危险。 产生背景死锁情况发生在第一个线程等待第二个线程所持有的锁，而第二个线程又在等待第一个线程持有的锁的时候，每个线程都不能继续运行，除非有一个线程运行完同步程序块。而恰恰因为哪个线程都不能继续运行，所以哪个线程都无法运行完同步程序快。 产生原因死锁是资源的无序使用而带来的，解决死锁问题的方法就是给资源施加排序。 避免死锁的办法一个避免死锁发生的较麻烦的办法是：如果有多个对象要被同步，那就制定一个规则来决定以何种顺序来获得这些锁，并在整个程序中遵循这个顺序。 线程交互生产者-消费者问题，可能出现的问题： 生产者比消费者快时，消费者会漏掉一些数据取不到； 消费者比生产者快时，消费者取的数据相同。使用以下方法来协调线程间的运行速度（读取）关系。 wait()：作用是让当前线程释放其所持有的“对象互斥锁”，进入wait队列（等待队列）； notify()/ notifiAll()：作用是唤醒一个或所有正在等待队列中等待的线程，并将他们移入等待同一个“对象互斥锁”的队列。需要说明的： 上面三个方法都只能在被声明为syncharonized的方法或代码段中调用。 当一个线程被notify()后，它并不立即变为可执行状态，而仅仅是从等待队列中移入锁定标志队列中，这样的话，在重新获得锁定标志之前它依旧不能继续运行。 线程执行被同步的语句时必须要拥有对象的锁定标志说明：在实际实现中，方法wait()既可以被notify()终止，也可以通过调用线程的interrupt()方法来终止。后一种情况下，wait()会抛出一个InterruptedException异常，所以需要把它放在try/catch结构中。守护线程守护线程是为其他线程提供服务的线程，它一般应该是一个独立的线程，它的run()方法是一个无限循环。可以通过方法public boolean isDaemon()来确定一个线程是否是守护线程，也可以用方法public void setDaemon(boolean)来设定一个线程为守护线程。一般当最后一个线程结束时，Java程序才退出，而如果最后一个线程是守护线程，它不影响Java程序的退出。即如果守护线程是唯一运行着的线程，程序会自动退出。说明守护线程一般不能用于执行关键任务，因为有可能任务还未执行完，但它已经成为最后一个运行中的线程了，系统强制结束它，导致人物不能顺利完成。一般地，守护线程用来做辅助性工作，如用于提示、帮助等。 二十、Java的网络功能Java提供的网络功能： InetAddress：面向的是IP层，用于标识网络上的硬件资源； URL面向应用层：通过URL的网络资源表达形式确定数据在网络中的位置，利用URL对象中提供的相关方法，直接读入网络中的数据，或者将本地数据传送到网络的另一端； Socket面向传输层：使用的是TCP协议； Datagram也面向传输层：使用的是UDP协议；URL和Socket两种方法都是面向连接方式的通信。 使用InetAddress类InetAddress可以用于标识网络上的资源，他提供了一系列的方法，用来描述、获取及使用网络资源。 public static InetAddress getByName(String host); public static InetAddress getLocalHost(); public static InetAddress[] getAllByName(String host); InetAddress类的主要方法 public byte[] getAddress()——获得本对象的IP地址（存放在字节数组中）； public String getHostAddress()——获得本对象的IP地址“%d.%d.%d.%d”； public String getHostName()——获得本对象的机器名。 1234567891011121314151617181920212223public class InetAddressUtil &#123; private static final Logger LOGGER = LoggerFactory.getLogger(InetAddressUtil.class); private static InetAddress ADDRESS; public static InetAddress getInetAddress(String host) &#123; InetAddress inetAddress = null; try &#123; inetAddress = InetAddress.getByName(host); &#125; catch (UnknownHostException e) &#123; LOGGER.error("UnknownHostException", e); &#125; return inetAddress; &#125; public static void main(String[] args) &#123; String host = "www.baidu.com"; InetAddress address = InetAddressUtil.getInetAddress(host); LOGGER.info("address &#123;&#125;" , address); System.out.println(address); &#125;&#125; 执行结果： 1www.baidu.com/220.181.38.150 统一资源定位器URL是uniform resource locator（统一资源定位器）的缩写，它表示Internet上某一资源的地址。URL包括两部分内容：协议名称和资源名称，中间用冒号隔开。Protocol:resourceNameURL的具体结构为：protocol://host_name:port_number/file_name/reference protocol：用来指示所要获取资源的传输协议，如：http、ftp、gopher、file等； host_name：用来指示资源所在的主机； port_number：用来指示连接时所使用的通信端口号； file_name：用来指示该资源在主机的完整文件名； reference：指示资源中的某个特定位置； URL的构造方法 public URL(String spec); public URL(URL context, String spec); public URL(String protocol, String host, String file); public URL(String protocol, String host, int port, String file); 获取URL对象属性 String getProtocol()——获取传输协议； String getHost()——获取机器名称； String getPort()——获取通信端口号； String getFile()——获取资源文件名称； String getRef()——获取参考点； 读入URL数据URL类中定义了openStream()方法，通过这个方法可以读取一个URL对象所指定的资源。方法openStream()与指定的URL建立连接并返回一个InputStream对象，即这个方法的返回值是一个InputStream数据流。 网络通信通过URL的方法openStream()，只能从网络上读取资源中的数据。通过URLConnection类，可以在应用程序和URL资源之间进行交互，既可以从URL中读取数据，也可以向URL中发送数据。URLConnection类表示了应用程序和URL资源之间的通信连接。 public URLConnection openConnection URLConnection 中最常用的两个方法是： public InputStream getInputStream(); public OutputStream getOutputStream();通过getInputStream()方法，应用程序就可以读取资源中的数据。 二十一、Socket接口在Java中，基于TCP协议实现网络通信的类有两个：在客户端的Socket类和在服务器端的ServerSocket类。ServerSocket类的功能是建立一个Server，并通过accept()方法随时监听客户端的连接请求。 构造方法： public Socket(String host, int port); public Socket(InetAddress address, int port); public Socket(String host, int port, InetAddress localAddr, int localPort); public Socket(InetAddress address, int port, InetAddress localAddr, int localPort); Socket类的输入/输出流管理包括以下方法： public InputStream getInputStream(); public void shutdownInput(); public OutputStream getOutputStream(); public void shutdownOutput();以上方法都会抛出IOException异常，程序中需要捕获处理。关闭Socket的方法为： public void close() throws IOException;设置/获取Socket数据的方法为： public InetAddress getInetAddress(); public int getPort(); public void setSoTimeOut(int timeout);ServerSocket类的构造方法： public ServerSocket(int port); public ServerSocket(int port, int backlog)，支持指定数目的连接; public ServerSocket(int port, int backlog, InetAddress bindAddr); public Socket accept()：等待客户端的连接; public void close()：关闭Socket;Socket的基本概念 建立连接，建立连接的过程为： 先在服务端生成一个ServerSocket实例对象，随时监听客户端的连接请求； 当客户端需要连接时，相应地要生成一个Socket实例对象，并发出连接请求，其中host参数指明该主机名，port#参数指明该主机端口号； 服务端通过accept()方法接收到客户端的请求后，开辟一个接口与之进行连接，并生成所需的I/O数据流； 客户端和服务器端的通信都是通过一对InputStream和OutputStream进行的。通信结束后，两端分别关闭对应的Socket接口。 连接地址 端口号 网络连接模式每个Server端都拥有一个端口号，一台机器上如果运行多个服务，则可能对应多个端口号。通信结束后，两端分别关闭对应的Socket接口，而不影响其他的端口。 Socket通信的基本步骤1). 在服务器端制定一个用来等待连接的端口号，在客户端规定一个主机和端口号，从而在客户端和服务器端创建Socket/ServerSocket实例；2). 打开连接到Socket的输入输出流；3). 利用输入输出流，按照一定的协议对Socket进行读写操作；4). 关闭输入输出流和Socket； Java实例]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>Oracle</tag>
        <tag>MySQL</tag>
        <tag>Linux</tag>
        <tag>JavaScript</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nosql使用笔记-windows下安装MongoDB]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FNosql-mongodb.html</url>
    <content type="text"><![CDATA[安装 下载mongodb解压缩版并解压，目录D:\DevTools\mongodb\; 上述目录下创建文件夹：data\,data目录下创建目录db和目录logs; mongodb根目录下创建文件mongo.config，内容为： 123dbpath=D:\DevTools\mongodb\data\dblogpath=D:\DevTools\mongodb\data\logs\mongo.log 打开命令行，进入到D:\DevTools\mongodb\bin\目录下，执行命令： 1mongod --dbpath D:\DevTools\mongodb\data 测试，在浏览器中输入：http://localhost:27017/； 配置windows服务 [管理员权限]命令行进入bin目录下，执行命令1mongod.exe --config D:\DevTools\mongodb\mongo.config --install --serviceName "MongoDB"]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>数据库</tag>
        <tag>NoSQL</tag>
        <tag>nosql</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux安装jdk环境-CentOS]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%2FLinux%E4%BD%BF%E7%94%A81.html</url>
    <content type="text"><![CDATA[CentOS系统下各文件夹的作用 /： 根目录，一般根目录下只存放目录，不要存放文件，/etc、/bin、/dev、/lib、/sbin应该和根目录放置在一个分区中 /bin:/usr/bin: 可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等。 /boot： 放置linux系统启动时用到的一些文件。 /boot/vmlinuz为linux的内核文件，以及/boot/gurb。建议单独分区，分区大小100M即可 /dev： 存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱mount /dev/cdrom /mnt。 /etc： 系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有/etc/inittab、/etc/fstab、/etc/init.d、/etc/X11、/etc/sysconfig、/etc/xinetd.d修改配置文件之前记得备份。注：/etc/X11存放与x windows有关的设置。 /home： 系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，~表示当前用户的家目录，~test表示用户test的家目录。建议单独分区，并设置较大的磁盘空间，方便用户存放数据 /lib:/usr/lib: /usr/local/lib： 系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助，比较重要的目录为/lib/modules。 /lost+fount： 系统异常产生错误时，会将一些遗失的片段放置于此目录下，通常这个目录会自动出现在装置目录下。如加载硬盘于/disk 中，此目录下就会自动产生目录/disk/lost+found /mnt:/media： 光盘默认挂载点，通常光盘挂载于/mnt/cdrom下，也不一定，可以选择任意位置进行挂载。 /opt： 给主机额外安装软件所摆放的目录。如：FC4使用的Fedora 社群开发软件，如果想要自行安装新的KDE 桌面软件，可以将该软件安装在该目录下。以前的 Linux 系统中，习惯放置在 /usr/local 目录下 /proc： 此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/*等 /root： 系统管理员root的家目录，系统第一个启动的分区为/，所以最好将/root和/放置在一个分区下。 /sbin:/usr/sbin:/usr/local/sbin： 放置系统管理员使用的可执行命令，如fdisk、shutdown、mount等。与/bin不同的是，这几个目录是给系统管理员root使用的命令，一般用户只能”查看”而不能设置和使用。 /tmp： 一般用户或正在执行的程序临时存放文件的目录,任何人都可以访问,重要数据不可放置在此目录下 /srv： 服务启动之后需要访问的数据目录，如www服务需要访问的网页数据存放在/srv/www内 /usr： 应用程序存放目录， /usr/bin 存放应用程序， /usr/share 存放共享数据， /usr/lib 存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。 /usr/local:存放软件升级包。 /usr/share/doc: 系统说明文件存放目录。 /usr/share/man: 程序说明文件存放目录，使用 man ls时会查询/usr/share/man/man1/ls.1.gz的内容建议单独分区，设置较大的磁盘空间 /var： 放置系统执行过程中经常变化的文件，如随时更改的日志文件 /var/log，/var/log/message： 所有的登录文件存放目录，/var/spool/mail： 邮件存放的目录， /var/run: 程序或服务启动 linux Java开发常用命令安装开发工具包英文系统安装： # yum -y groupinstall “Development tools”中文系统安装： # yum -y groupinstall “开发工具” Linux安装jdk1234567891011121314151617# 查看yum库中都有哪些jdk版本yum search java|grep jdk# 选择指定的版本安装yum install java-1.8.0-openjdk# 查看安装版本信息java -version#######安装rz/sz命令#######yum install -y lrzsz#######解压/压缩.tar.gz########解压tar -xvzf apache-tomcat-8.5.23.tar.gz#压缩tar -zcvf 文件名.tar.gz 要压缩的文件/文件夹# 例如：tar -zcvf webfile.tar.gz webfile 安装netstat1yum install net-tools 安装lsof命令1yum install lsof 安装Tomcat安装jdk，上传tomcat压缩包，并解压，然后：123456789101112131415161718192021# 配置环境变量cd /etc/# 编辑profile文件：vi profile###配置java环境变量############################Java start##############################export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.201.b09-2.el7_6.x86_64export JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH############################Java end#################################保存之后，使用下面命令是环境变量生效source /etc/profile# 启动tomcatcd apache-tomcat-8.5.23/bin/sh startup.sh# 查看启动日志cd apache-tomcat-8.5.23/logs/cat catalina.out 常用命令12345678910111213141516171819202122232425262728# 查看ip地址ip addr# 查看占用端口的进程netstat -lnp|grep 8080#或lsof -i:8080# 根据进程ID查看进程的具体信息ps axu|grep 2643 # 列出所有端口netstat -ntlp# 查看进程ps -ef|grep nginx# 杀死进程kill -9 进程号killall -9 进程名字## 删除文件或文件夹# 删除目录rm /home/test# -r是递归的删除参数表中的目录及子目录rm -r /home/test# f是不提示用户，删除目录下的所有文件rm -rf /home/test# -i是交互模式rm -ir /home/test 安装Nginx123#安装Nginx的yum源sudo yum install yum-utils#在/etc/yum.repos.d/路径下创建文件nginx.repo 内容如下12345678910111213[nginx-stable]name=nginx stable repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.key[nginx-mainline]name=nginx mainline repobaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/gpgcheck=1enabled=0gpgkey=https://nginx.org/keys/nginx_signing.key 执行命令1sudo yum-config-manager --enable nginx-mainline 安装nginx1sudo yum install nginx 查看nginx1yum info nginx 启动nginx1service nginx start 修改配置，添加映射123cd /etc/nginx/conf.d# 修改default.confvi default.conf 卸载软件1yum install nginx]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Linux</tag>
        <tag>系统</tag>
        <tag>linux</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架整合笔记（八）配置Swagger]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B07-%E9%85%8D%E7%BD%AESwagger.html</url>
    <content type="text"><![CDATA[Swagger 是一款RESTFUL接口的、基于YAML、JSON语言的文档在线自动生成、代码自动生成的工具。 Swagger介绍官网介绍：最好的API是使用Swagger工具构建的。 Swagger是一套围绕OpenAPI规范构建的开源工具，可以帮助您设计，构建，记录和使用REST API。主要的Swagger工具包括： Swagger Editor - 基于浏览器的编辑器，在其中编写OpenAPI规范。 Swagger UI - 将OpenAPI规范呈现为交互式API文档。 Swagger Codegen - 从OpenAPI规范生成服务端和客户端库。 官网：https://swagger.io/ 官方文档：https://swagger.io/docs/specification/about/ 预览配置完成后的效果 配置步骤添加依赖：pom.xml 12345678910111213141516171819202122232425262728293031&lt;!-- swagger --&gt;&lt;dependency&gt; &lt;groupId&gt;com.mangofactory&lt;/groupId&gt; &lt;artifactId&gt;swagger-springmvc&lt;/artifactId&gt; &lt;version&gt;1.0.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.8.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.8.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-core&lt;/artifactId&gt; &lt;version&gt;2.7.4&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.7.4&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt; &lt;version&gt;2.7.4&lt;/version&gt;&lt;/dependency&gt; 添加SwaggerConfig.java文件1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.weyoung.framework.config;/** * @Description Swagger2配置 * @Author Mr.wang * @Date 2019/3/11 */@Configuration@EnableWebMvc@EnableSwagger2@ComponentScan(basePackages = "com.weyoung.platform")public class SwaggerConfig &#123; @Bean public Docket systemApi() &#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() // 选择生成文档的路径 .apis(RequestHandlerSelectors.basePackage("com.weyoung.platform")) // 扫描com.weyoung.platform路径下的api文档 .paths(PathSelectors.any()) // 扫描所有路径 .build(); &#125; /** * @Author Mr.wang * @Description Api文件的说明 * @Param [] * @return springfox.documentation.service.ApiInfo */ private ApiInfo apiInfo() &#123; return new ApiInfoBuilder() .title("Swagger配置") //文档标题 .description("SSM-NOTE项目的Swagger文档配置") // 文档描述 .termsOfServiceUrl("https://www.wanglixia.top/") .version("v1.0.0")// 版本号 .build(); &#125; @Bean public RequestMappingInfoHandlerMapping requestMappingInfoHandlerMapping() &#123; return new RequestMappingHandlerMapping(); &#125;&#125; spring-mvc.xml 1234567&lt;!-- 将 springSwaggerConfig加载到spring容器 --&gt;&lt;bean class="springfox.documentation.swagger2.configuration.Swagger2DocumentationConfiguration" /&gt;&lt;!-- 将自定义的swagger配置类加载到spring容器 --&gt;&lt;bean class="com.weyoung.framework.config.SwaggerConfig" /&gt;&lt;mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/"/&gt;&lt;mvc:resources mapping="/webjars" location="classpath:/META-INF/resources/webjars/"/&gt; 访问URL：http://localhost:8080/ssm-note/swagger-ui.html 使用12345678910@ApiOperation(value = "获取用户组列表-分页", notes = "获取用户组列表-分页", response = SysGroup.class)@RequestMapping(value = "/queryList", method = RequestMethod.POST)@ResponseBodypublic PageInfo&lt;SysGroup&gt; querySysGroupList4Paging(HttpServletRequest request, HttpServletResponse response, @RequestBody SysGroup sysGroup) throws Exception &#123; Page&lt;SysGroup&gt; page = new Page&lt;&gt;(sysGroup.getOffset(), sysGroup.getLimit()); PageInfo&lt;SysGroup&gt; groupList = sysGroupService.queryUserList4Paging(page, sysGroup); return groupList;&#125; 测试点击页面出现的一项条目，看到 点击Try It Out!修改参数后点击Exexute，在下方查看返回结果。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>工具</tag>
        <tag>框架</tag>
        <tag>ssm</tag>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架整合笔记（七）配置Mybatis Generator]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B06-%E9%85%8D%E7%BD%AEMybatis%20Generator.html</url>
    <content type="text"><![CDATA[什么是Mybatis Generator&emsp;&emsp; MyBatis Generator（MBG）是MyBatis和iBATIS的代码生成器。能够为所有版本的MyBatis以及版本2.2.0之后的iBATIS版本生成代码。它将内省数据库表（或许多表），并将生成可用于访问表的工件。这减少了设置对象和配置文件以与数据库表交互的初始麻烦。 MyBatis Generator能够生成： 与表结构匹配的Java POJO; MyBatis/iBATIS兼容的SQL Map XML文件; 适用于MyBatis3.x Mapper基础结构的Dao接口; 怎么配置MBG本文中使用的工具是IDEA，使用Maven构建项目。 IDE：IDEA； 构建工具：Maven； 项目结构：Spring、SpringMVC、Mybatis pom.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;!-- Mybatis自动生成实体代码的插件 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt; &lt;version&gt;1.3.5&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 构建项目需要的信息 --&gt;&lt;build&gt; &lt;!-- 产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125; --&gt; &lt;finalName&gt;ssm-note&lt;/finalName&gt; &lt;!-- 子项目可以引用的默认插件信息。 --&gt; &lt;pluginManagement&gt; &lt;!-- 插件列表 --&gt; &lt;plugins&gt; &lt;!-- 。。。其他的一些配置。。。--&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;!-- 注意这个配置的结构在&lt;build&gt;&lt;/build&gt;中的位置，不然会不能引入插件 --&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.5&lt;/version&gt; &lt;configuration&gt; &lt;!--MBG配置文件--&gt; &lt;configurationFile&gt;src/main/resources/config/mybatis-generator.xml&lt;/configurationFile&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;configuration&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;!--dependencies依赖的组件--&gt; &lt;dependencies&gt; &lt;!--MySQL数据库驱动，你自己项目的数据库驱动--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.26&lt;/version&gt; &lt;/dependency&gt; &lt;!--MBG生成器--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt; &lt;version&gt;1.3.5&lt;/version&gt; &lt;/dependency&gt; &lt;!--MBG--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; **注意：plugins中配置的结构，不是在123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255### mybatis-generator.xml在pom.xml中配置了这个文件的路径，```src/main/resources/config/mybatis-generator.xml``` ，创建```mybatis-generator.xml```文件，其内容以及详细内容如下：**因为我的jdbc.properties文件是在resources/config/jdbc.properties这个位置配置的，因此你需要修改成你自己的。**```xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt; &lt;!--数据库驱动--&gt; &lt;properties resource=&quot;config/jdbc.properties&quot;/&gt; &lt;!-- 在MBG工作的时候，需要额外加载的依赖包 location属性指明加载jar/zip包的全路径--&gt; &lt;classPathEntry location=&quot;C:\Users\Mr.wang\.m2\repository\mysql\mysql-connector-java\5.1.26\mysql-connector-java-5.1.26.jar&quot;/&gt; &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表； 一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 --&gt; &lt;property name=&quot;autoDelimitKeywords&quot; value=&quot;false&quot;/&gt; &lt;!-- 生成的Java文件的编码 --&gt; &lt;property name=&quot;javaFileEncoding&quot; value=&quot;UTF-8&quot;/&gt; &lt;!-- 格式化java代码 --&gt; &lt;property name=&quot;javaFormatter&quot; value=&quot;org.mybatis.generator.api.dom.DefaultJavaFormatter&quot;/&gt; &lt;!-- 格式化XML代码 --&gt; &lt;property name=&quot;xmlFormatter&quot; value=&quot;org.mybatis.generator.api.dom.DefaultXmlFormatter&quot;/&gt; &lt;!-- 配置是否生成注释 --&gt; &lt;commentGenerator&gt; &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt; &lt;/commentGenerator&gt; &lt;!--数据库链接地址账号密码--&gt; &lt;jdbcConnection driverClass=&quot;$&#123;jdbc.mysql.driver&#125;&quot; connectionURL=&quot;$&#123;jdbc.mysql.url&#125;&quot; userId=&quot;$&#123;jdbc.mysql.username&#125;&quot; password=&quot;$&#123;jdbc.mysql.password&#125;&quot;&gt; &lt;/jdbcConnection&gt; &lt;!-- java类型处理器 用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl； 注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； --&gt; &lt;javaTypeResolver type=&quot;org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl&quot;&gt; &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt; &lt;/javaTypeResolver&gt; &lt;!-- java模型创建器，是必须要的元素 负责：1，key类（见context的defaultModelType）；2，java类；3，查询类 targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制； targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录 --&gt; &lt;!--生成Model类存放位置--&gt; &lt;javaModelGenerator targetPackage=&quot;com.weyoung.generator.pojo&quot; targetProject=&quot;src/main/java&quot;&gt; &lt;!-- for MyBatis3/MyBatis3Simple 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter； --&gt; &lt;!--&lt;property name=&quot;constructorBased&quot; value=&quot;false&quot;/&gt;--&gt; &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;!-- for MyBatis3 / MyBatis3Simple 是否创建一个不可变的类，如果为true， 那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类 --&gt; &lt;!--&lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt;--&gt; &lt;!-- 设置一个根对象， 如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项 注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括： 1，属性名相同，类型相同，有相同的getter/setter方法； --&gt; &lt;!--&lt;property name=&quot;rootClass&quot; value=&quot;com._520it.mybatis.domain.BaseDomain&quot;/&gt;--&gt; &lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt; &lt;/javaModelGenerator&gt; &lt;!-- 生成SQL map的XML文件生成器， 注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口）， 或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置 targetPackage/targetProject:同javaModelGenerator --&gt; &lt;!--生成映射文件存放位置--&gt; &lt;sqlMapGenerator targetPackage=&quot;com.weyoung.generator.mappers&quot; targetProject=&quot;src/main/java&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 targetPackage/targetProject:同javaModelGenerator type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）： 1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML； 2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中； 3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML； 注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER --&gt; &lt;!--生成Dao类存放位置--&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.weyoung.generator.dao&quot; targetProject=&quot;src/main/java&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;/javaClientGenerator&gt; &lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素 选择的table会生成一下文件： 1，SQL map文件 2，生成一个主键类； 3，除了BLOB和主键的其他字段的类； 4，包含BLOB的类； 5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选； 6，Mapper接口（可选） tableName（必要）：要生成对象的表名； 注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会 根据设置的schema，catalog或tablename去查询数据表，按照下面的流程： 1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询； 2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找； 3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找； 4，否则，使用指定的大小写格式查询； 另外的，如果在创建表的时候，使用的&quot;&quot;把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名； 这个时候，请设置delimitIdentifiers=&quot;true&quot;即可保留大小写格式； 可选： 1，schema：数据库的schema； 2，catalog：数据库的catalog； 3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName 4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面； 5，enableInsert（默认true）：指定是否生成insert语句； 6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）； 7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句； 8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)； 9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）； 10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句； 11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）； 12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）； 13，modelType：参考context元素的defaultModelType，相当于覆盖； 14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性） 15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性 注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写； --&gt; &lt;!--生成对应表及类名--&gt; &lt;table tableName=&quot;sys_menu&quot; domainObjectName=&quot;SysMenu&quot; enableCountByExample=&quot;true&quot; enableUpdateByExample=&quot;true&quot; enableDeleteByExample=&quot;true&quot; enableSelectByExample=&quot;true&quot; selectByExampleQueryId=&quot;true&quot;&gt; &lt;!-- 参考 javaModelGenerator 的 constructorBased属性--&gt; &lt;!--&lt;property name=&quot;constructorBased&quot; value=&quot;false&quot;/&gt;--&gt; &lt;!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； --&gt; &lt;!--&lt;property name=&quot;ignoreQualifiersAtRuntime&quot; value=&quot;false&quot;/&gt;--&gt; &lt;!-- 参考 javaModelGenerator 的 immutable 属性 --&gt; &lt;!--&lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt;--&gt; &lt;!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 --&gt; &lt;!--&lt;property name=&quot;modelOnly&quot; value=&quot;false&quot;/&gt;--&gt; &lt;!-- 参考 javaModelGenerator 的 rootClass 属性 &lt;property name=&quot;rootClass&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- 参考javaClientGenerator 的 rootInterface 属性 &lt;property name=&quot;rootInterface&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog &lt;property name=&quot;runtimeCatalog&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema &lt;property name=&quot;runtimeSchema&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename &lt;property name=&quot;runtimeTableName&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- 注意，该属性只针对MyBatis3Simple有用； 如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件； --&gt; &lt;!--&lt;property name=&quot;selectAllOrderByClause&quot; value=&quot;age desc,username asc&quot;/&gt;--&gt; &lt;!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --&gt; &lt;!--&lt;property name=&quot;useActualColumnNames&quot; value=&quot;false&quot;/&gt;--&gt; &lt;!-- generatedKey用于生成生成主键的方法， 如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选 column:主键的列名； sqlStatement：要生成的selectKey语句，有以下可选项： Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL() DB2 :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL() DB2_MF :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1 Derby :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL() HSQLDB :相当于selectKey的SQL为：CALL IDENTITY() Informix :相当于selectKey的SQL为：select dbinfo(&apos;sqlca.sqlerrd1&apos;) from systables where tabid=1 MySql :相当于selectKey的SQL为：SELECT LAST_INSERT_ID() SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY() SYBASE :相当于selectKey的SQL为：SELECT @@IDENTITY JDBC :相当于在生成的insert元素上添加useGeneratedKeys=&quot;true&quot;和keyProperty属性 &lt;generatedKey column=&quot;&quot; sqlStatement=&quot;&quot;/&gt; --&gt; &lt;!-- 该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候， 比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等； 那么就可以设置searchString为&quot;^CUST_&quot;，并使用空白替换，那么生成的Customer对象中的属性名称就不是 custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email； 注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的， 如果使用了columnOverride元素，该属性无效； &lt;columnRenamingRule searchString=&quot;&quot; replaceString=&quot;&quot;/&gt; --&gt; &lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性； column:要重新设置的列名； 注意，一个table元素中可以有多个columnOverride元素哈~ --&gt; &lt;!--&lt;columnOverride column=&quot;username&quot;&gt;--&gt; &lt;!-- 使用property属性来指定列要生成的属性名称 --&gt; &lt;!--&lt;property name=&quot;property&quot; value=&quot;userName&quot;/&gt;--&gt; &lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名 &lt;property name=&quot;javaType&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- jdbcType用于指定该列的JDBC类型 &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler 只会生成类似：where id = #&#123;id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler&#125;的参数描述 &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- 参考table元素的delimitAllColumns配置，默认为false &lt;property name=&quot;delimitedColumnName&quot; value=&quot;&quot;/&gt; --&gt; &lt;!--&lt;/columnOverride&gt;--&gt; &lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 column:指定要忽略的列的名字； delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false 注意，一个table元素中可以有多个ignoreColumn元素 &lt;ignoreColumn column=&quot;deptId&quot; delimitedColumnName=&quot;&quot;/&gt; --&gt; &lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 生成代码配置完成之后，在如下位置，双击mybatis-generator:generate即可执行 生成的代码在src/main/java/com.weyoung.generator里面，如下： 相关文章推荐 Spring系列学习之IoC与AOP SSM框架整合笔记（一）详细注释 SSM框架整合笔记（二）配置Druid和Webservice SSM框架整合笔记（三）配置Tiles、FreeMarker SSM框架整合笔记（四）使用注解配置切面 Spring系列学习之IoC与AOP 源码下载&emsp;&emsp; 该项目持续更新中，会在代码以及该文档里面详细注释和介绍。项目托管在码云开源平台上，持续更新项目源码链接：https://gitee.com/nelucifer/ssm-note，点击克隆/下载获取该项目。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>工具</tag>
        <tag>框架</tag>
        <tag>ssm</tag>
        <tag>Mybatis Generator</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架整合笔记（六）缓存配置Ehcache]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B05-%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AEEhcache.html</url>
    <content type="text"><![CDATA[前言&emsp;&emsp; 缓存（Caching）可以存储经常会用到的信息，在需要的时候，直接返回这些信息。Spring对缓存的支持有两种方式：1）注解驱动的缓存；2）XML声明的缓存；本文使用第二种方式来实际进行配置。 本文内容 缓存内容详解 配置Ehcache缓存 配置Mybatis Generator 缓存内容详解&emsp;&emsp; 使用&lt;code&gt;@EnableCaching&lt;/code&gt;和 的工作方式是相同的，都会创建一个切面并触发Spring缓存注解的切点。根据所使用的注解以及缓存的状态，这个切面会从缓存中获取数据，将数据添加到缓存之中或者从缓存中移除某个值。在启用注解驱动的缓存时，还声明了一个缓存管理器的bean。缓存管理器是Spring缓存抽象的核心，能够与多个流行的缓存实现进行集成。 如何启用缓存1234567891011121314/** * @Description 使用@EnableCaching启用注解驱动的缓存 * @Author Mr.wang * @Date 2019/3/9 */@Configuration@EnableCaching // 启用缓存public class CachingConfig &#123; @Bean public CacheManager cacheManager() &#123; // 声明缓存管理器 return new ConcurrentMapCacheManager(); &#125;&#125; XML方式配置方式如下12345&lt;!--Ehcache配置--&gt;&lt;!-- 启用缓存 --&gt;&lt;cache:annotation-driven /&gt;&lt;!-- 声明缓存管理器 --&gt;&lt;bean id="cacheManager" class="org.springframework.cache.concurrent.ConcurrentMapCacheManager" /&gt; ConcurrentMapCacheManager 使用 java.util.concurrent.ConcurrentHashMap 作为缓存存储，这个缓存存储是基于内存的，因此其生命周期是与应用关联的，不太适合于生产级别的大型企业级应用程序，因此有其他的缓存管理器方案可供使用。 配置缓存管理器Spring中内置了如下几种缓存管理器实现： SimpleCacheManager NoOpCacheManager ConcurrentMapCacheManager CompositeCacheManager EhCacheCacheManager… SpringData提供的缓存管理器： RedisCacheManager（来自于Spring Data Redis项目） GemfireCacheManager（来自于Spring Data GemFire项目） 1234567891011121314151617181920212223242526272829import net.sf.ehcache.CacheManager;import org.springframework.cache.annotation.EnableCaching;import org.springframework.cache.ehcache.EhCacheCacheManager;import org.springframework.cache.ehcache.EhCacheManagerFactoryBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.io.ClassPathResource;/** * @Description 使用@EnableCaching启用注解驱动的缓存 * @Author Mr.wang * @Date 2019/3/9 */@Configuration@EnableCaching // 启用缓存public class CachingConfig &#123; @Bean public EhCacheCacheManager cacheManager(CacheManager cm) &#123; // 配置EhCacheCacheManager return new EhCacheCacheManager(cm); &#125; @Bean public EhCacheManagerFactoryBean ehcache() &#123; EhCacheManagerFactoryBean ehCacheFactoryBean = new EhCacheManagerFactoryBean(); ehCacheFactoryBean.setConfigLocation(new ClassPathResource("")); return ehCacheFactoryBean; &#125;&#125; 也可以通过CompositeCacheManager使用多个缓存管理器。 一、为方法添加注解支持缓存以下注解如果放在单独的方法上时，注解所描述的缓存行为只作用于这个方法上，如果放在类级别，那么缓存行为就会应用到这个类的所有方法上。 注解 描述 @Cacheable Spring在调用方法之前，首先应该在缓存中查找方法的返回值。如果这个值能够找到，就会返回缓存的值。否则，这个方法就会被调用，返回值就会放到缓存之中 @CachePut Spring应该将方法的返回值放到缓存中，在方法的调用前并不会检查缓存，方法始终会被调用 @CacheEvict Spring应该在缓存中清除一个或多个条目 @Caching 一个分组的注解，能够同时应用多个其他的缓存注解 填充缓存@Cacheable和@CachePut注解都可以填充缓存。 示例：1234@Cacheable(value="spittleCache")Spittle findOne(long id)&#123; // ...&#125; 自定义缓存key默认的缓存key要基于方法的参数来确定，参数是一个map，那么其缓存的key也是这个map，因此需要把默认的key改为map的key，而不是这个map，所以需要自定义缓存key。 Spring 提供了多个用来定义缓存规则的SpEL扩展|表达式|描述||:—-|:—-||#root.args|传递给缓存方法的参数，形式为数组||#root.caches|该方法执行时所对应的缓存，形式为数组||#root.target|目标对象||#root.targetClass|目标对象的类，是#root.target.class的简写形式||#root.method|缓存方法||#root.methodName|缓存方法的名字，是#root.method.name的简写形式||#result|方法调用的返回值（不能用在@Cacheable主街上）||#Argument|任意的方法参数名（如#argName）或参数索引（如#a0或#p0）| 12@Cacheable(value="spittleCache" key="#result.id")Spittle save(Spittle spittle); 条件化缓存 前面说的是通过为方法添加Spring的缓存注解，Spring就会围绕着这个方法创建一个缓存切面。条件化缓存是说将缓存功能关闭的一些场景。@Cacheable和@CachePut提供两个属性用以实现条件化缓存：unless和condition。如果unless属性的SpEL表达式计算结果为true，缓存方法返回的数据不会放到缓存中。如果condition属性的SpEL表达式计算结果为false，对于这个方法缓存就会被禁用掉。 unless属性只能阻止将对象放进缓存，但是在这个方法调用的时候，依然会去缓存中进行查找。如果condition的表达式计算结果为false，这个方法调用时，缓存是被禁用的，也就不会去缓存中查找，返回值也不会放进缓存中。 例：12345678910// unless用法，对于属性中包含NoCache的Spittle对象，不对其进行缓存@Cacheable(value="spittleCache" unless="#result.message.contains('NoCache')")Spittle findOne(long id);// condition用法，如果findOne方法调用时，参数值小于10，不会在缓存中进行查找，返回的数据也不会放进缓存中@Cacheable(value="spittleCache" unless="#result.message.contains('NoCache')" condition="#id &gt;= 10")Spittle findOne(long id); 移除缓存条目@CacheEvict不会往缓存中添加任何东西，且如果带有该注解的方法被调用的话，缓存中的一个或更多的条目会被移除。 12@CacheEvict("spittleCache")void remove(long spittleId); 注意：@Cacheable和@CacheEvict必须应用在返回值非void的方法上，@CacheEvict可以放在任意的方法上，甚至void方法 @Cacheable注解的属性，指定哪些缓存条目应该被移除掉|属性|类型|描述||:—-|:—-|:—-||value|String[]|要使用的缓存名称||key|String|SpEL表达式，用来计算自定义的缓存key||condition|String|SpEL表达式，如果得到的值是false的话，缓存不会应用到方法调用上||allEntries|boolean|如果为true的话，特定缓存的所有条目都会被移除掉||beforeInvoication|boolean|如果为true的话，在方法调用之前移除条目，如果为false（默认值）的话，在方法成功调用之后再移除条目| 二、使用XML声明缓存 元素 描述 启用注解驱动的缓存，等同于Java配置中的@EnableCaching 定义缓存通知。结合，将通知应用到切点上 在缓存通知中定义缓存规则 指明某个方法要进行缓存。等同于@Cacheable注解 指明某个方法要填充缓存，但不会考虑缓存中时候已有匹配的值，等同于@CachePut注解 指明某个方法要从缓存中移除一项或多项，等同于@CacheEvict注解 填充缓存123&lt;cache:cacheable&gt;&lt;!--示例--&gt;&lt;cache:cacheable cache="spittleCache" method="findRecent" /&gt; 自定义缓存key1&lt;cache:cache-put cache="spittleCache" method="save" key="#result.id"/&gt; 移除缓存条目1&lt;cache:cache-evict cache="spittleCache" method="remove" /&gt; 配置Ehcache缓存Ehcache的主要特性有: 快速、精干，简单； 多种缓存策略； 缓存数据有两级:内存和磁盘，因此无需担心容量问题； 缓存数据会在虚拟机重启的过程中写入磁盘； 可以通过RMI、可插入API等方式进行分布式缓存； 具有缓存和缓存管理器的侦听借口； 支持多缓存管理器实例，以及一个实例的多个缓存区域； 提供Hibernate 的缓存实现； 上面的声明应该改为以下方式 pom.xml添加配置 1234567891011&lt;!-- Ehcache --&gt;&lt;dependency&gt; &lt;groupId&gt;org.ehcache&lt;/groupId&gt; &lt;artifactId&gt;ehcache&lt;/artifactId&gt; &lt;version&gt;3.6.3&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.caches&lt;/groupId&gt; &lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt; &lt;version&gt;1.3.5&lt;/version&gt;&lt;/dependency&gt; 添加spring-ehcache.xml并配置12345678910111213141516171819202122232425&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cache="http://www.springframework.org/schema/cache" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd"&gt; &lt;description&gt;Ehcache缓存配置文件&lt;/description&gt; &lt;!--Ehcache配置--&gt; &lt;!-- 启用缓存 --&gt; &lt;cache:annotation-driven cache-manager="cacheManager"/&gt; &lt;!-- 声明缓存管理器 --&gt; &lt;bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"&gt; &lt;property name="configLocation" value="classpath:config/ehcache.xml"/&gt; &lt;!-- true:一个cacheManager对象共享，false：多个对象独立 --&gt; &lt;property name="shared" value="true"/&gt; &lt;!-- 这里是关键！！！没有必错 --&gt; &lt;/bean&gt; &lt;bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"&gt; &lt;property name="cacheManager" ref="ehcache"/&gt; &lt;/bean&gt;&lt;/beans&gt; spring-config.xml中添加配置12&lt;!-- 加载Ehcache缓存配置文件 --&gt;&lt;import resource="classpath:config/spring-ehcache.xml"/&gt; 在resources/config文件夹下添加ehcache.xml并添加配置1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!-- 这个name和updateCheck 都按这样配置最好，不然启动时会在前台报错403，IOException--&gt;&lt;ehcache name="ehcache" updateCheck="false"&gt; &lt;!-- 缓存位置 java.io.tmpdir:Java临时目录 --&gt; &lt;diskStore path="java.io.tmpdir/ehcache"/&gt; &lt;!-- 默认缓存 --&gt; &lt;defaultCache maxEntriesLocalHeap="10000" eternal="false" overflowToDisk="true" timeToIdleSeconds="100" timeToLiveSeconds="120" diskPersistent="false" maxEntriesLocalDisk="10000000" diskExpiryThreadIntervalSeconds="120" memoryStoreEvictionPolicy="LRU"&gt; &lt;/defaultCache&gt; &lt;!--name：Cache的唯一标识 maxElementsInMemory：内存中最大缓存对象数。 maxElementsOnDisk：磁盘中最大缓存对象数，若是0表示无穷大。 eternal：Element是否永久有效，一但设置了，timeout将不起作用。 overflowToDisk：配置此属性，当内存中Element数量达到maxElementsInMemory时，Ehcache将会Element写到磁盘中。 timeToIdleSeconds：设置Element在失效前的允许闲置时间。仅当element不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。 timeToLiveSeconds：设置Element在失效前允许存活时间。最大时间介于创建时间和失效时间之间。仅当element不是永久有效时使用，默认是0.，也就是element存活时间无穷大。 diskPersistent：是否缓存虚拟机重启期数据。（Server重启时将缓存序列化到本地，后再加载，保证缓存在重启后依然有效）。 diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。 diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。 memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。这里比较遗憾，Ehcache并没有提供一个用户定制策略的接口，仅仅支持三种指定策略，感觉做的不够理想。--&gt; &lt;!-- 系统缓存，用来缓存菜单、字典等 --&gt; &lt;cache name="systemCatch" maxElementsInMemory="1000" eternal="false" timeToIdleSeconds="10" timeToLiveSeconds="30" overflowToDisk="true" diskPersistent="false" memoryStoreEvictionPolicy="LRU"/&gt;&lt;/ehcache&gt; 这三个文件配置完了之后，Ehcache的配置也就完成了，下面我们说一下测试的方法。 测试缓存配置SysMenuServiceImpl.java 中添加如下代码。1234567891011121314151617@Servicepublic class SysMenuServiceImpl extends BaseService&lt;SysMenu&gt; implements SysMenuService &#123; private static final Logger logger = Logger.getLogger(SysMenuServiceImpl.class); @Autowired SysMenuDao sysMenuDao; // value对应ehcache.xml中的cache name，key就是这个缓存条目的key @Cacheable(value="systemCatch", key="'SysMenuServiceImpl.systemCatch'") @Override public List&lt;SysMenu&gt; findMenuList(SysMenu sysMenu) &#123; List&lt;SysMenu&gt; sysMenus = sysMenuDao.queryMenuList(sysMenu); Long timestamp = System.currentTimeMillis(); logger.error("timestamp&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + timestamp); return sysMenus; &#125;&#125; SysMenuController.java 中添加如下代码，观察start 和 end方法之间会不会打印sql以及中间打印时间的日志。12345678910@RequestMapping(value = "sysMenuList")@ResponseBodypublic List&lt;SysMenu&gt; getSysMenuList() &#123; SysMenu sysMenu = new SysMenu(); sysMenu.setMenuId("01"); logger.info("-----------------------------------------------findMenuList start-----------------------------------"); List&lt;SysMenu&gt; menuList = sysMenuService.findMenuList(sysMenu); logger.info("-----------------------------------------------findMenuList end-----------------------------------"); return menuList;&#125; 具体效果如下： 问题处理问题一1[ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.webresources.Cache.backgroundProcess The background cache eviction process was unable to free [10] percent of the cache for Context [/lx_note] - consider increasing the maximum size of the cache. After eviction approximately [9,686] KB of data remained in the cache. 并没有报错，只是Console打印出来信息，提示不能自动释放10%的缓存，需要调大cache的最大容量； 解决方法：Tomcat8 的conf/目录下的context.xml添加配置,默认大小是10240即10M，这边给调大了10倍。1&lt;Resources cachingAllowed=&quot;true&quot; cacheMaxSize=&quot;102400&quot; /&gt; 相关文章推荐 Spring系列学习之IoC与AOP SSM框架整合笔记（一）详细注释 SSM框架整合笔记（二）配置Druid和Webservice SSM框架整合笔记（三）配置Tiles、FreeMarker SSM框架整合笔记（四）使用注解配置切面 Spring系列学习之IoC与AOP 源码下载&emsp;&emsp; 该项目持续更新中，会在代码以及该文档里面详细注释和介绍。项目托管在码云开源平台上，持续更新项目源码链接：https://gitee.com/nelucifer/ssm-note，点击克隆/下载获取该项目。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>ssm</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架整合笔记（五）统一异常处理]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B04-%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html</url>
    <content type="text"><![CDATA[前言&emsp;&emsp; 在Java项目中，在控制器、业务层、数据库操作的过程中，总是会遇到各种可控和不可控的异常需要处理，如果我们在每一个异常可能出现的地方都手动使用try{}catch{}单独处理异常的话，会产生的最大的问题就是：异常处理过程中的返回错误信息、日志打印都可能不统一，导致代码冗余和不可维护。因此我们使用统一的方式处理异常： 本文内容一、SpringMVC处理异常方式： 使用@ExceptionHandler注解：弊端：进行异常处理的方法必须与出错的方法在同一个Controller里面； 实现HandlerExceptionResolver接口：可以进行全局的异常控制。 使用@ControllerAdvice注解：使用了该注解之后，需要进行异常处理的方法与出错的方法就不必须在同一个Controller中了。@ControllerAdvice + @ExceptionHandler也可以实现全局的异常捕捉。 二、为控制器添加通知 如果要在多个控制器中处理异常，使用@ExceptionHandler注解是很有用的，但是如果多个控制器类中都会抛出异常，那么所有的控制器中都有重复相同的@ExceptionHandler方法。因此，需要创建一个基础的控制器类，所有的控制器要扩展这个类，从而继承通用的@ExceptionHandler方法。 &emsp;&emsp; Spring3.2引入了一个新的解决方案：控制器通知。控制器通知是所有带有@ControllerAdvice注解的类，这个类会包含一个或多个如下类型的方法： @ExceptionHandler注解标注的方法； @InitBinder注解标注的方法； @ModelAttribute注解标注的方法； &emsp;&emsp; @ControllerAdvice可以将所有的@ExceptionHandler方法收集到一个类中，把所有的控制器异常进行一致的处理。 添加1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253```javapackage com.weyoung.framework.config;import com.weyoung.framework.exception.BusinessException;import com.weyoung.framework.web.Message;import com.weyoung.platform.pojo.UserInfo;import org.apache.log4j.Logger;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;import static com.weyoung.framework.common.Constants.SESSION_DEFAULT;import static com.weyoung.framework.common.ErrorConstants.EXCEPTION_SYSTEM_MSG;/** * @作者 weyoung * @功能描述 给控制器请求添加默认常用参数，统一处理异常 * @日期 2019/3/4 */@ControllerAdvicepublic class ControllerAdviceHandler &#123; private static final Logger logger = Logger.getLogger(ControllerAdviceHandler.class); /** * @Description // 添加用户信息，可以在Controller中获取 **/ @ModelAttribute(&quot;BasUser&quot;) public UserInfo basUser(HttpServletRequest request) &#123; HttpSession session = request.getSession(true); UserInfo user = (UserInfo) session.getAttribute(SESSION_DEFAULT); return user; &#125; @ExceptionHandler(value = Exception.class) @ResponseBody public Message exceptionHandler(Exception ex) &#123; // 处理业务异常 if (ex instanceof BusinessException) &#123; logger.error(&quot;BusinessException&quot;, ex); // 返回业务异常code和message; return Message.failed(((BusinessException) ex).getCode(), ex.getMessage()); &#125; else &#123; logger.error(&quot;Exception&quot;, ex); return Message.failed(Message.FAILED_CODE, EXCEPTION_SYSTEM_MSG); &#125; &#125;&#125; 三、处理业务异常BusinessException.java 12345678910111213141516171819202122232425262728293031package com.weyoung.framework.exception;import com.weyoung.framework.web.Message;/** * @作者 weyoung * @功能描述 业务异常处理 * @日期 2019/3/4 */public class BusinessException extends RuntimeException &#123; private int code; public BusinessException(String message) &#123; super(message); this.code = Message.FAILED_CODE; &#125; public BusinessException(int code, String message) &#123; super(message); this.code = code; &#125; public int getCode() &#123; return code; &#125; public void setCode(int code) &#123; this.code = code; &#125;&#125; 测试，在Controller中throw一个Exception，发现可以进入该通知了，配置成功。 在业务处理类中遇到可预知或不可预知的错误，直接由程序拦截处理，我们开发时只管throw Exception即可，控制器通知可以帮助我们处理和返回异常信息。 个人认为使用消息实体比如本文的Message类来统一规范地处理异常，不同的业务异常最好定义单独的error code，产生异常的信息和具体原因整理成文档，这样可以在上线之后不至于把敏感的错误信息返回到前端，又便于运维、实施同事能够快速地定位异常。 相关文章推荐 Spring系列学习之IoC与AOP SSM框架整合笔记（一）详细注释 SSM框架整合笔记（二）配置Druid和Webservice SSM框架整合笔记（三）配置Tiles、FreeMarker SSM框架整合笔记（四）使用注解配置切面 源码下载&emsp;&emsp; 该项目持续更新中，会在代码以及该文档里面详细注释和介绍。项目托管在码云开源平台上，持续更新项目源码链接：https://gitee.com/nelucifer/ssm-note，点击克隆/下载获取该项目。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>ssm</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git基本使用]]></title>
    <url>%2F%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%2F%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-Git-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html</url>
    <content type="text"><![CDATA[前言&emsp;&emsp; Git是一个开源的分布式版本控制系统，也是个内容管理系统(CMS),工作管理系统等。常见的网站如Github、Gitee、coding使用的都是Git。Git能够帮助我们记录每一次的修改和提交，创建分支、合并分支等。本文主要介绍Git的基本操作和Git 图形化界面 Windows版安装 下载链接：https://gitforwindows.org/ 打开-&gt;安装-&gt;一路next-&gt;finish。 安装完成后空白界面右键，如下图示，出现GUI Here```和 ```Git Bash Here```两个选项：123456789101112![git_install_2-201934201420](http://img.wanglixia.top/git_install_2-201934201420.png)3. 点击```Git Bash Here```选项，弹出Git命令窗口，可以在该窗口进行Git操作；## 配置使用Git命令窗口，输入以下命令配置全局参数用户名和邮箱地址，使用该参数表示本地所有Git仓库都使用这个配置：```bashgit config --global user.name &quot;weyoung&quot;git config --global user.email &quot;ne_lucifer@163.com&quot; 工作流程 Git的相关概念 远程仓库（remote）：Git的远程仓库； 工作空间（workspace）： 仓库文件夹里面除了.git目录以外的内容； 本地仓库（Repository）：使用commit命令将缓存区文件提交到本地仓库； 缓存区（stage或者index）：本地修改完文件之后需要add到缓存区，一般存放在.get目录下的index文件中； 一、Git常用命令1. 创建仓库和初始化这个操作主要用于本地创建源码或源文档，然后提交推送到远程仓库。新建目录localRepo执行以下命令初始化为Git仓库，.git是一个隐藏的目录：1git init 或1git init localRepo localRepo 为本地仓库 2. 将文件添加到版本控制在localRepo中新建一个文件README.txt，使用以下命令可以将文件添加到缓存区（暂存区）。12git add README.txtgit add *.java # 这个命令就是把.java结尾的文件提交到暂存区 3. 将暂存区文件提交到本地仓库使用如下命令将暂存区文件提交到本地仓库，-m 后面的就是提交的说明内容。1git commit -m &apos;这里填写提交信息&apos; 4. 取消已缓存的内容1git reset HEAD README.txt 5. Git分支管理5.1. 创建分支命令创建分支：1git branch 分支名称 列出本地所有分支：1git branch 5.2. 切换分支命令1git checkout 分支名称 5.3. 删除分支1git branch -d 分支名称 5.4. 分支合并本地有多个分支且非当前分支有了更改的内容，通过以下命令合并到当前分支中。如：本地有两个分支，一个newbranch、一个master（当前分支），可以将newbranch合并到master分支中。 1git merge newbranch 5.5. 查看提交历史1git log 6. 从远程仓库克隆代码到本地（常用）这个是在日常工作中比较常用的命令，如已经有了现成的Git服务器和远程仓库，我们需要把远程仓库的项目克隆到本地。使用以下命令： git clone &lt;远程仓库路径&gt; 1git clone https://gitee.com/nelucifer/ssm-note.git 7. 从远程仓库获取更新123git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;# 示例如下：git pull origin next:master 8. 推送代码到远程仓库本地新增了一个文件， 需要使用 add``` 命令添加到缓存区；123456789* 然后使用 ```git commit``` 命令提交到本地仓库；* 最后使用 ```git push``` 命令推送到远程仓库。示例代码如下：```bashgit push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;# 示例如下git push origin master 9. 总结 git commit：是将本地修改过的文件提交到本地库中； git push：是将本地库中的最新信息发送给远程库； git pull：是从远程获取最新版本到本地，并自动merge； git fetch：是从远程获取最新版本到本地，不会自动merge； git merge：是用于从指定的commit(s)合并到当前分支，用来合并两个分支； 二、Git图形化工具Source TreeSource Tree号称是最好用的Git GUI工具，很适合上手，如下：包含拉取、提交、推送、获取、添加标签、添加分支，无需使用命令，基本可满足日常开发使用： SourceTree 下载SourceTree 下载地址：https://www.sourcetreeapp.com/ SourceTree 安装配置双击下载的exe文件进行安装，发现强制使用Bitbucket登录，目前免密登录的方式已经失效。老老实实注册Bitbucket吧。如果嫌比较繁琐的话，可以使用Git自带的GUI工具、tortoisegit等，也可以使用IDEA相关的软件可以使用IDEA自带的GIT工具吧。 选择 Create one for free链接，注册账户，完成之后点击Bitbucket授权，点击下一步。 安装完成之后，输入我们的项目的远程仓库地址： 拉取该项目，完成项目修改之后暂存-&gt;修改描述-&gt;提交，提交时会弹出账号密码框，输入账号密码即可。可以看到账户密码已经被添加了： 完成。 相关文章推荐 易百教程-Git教程：https://www.yiibai.com/git/ 分享觉得好看的话，请点击下方二维码扫描加关注，或者点个好看哦~~ 更多联系方式 平台 链接 预览项目： https://nelucifer.gitee.io/ 个人微信公众号： weyoung segmentfault: https://segmentfault.com/u/nelucifer CSDN: https://me.csdn.net/wlx001 简书： https://www.jianshu.com/u/99211cc23788 掘金： https://juejin.im/user/59b08c575188250f4850e80e]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>工具</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架整合笔记（四）使用注解配置切面]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B03-%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE%E5%88%87%E9%9D%A2.html</url>
    <content type="text"><![CDATA[前言&emsp;&emsp; 面向切面编程（aspect-oriented programming，AOP），前面的文章里面描述AOP主要的作用是：日志记录，性能统计，安全控制，事务处理，异常处理，权限登录等等。本文中，我们使用切面来配置日志记录，其他的使用方式基本和这个一样。 相关文章 Spring系列学习之IoC与AOP SSM框架整合笔记（一）详细注释 SSM框架整合笔记（二）配置Druid和Webservice SSM框架整合笔记（三）配置Tiles、FreeMarker Spring系列学习之IoC与AOP 源码下载&emsp;&emsp; 该项目持续更新中，会在代码以及该文档里面详细注释和介绍。项目托管在码云开源平台上，持续更新项目源码链接：https://gitee.com/nelucifer/ssm-note，点击克隆/下载获取该项目。 本文内容一、注解&emsp;&emsp; 注解(Annotation)：一个注解就是一个类，@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。 定义注解格式： public @interface 注解名 {定义体，定义体中的方法名称就是注解参数名称} 注解参数的可支持数据类型： 所有基本数据类型（int、float、boolean、byte、double、char、long、short）； String 类型； Class 类型； enum 枚举类型； Annotation类型； 以上所有类型的数组 二、面向切面编程&emsp;&emsp;面向切面编程（AOP）：利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。可以参考本文内容：Spring系列学习之IoC与AOP；切面就是为了实现各个业务模块通用功能的复用，比如业务操作（Service）中我们需要记录日志，就使用切面来织入各业务模块。5种通知类型：前置通知、后置通知、环绕通知、返回通知、异常通知。 Spring 提供 配置注解驱动的切面一、添加依赖pom.xml 123456789101112131415&lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aop&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt; 二、配置注解类这个类是为了打印日志的时候声明该方法作用，也就是方法的注释。 Log.java 1234567891011package com.weyoung.annotation;import java.lang.annotation.*;@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface Log &#123; String value() default "";&#125; 该注解的使用方式，如下： 1234567// 方法名@Log("登录")@RequestMapping(value = "/login", method = RequestMethod.POST)public String systemLogin(HttpServletRequest request, HttpServletResponse response) throws Exception &#123; String viewName = "/welcome"; return viewName;&#125; 三、配置切面LogAspect.java代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869package com.weyoung.aspect;//import ...; 导入包/** * @Author Mr.wang * @Description // 配置业务处理-系统日志切面 * @Date 2019/3/3 2:19 * @Param * @return **/@Aspect@Componentpublic class LogAspect &#123; @Autowired LoggerService loggerService; /** * @Author Mr.wang * @Description // 异常日志打印到日志文件中 **/ private static final Logger logger = LogManager.getLogger(LogAspect.class); /** * @Author Mr.wang * @Description // Controller层切点 **/ @Pointcut("@annotation(com.weyoung.annotation.Log)") public void logPointCut() &#123; &#125; /** * @Author Mr.wang * @Description // 环绕通知 **/ @Around("logPointCut()") public Object aroundMethod(ProceedingJoinPoint joinPoint) throws Throwable &#123; logger.info("进入切点..."); StopWatch stopWatch = new StopWatch(); stopWatch.start(); MethodSignature signature = (MethodSignature) joinPoint.getSignature(); Method method = signature.getMethod(); // 获取注解上的描述 Log log = method.getAnnotation(Log.class); String description = ""; if (log != null) &#123; description = log.value(); &#125; // 类名 String className = joinPoint.getTarget().getClass().getName(); // 方法名 String methodName = signature.getName(); // 方法参数 Object[] args = joinPoint.getArgs(); // 进入方法 logger.info("进入方法..."); Object returnValue = joinPoint.proceed(args); stopWatch.stop(); logger.info("执行之后..."); stopWatch.getTotalTimeMillis() // 方法执行之后 ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes(); if (attributes != null) &#123; HttpServletRequest request = attributes.getRequest(); &#125; return returnValue; &#125;&#125; 四、Spring装配该日志切面spring-mvc.xml 123&lt;!-- 启动AOP AspectJ注解自动代理 --&gt;&lt;aop:aspectj-autoproxy /&gt;&lt;bean class="com.weyoung.aspect.LogAspect" /&gt; 注意： 在spring-mvc中添加如上配置即可，不需要再添加其他扫描。配置的日志执行后如下： 使用AOP方式配置事务使用xml方式管理AOP事务； 一、添加依赖pom.xml 12345678&lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt; 二、配置AOP事务spring-config.xml 12345678910111213141516171819202122232425262728293031&lt;!-- 事务管理 --&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="MySQLDataSource"/&gt; &lt;/bean&gt; &lt;!-- 配置事务通知属性 --&gt; &lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt; &lt;!-- 定义事务传播属性，添加事务的方法名，因此service命名时需要遵循该原则 --&gt; &lt;tx:attributes&gt; &lt;tx:method name="insert*" propagation="REQUIRED"/&gt; &lt;tx:method name="update*" propagation="REQUIRED"/&gt; &lt;tx:method name="edit*" propagation="REQUIRED"/&gt; &lt;tx:method name="save*" propagation="REQUIRED"/&gt; &lt;tx:method name="add*" propagation="REQUIRED"/&gt; &lt;tx:method name="new*" propagation="REQUIRED"/&gt; &lt;tx:method name="set*" propagation="REQUIRED"/&gt; &lt;tx:method name="remove*" propagation="REQUIRED"/&gt; &lt;tx:method name="delete*" propagation="REQUIRED"/&gt; &lt;tx:method name="change*" propagation="REQUIRED"/&gt; &lt;tx:method name="get*" propagation="REQUIRED" read-only="true"/&gt; &lt;tx:method name="find*" propagation="REQUIRED" read-only="true"/&gt; &lt;tx:method name="load*" propagation="REQUIRED" read-only="true"/&gt; &lt;tx:method name="*" propagation="REQUIRED" read-only="true"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!-- 配置事务切面 --&gt; &lt;aop:config&gt; &lt;aop:pointcut id="serviceOperation" expression="execution(* com.weyoung.service.*.*Impl.*(..))"/&gt; &lt;aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/&gt; &lt;/aop:config&gt; 三、测试事务配置 代码添加保存方法，确保该保存方法能够正常保存。 添加两条参数，确保一条可以成功一条不能成功，在一个符合事务配置格式的service方法中调用该方法； 查询数据库：无数据插入，后台报错； 添加两条参数，确保一条可以成功一条不能成功，注释掉事务配置切面，再调用方法进行测试； 查询数据库：有一条数据插入，后台报错； 结论：事务配置成功，可正常回滚。 service中方法示例代码如下，具体内容可在文首查看源码或留言讨论： 123456789101112131415161718192021222324252627282930public void saveTest() &#123; Map&lt;String, Object&gt; map1 = new HashMap&lt;&gt;(); map1.put("userId", "007"); map1.put("petname", "genius"); map1.put("name", "weyoung"); map1.put("sex", "man"); map1.put("birth", "2019-03-03"); map1.put("icon", "icon"); map1.put("phone", "phone"); map1.put("email", "ne_lucifer@163.com"); map1.put("address", ""); map1.put("level", 0); map1.put("signature", "signature"); map1.put("brief", "brief"); loginDao.saveUserInfo(map1); Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put("userId", "001"); map.put("petname", "weyoug"); map.put("name", "lixia"); map.put("sex", "man"); map.put("birth", "2019-03-03"); map.put("icon", "icon"); map.put("phone", "phone"); map.put("email", "ne_lucifer@163.com"); map.put("address", ""); map.put("level", 0); map.put("signature", "signature"); map.put("brief", "brief"); loginDao.saveUserInfo(map);&#125; 日志切面和事务切面配置成功! 分享欢迎扫描下方二维码，关注weyoung公众号，一起交流学习~~ 更多联系方式 平台 链接 预览项目： https://nelucifer.gitee.io/ 个人微信公众号： weyoung segmentfault: https://segmentfault.com/u/nelucifer CSDN: https://me.csdn.net/wlx001 简书： https://www.jianshu.com/u/99211cc23788 掘金： https://juejin.im/user/59b08c575188250f4850e80e]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>ssm</tag>
        <tag>AOP，日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架整合笔记（三）视图解析器Tiles、FreeMarker配置]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B02-%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8%E9%85%8D%E7%BD%AE.html</url>
    <content type="text"><![CDATA[前言&emsp;&emsp;在MVC开发模式下，View离不开模板引擎，在Java中模板引擎使用最多的就是JSP、Velocity和FreeMarker。在配置框架的过程中，一般的系统中的前端页面中总是有一些通用的头部、底部或者菜单栏，最原始的方法当然是为每个HTML页面添加需要引入的css或者js等公用资源，但是这种方式似乎太难以维护。使用JSP的话，尽管JSP存在的时间很长、也特别像HTML，但是由于夹杂了各种标签库，显得特别混乱，因此在传统的单机应用中，在了解了常用的几个前端模板引擎（视图解析器），如Freemarker、Thymeleaf、Velocity、Tiles等： Velocity：自面世以来就以语法简单著称，其写法非常接近Java语法，学习成本低，而且其简单的语法给开发人员带来了很大的自由度，能够自由发挥； FreeMarker： 使用后缀为ftl（FreeMarker Template Language，FTL）和html 的模板，处理动态网页优势比较强，由于不能写Java代码，可以实现严格的MVC分离； Thymeleaf： 该模板会改变普通HTML的写法，需要在HTML中添加一些属性，能够按照原始的方式进行编辑甚至渲染，而不必经过任何类型的处理器； JSP： JSP不是真正的HTML，但是JSP规范和Servlet规范是紧密耦合的，这也限制了它只能用在基于Servlet的Web应用之中。 Tiles：Apache Tiles，定义适用于所有页面的通用页面布局。但是Tiles的模板是需要和jsp结合的，内容页和模板页是独立的页面，因此不会影响HTML内容页的写法。 本文内容：使用Tiles、FreeMarker配置前端模板引擎。 相关文章 Spring系列学习之IoC与AOP SSM框架整合笔记（一）详细注释 SSM框架整合笔记（二）配置Druid和Webservice SSM框架整合笔记（三）配置Tiles、FreeMarker Spring系列学习之IoC与AOP demo下载地址该项目持续更新中，会在代码以及该文档里面详细注释和介绍。项目托管在码云开源平台上，持续更新项目源码链接： https://gitee.com/nelucifer/ssm-note，点击克隆/下载获取该项目。 本文描述的项目版本为v1.0.1，版本源码链接：https://gitee.com/nelucifer/ssm-note/releases/v1.0.1 注意：如果项目代码内容有变化和本例不太一样的话，请查看项目标签，标签会具体说明，使用方式如下： 本文内容在一个项目中可以配置多个视图解析器，如Tiles、FreeMarker等可以同时配置，为了使得模板简洁和统一，本文仅介绍Tiles和FreeMarker的单独配置。 一、XML方式配置Tiles； 二、配置FreeMarker模板引擎； 三、FreeMarker拆分和复用页面； 一、配置Tiles0. pom.xml引入依赖pom.xml 添加配置如下： 123456789101112131415161718192021222324252627282930313233343536373839&lt;!--&lt;properties&gt;--&gt; &lt;tiles.version&gt;3.0.4&lt;/tiles.version&gt;&lt;!--&lt;/properties&gt;--&gt;&lt;!-- tiles --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tiles&lt;/groupId&gt; &lt;artifactId&gt;tiles-extras&lt;/artifactId&gt; &lt;version&gt;$&#123;tiles.version&#125;&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt; &lt;groupId&gt;commons-beanutils&lt;/groupId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tiles&lt;/groupId&gt; &lt;artifactId&gt;tiles-servlet&lt;/artifactId&gt; &lt;version&gt;$&#123;tiles.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tiles&lt;/groupId&gt; &lt;artifactId&gt;tiles-jsp&lt;/artifactId&gt; &lt;version&gt;$&#123;tiles.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tiles&lt;/groupId&gt; &lt;artifactId&gt;tiles-core&lt;/artifactId&gt; &lt;version&gt;$&#123;tiles.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tiles&lt;/groupId&gt; &lt;artifactId&gt;tiles-api&lt;/artifactId&gt; &lt;version&gt;$&#123;tiles.version&#125;&lt;/version&gt; &lt;/dependency&gt; 1. spring-mvc.xml12345678910111213141516171819&lt;!--spring-mvc 视图解析器--&gt;&lt;bean id="viewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver"/&gt;&lt;bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"&gt; &lt;property name="contentNegotiationManager" ref="contentNegotiationManager"/&gt; &lt;property name="defaultViews"&gt; &lt;bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/&gt; &lt;/property&gt;&lt;/bean&gt;&lt;!-- 模板引擎Tiles --&gt;&lt;bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer"&gt; &lt;property name="definitions"&gt; &lt;list&gt; &lt;!-- tiles的模板组件组装配置 --&gt; &lt;value&gt;/WEB-INF/views/*-tiles.xml&lt;/value&gt; &lt;/list&gt; &lt;/property&gt;&lt;/bean&gt; 2. 创建Tiles模板组件分析下我们要展示的页面内容，具体布局如下图：其中 header、nav-bar、menu、content（body）、footer可以提取出来，如下： header： 主要用来引入外部文件【header.jsp】； nav-bar：主要用来添加导航栏【nav-bar.jsp】； menu： 菜单模块【menu.jsp】； content： 内容模块，是页面主体【动态添加的内容】； footer： 底部声明等【footer.jsp】； 具体思路如下，首先在pom.xml添加Tiles的相关依赖，在spring-mvc.xml中添加视图解析器的配置，在default-tiles.xml中组装主模板和各个页面，即可。详细步骤如下： 1. pom.xml123456789101112131415161718192021222324252627282930313233343536373839&lt;properties&gt; &lt;tiles.version&gt;3.0.4&lt;/tiles.version&gt;&lt;/properties&gt;&lt;!-- Apache Tiles --&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.tiles&lt;/groupId&gt; &lt;artifactId&gt;tiles-extras&lt;/artifactId&gt; &lt;version&gt;$&#123;tiles.version&#125;&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt; &lt;groupId&gt;commons-beanutils&lt;/groupId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.tiles&lt;/groupId&gt; &lt;artifactId&gt;tiles-servlet&lt;/artifactId&gt; &lt;version&gt;$&#123;tiles.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.tiles&lt;/groupId&gt; &lt;artifactId&gt;tiles-jsp&lt;/artifactId&gt; &lt;version&gt;$&#123;tiles.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.tiles&lt;/groupId&gt; &lt;artifactId&gt;tiles-core&lt;/artifactId&gt; &lt;version&gt;$&#123;tiles.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.tiles&lt;/groupId&gt; &lt;artifactId&gt;tiles-api&lt;/artifactId&gt; &lt;version&gt;$&#123;tiles.version&#125;&lt;/version&gt;&lt;/dependency&gt; 2. spring-mvc.xml1234567891011121314151617181920212223242526272829&lt;!-- tiles视图解释器 --&gt;&lt;bean id="tilesViewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver"&gt; &lt;property name="order" value="1"&gt;&lt;/property&gt; &lt;property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/&gt;&lt;/bean&gt;&lt;bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"&gt; &lt;property name="contentNegotiationManager" ref="contentNegotiationManager"/&gt; &lt;!-- 视图解析器 --&gt; &lt;property name="viewResolvers"&gt; &lt;list&gt; &lt;ref bean="beanNameViewResolver" /&gt; &lt;ref bean="tilesViewResolver" /&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name="defaultViews"&gt; &lt;bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/&gt; &lt;/property&gt;&lt;/bean&gt;&lt;!-- 模板引擎Tiles配置 --&gt;&lt;bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer"&gt; &lt;property name="definitions"&gt; &lt;list&gt; &lt;value&gt;/WEB-INF/views/*-tiles.xml&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name="preparerFactoryClass" value="org.springframework.web.servlet.view.tiles3.SpringBeanPreparerFactory" /&gt;&lt;/bean&gt; 3. 组装各页面组件default-tiles.xml内容如下： 12345678910111213141516171819202122232425262728293031&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE tiles-definitions PUBLIC "-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN" "http://tiles.apache.org/dtds/tiles-config_3_0.dtd"&gt;&lt;tiles-definitions&gt; &lt;!-- 定义base Tile，主布局 --&gt; &lt;definition name="base" template="/templates/base.jsp"&gt; &lt;!-- 定义属性 --&gt; &lt;put-attribute name="header" value="/templates/components/header.jsp" /&gt; &lt;put-attribute name="nav" value="/templates/components/nav-bar.jsp" /&gt; &lt;put-attribute name="menu" value="/templates/components/menu.jsp" /&gt; &lt;put-attribute name="content" value="" /&gt; &lt;put-attribute name="footer" value="/templates/components/footer.jsp" /&gt; &lt;/definition&gt; &lt;!-- 定义base Tile --&gt; &lt;definition name="empty" template="/templates/empty.jsp"&gt; &lt;!-- 定义属性 --&gt; &lt;put-attribute name="header" value="/templates/components/header.jsp" /&gt; &lt;/definition&gt; &lt;!-- 扩展base Tile --&gt; &lt;definition name="/home" extends="base"&gt; &lt;put-attribute name="content" value="/front-end/welcome.jsp" /&gt; &lt;/definition&gt; &lt;!-- 登录页 --&gt; &lt;definition name="/login" extends="empty"&gt; &lt;put-attribute name="content" value="/front-end/system/index.jsp" /&gt; &lt;/definition&gt;&lt;/tiles-definitions&gt; 4. 主页面 base.jsp以下为主页面模板配置，引入的其他页面和其他jsp页面一样，具体详见项目源码，内容如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;%@ taglib prefix="tiles" uri="http://tiles.apache.org/tags-tiles" %&gt;&lt;%-- Created by IntelliJ IDEA. Description: 该模板就是包含所有的模板（有导航栏、菜单栏、内容、页脚） User: Mr.wang Date: 2017/6/21 Time: 22:18 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1,user-scalable=no"&gt; &lt;meta name="format-detection" content="telephone=no"/&gt; &lt;tiles:insertAttribute name="header"/&gt; &lt;style&gt; 自定义样式... &lt;/style&gt;&lt;/head&gt;&lt;body class="scroll-bar hold-transition skin-blue sidebar-mini"&gt;&lt;div class="wrapper"&gt; &lt;div&gt; &lt;header class="main-header"&gt; &lt;tiles:insertAttribute name="nav"/&gt; &lt;/header&gt; &lt;aside class="main-sidebar"&gt; &lt;tiles:insertAttribute name="menu"/&gt; &lt;/aside&gt; &lt;section id="lucifer_content" class="content-wrapper"&gt; &lt;tiles:insertAttribute name="content"/&gt; &lt;/section&gt; &lt;div class="navbar-fixed-bottom"&gt; &lt;footer class="main-footer" style="margin-left: 260px"&gt; &lt;tiles:insertAttribute name="footer"/&gt; &lt;/footer&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 二、配置FreeMarker模板引擎0. pom.xml引入依赖pom.xml 添加配置如下： 123456789&lt;properties&gt; &lt;freemarker.version&gt;2.3.20&lt;/freemarker.version&gt;&lt;/properties&gt;&lt;!-- FreeMarker --&gt;&lt;dependency&gt; &lt;groupId&gt;org.freemarker&lt;/groupId&gt; &lt;artifactId&gt;freemarker&lt;/artifactId&gt; &lt;version&gt;$&#123;freemarker.version&#125;&lt;/version&gt;&lt;/dependency&gt; 1. spring-mvc.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;!--spring-mvc 视图解析器--&gt;&lt;bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"&gt; &lt;property name="contentNegotiationManager" ref="contentNegotiationManager"/&gt; &lt;!-- 视图解析器 --&gt; &lt;property name="viewResolvers"&gt; &lt;list&gt; &lt;ref bean="beanNameViewResolver" /&gt; &lt;!-- 模板引擎中添加FreeMarker配置 --&gt; &lt;ref bean="freeMarkerViewResolver" /&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name="defaultViews"&gt; &lt;bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/&gt; &lt;/property&gt;&lt;/bean&gt;&lt;!-- FreeMarker 模板引擎 --&gt;&lt;bean id="freeMarkerViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"&gt; &lt;property name="viewClass"&gt; &lt;value&gt;org.springframework.web.servlet.view.freemarker.FreeMarkerView&lt;/value&gt; &lt;/property&gt; &lt;!-- 识别为FreeMarker页面的文件后缀 --&gt; &lt;property name="suffix" value=".html"/&gt; &lt;property name="cache" value="false" /&gt; &lt;property name="contentType" value="text/html;charset=utf-8"/&gt; &lt;property name="order" value="1"/&gt; &lt;!-- 在FreeMarker页面中使用request对象 --&gt; &lt;property name="exposeRequestAttributes" value="true" /&gt; &lt;property name="exposeSessionAttributes" value="true" /&gt; &lt;property name="exposeSpringMacroHelpers" value="true" /&gt; &lt;property name="requestContextAttribute" value="rc"/&gt;&lt;/bean&gt;&lt;!-- FreeMarker 模板引擎配置 --&gt;&lt;bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"&gt; &lt;property name="templateLoaderPaths"&gt; &lt;list&gt; &lt;value&gt;/front-end&lt;/value&gt; &lt;value&gt;/&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name="defaultEncoding" value="utf-8"/&gt; &lt;property name="freemarkerSettings"&gt;&lt;!-- 设置FreeMarker环境属性 --&gt; &lt;props&gt; &lt;prop key="template_update_delay"&gt;5&lt;/prop&gt;&lt;!--刷新模板的周期，单位为秒 --&gt; &lt;prop key="default_encoding"&gt;UTF-8&lt;/prop&gt;&lt;!--模板的编码格式 --&gt; &lt;prop key="locale"&gt;zh_CN&lt;/prop&gt;&lt;!-- 本地化设置，设置默认地区 --&gt; &lt;prop key="template_exception_handler"&gt;rethrow&lt;/prop&gt; &lt;prop key="datetime_format"&gt;yyyy-MM-dd HH:mm:ss&lt;/prop&gt; &lt;prop key="time_format"&gt;HH:mm:ss&lt;/prop&gt; &lt;prop key="number_format"&gt;#.####&lt;/prop&gt;&lt;!-- 设置默认数字输出格式 --&gt; &lt;prop key="boolean_format"&gt;true,false&lt;/prop&gt;&lt;!-- 设置默认布尔值输出格式 --&gt; &lt;prop key="whitespace_stripping"&gt;true&lt;/prop&gt; &lt;prop key="tag_syntax"&gt;auto_detect&lt;/prop&gt; &lt;prop key="url_escaping_charset"&gt;UTF-8&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt;&lt;/bean&gt; 2. web.xml注意： FreeMarker配置首页为html页面的话，需要进行特别的配置，需要修改web.xml中设置的登录页，否则直接配置index.html的话会导致页面中的FreeMarker配置无效，因此需修改web.xml和MainController.java，这块需要注意！ web.xml1234&lt;!-- 默认进入页面，一般为登录页 --&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;/&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; MainController.java1234567891011/** * @Author Mr.wang * @Description // 登录页，控制启动时跳转 * @Date 2019/3/2 23:39 * @Param [request, response] * @return **/@RequestMapping(value = "/", method = RequestMethod.GET)public String index(HttpServletRequest request, HttpServletResponse response) &#123; return "index";&#125; 3. 组装FreeMarker页面在SSM项目中配置FreeMarker模板引擎时，需要使用特定的指令来配置模板和组装页面组件，页面结构如下： 1234567891011|---[front-end]（前端页面）|---|---index.html（登录页）|---|---welcome.html（首页）|---[tempaltes]（模板文件）|---|---[components]（模板组件）|---|---|---footer.html（页脚组件）|---|---|---header.html（页首组件）|---|---|---menu.html（菜单组件）|---|---|---nav-bar.html（导航栏组件）|---|---empty.html（没有菜单的主模板，如登录页使用）|---|---main.html（包含菜单和页脚的主模板，如首页使用） 具体配置方式如下： empty.html 12345678910111213141516&lt;#macro empty&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta http-equiv="Pragma" content="no-cache"&gt; &lt;#include "../templates/components/header.html"&gt; &lt;style&gt; 自定义的样式 &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 插入内容页 --&gt;&lt;#nested&gt;&lt;/body&gt;&lt;/html&gt;&lt;/#macro&gt; empty.html 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;#macro layout&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta http-equiv="Pragma" content="no-cache"&gt; &lt;#include "../templates/components/header.html"&gt; &lt;style&gt; 自定义的样式 &lt;/style&gt;&lt;/head&gt;&lt;body class="scroll-bar hold-transition skin-blue sidebar-mini"&gt;&lt;div class="wrapper"&gt; &lt;div&gt; &lt;header class="main-header"&gt; &lt;#include "../templates/components/nav-bar.html"&gt; &lt;/header&gt; &lt;aside class="main-sidebar"&gt; &lt;#include "../templates/components/menu.html"&gt; &lt;/aside&gt; &lt;section id="lucifer_content" class="content-wrapper"&gt; &lt;!-- 在这里嵌入主题内容 --&gt; &lt;#nested&gt; &lt;/section&gt; &lt;div class="navbar-fixed-bottom"&gt; &lt;footer class="main-footer" style="margin-left: 260px"&gt; &lt;#include "../templates/components/footer.html"&gt; &lt;/footer&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;script&gt; var InitFrame = (function () &#123; var setTitle = function (title) &#123; title &amp;&amp; $(document).attr("title", title) &#125;; return &#123;setTitle: setTitle&#125;; &#125;)() InitFrame.setTitle("SSM框架整合");&lt;/script&gt;&lt;/html&gt;&lt;/#macro&gt; index.html和welcome.html页面引用模板方式主要如下： 1234567891011&lt;!-- 引入布局指令的命名空间 --&gt;&lt;#import "templates/main.html" as main&gt;&lt;!-- 调用布局指令 --&gt;&lt;@main.layout&gt;&lt;!-- 下面的这些内容会自动嵌入到layout指令的nested块中 --&gt;&lt;h1&gt;SSM框架整合笔记&lt;/h1&gt;&lt;hr&gt;&lt;div class="text-center"&gt; &lt;h4&gt;~~欢迎关注下方微信公众号，记录javaweb常见的问题和相关技术，欢迎交流学习~~&lt;/h4&gt;&lt;/div&gt;&lt;/@main.layout&gt; 至此，FreeMarker配置完成，详细注释和配置参考项目开头源码下载地址。 分享欢迎扫描下方二维码，关注weyoung公众号，一起交流学习~~ 更多联系方式 平台 链接 预览项目： https://nelucifer.gitee.io/ 个人微信公众号： weyoung segmentfault: https://segmentfault.com/u/nelucifer CSDN: https://me.csdn.net/wlx001 简书： https://www.jianshu.com/u/99211cc23788 掘金： https://juejin.im/user/59b08c575188250f4850e80e]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>ssm</tag>
        <tag>tiles</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用SoapUI 5.3.0调试webservice接口（参数格式XML）]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E6%8E%A5%E5%8F%A3%E7%9B%B8%E5%85%B3%2FSoapUI-%E8%B0%83%E8%AF%95webservice%E6%8E%A5%E5%8F%A3.html</url>
    <content type="text"><![CDATA[最近项目中经常要调试webservice接口，从朋友处了解到他们调试webservice接口时使用SoapUI，觉得十分好用，个人也对此十分感兴趣，因此简要记录一下这个工具的使用。 使用SoapUI 5.3.0调试webservice接口（参数格式XML）准备 下载SoapUI，我使用的是5.3.0 https://www.soapui.org/downloads/latest-release.html WebService 服务接口 进入正题 新建调试项目 输入项目名称及要调试的接口有效地址，输入完毕点击OKsoapUI会自动获取所有已开放接口，在想要调试的接口方法上面选中右击，选择new request,输入名称后如下图会自动生成如下格式代码；其中 123&lt;web:in0&gt;中填写入参&lt;/web:in0&gt;&lt;!--或--&gt;&lt;arg0&gt;中填写入参&lt;/arg0&gt; 注意：xml格式的入参最好使用 &lt;[CDATA[]]&gt; 包起来。点击左上角的绿色三角就可以调试接口了。 新建测试套件 New TestSuite 在项目名称上右击，选择 New TestSuite,输入名称保存 在自己新建的TestSuite名称上右击，选择 New TestCase,输入名称保存 在Test Steps上右击 选择 Add Step —&gt;SOAP Request,输入名称并选择接口，名称最好容易识别一点 接下来就可以加入入参进行调试。一次简单的工具使用，记录下来，希望可以帮助到你，祝你好运。 欢迎关注微信公众号weyoung，记录学习笔记和一些有趣的东西，欢迎交流~~ 更多联系方式 平台 链接 个人博客 https://www.wanglixia.top/ 预览项目： https://nelucifer.gitee.io/ 个人微信公众号： weyoung segmentfault: https://segmentfault.com/u/nelucifer CSDN: https://me.csdn.net/wlx001 简书： https://www.jianshu.com/u/99211cc23788 掘金： https://juejin.im/user/59b08c575188250f4850e80e]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>soapUI</tag>
        <tag>webservice</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架整合笔记（二）Druid和Webservice配置]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B01-Druid%E5%92%8CWebservice%E9%85%8D%E7%BD%AE.html</url>
    <content type="text"><![CDATA[SSM框架整合笔记（二）Druid和Webservice配置前言WebService&emsp;&emsp;Web Service 是自包含（self-contained）、使用开放协议进行通信的应用程序组件。功能：实现应用程序之间的通信；将应用程序转换为网络应用程序；使用XML来编解码数据，并使用SOAP来传输数据。元素： 使用SOAP（简单对象访问协议）：是用于交换XML编码信息的轻量级协议； WSDL（Web Service 描述语言）：用于描述Web Service及函数、参数和返回值，因为是基于XML的，因此WSDL既是机器可阅读的，又是人可阅读的； UDDI：目的是为电子商务建立标准，是一套基于Web的、分布式的、为Web Service提供的、信息注册中心的实现标准规范，同时也包含一组使企业能将自身提供的Web Service注册，以使别的企业能够发现的访问协议的实现标准。 XML是Web Service的基础； SOAP：是一种使应用程序有能力通过 HTTP 交换信息的基于 XML 的简易协议。WSDL：是基于 XML 的用来描述 Web services 以及如何访问它们的一种语言，可描述 web service，连同用于 web service 的消息格式和协议的细节。 Druid&emsp;&emsp;Druid是Java中的数据库连接池。Druid能够提供强大的监控和扩展功能。 相关文章 Spring系列学习之IoC与AOP SSM框架整合笔记（一）详细注释 SSM框架整合笔记（二）配置Druid和Webservice SSM框架整合笔记（三）配置Tiles、FreeMarker Spring系列学习之IoC与AOP 本文内容 ssm项目使用CXF配置webservice。 ssm项目中配置druid数据库连接池，SQL监控。 一、使用CXF配置webservice0. pom.xmlpom.xml中添加依赖如下： 12345678910111213141516171819&lt;!--&lt;properties&gt;--&gt; &lt;cxf.version&gt;3.1.6&lt;/cxf.version&gt;&lt;!--&lt;/properties&gt;--&gt;&lt;!-- cxf webservice --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-rt-frontend-jaxws&lt;/artifactId&gt; &lt;version&gt;$&#123;cxf.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-core&lt;/artifactId&gt; &lt;version&gt;$&#123;cxf.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-rt-transports-http&lt;/artifactId&gt; &lt;version&gt;$&#123;cxf.version&#125;&lt;/version&gt; &lt;/dependency&gt; 1. web.xmlweb.xml中添加配置如下： 12345678910111213&lt;!--============Webservice配置start============--&gt;&lt;!--在Web.xml中配置CXF监听器 --&gt;&lt;servlet&gt; &lt;servlet-name&gt;CXFServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;!-- 注意：&lt;servlet-mapping&gt;下的&lt;url-pattern&gt;指明了服务访问地址的形式,"/*"代表URL地址中，包名称后直接跟服务endpoint地址，若指明&lt;url-pattern&gt;为/webservice/*,则URL地址为“包名webservice/endpoint?wsdl” --&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;CXFServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/webservice/*&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;!--============Webservice配置end============--&gt; 2. spring-config.xmlspring-config.xml中添加配置如下： 1234567&lt;!-- 使用CXF方式配置webservice接口 --&gt;&lt;import resource="classpath:META-INF/cxf/cxf.xml"/&gt;&lt;!--&lt;import resource="classpath:META-INF/cxf/cxf-servlet.xml"/&gt;--&gt;&lt;!-- 自动扫描webService --&gt;&lt;context:component-scan base-package="com.weyoung.webservice"/&gt;&lt;!-- 定义webservice的发布接口 --&gt;&lt;jaxws:endpoint implementor="#thirdService" address="/testService"/&gt; 3. ThirdWebservice.java添加interface：ThirdWebservice.java，示例代码如下： 123456789101112131415161718192021222324package com.weyoung.webservice;import javax.jws.WebService;/** * @ClassName ThirdWebservice * @Description 对外发布webservice接口 * @Author Mr.wang * @Date 2019/2/26 0:38 * @Version 1.0 **/@WebServicepublic interface ThirdWebservice &#123; /** * 获取第三方请求 * @param code * @param loginData * @param intoData * @return * @throws Exception */ String getThirdPartyRequest(String code, String loginData, String intoData) throws Exception;&#125; 4. ThirdWebserviceImpl.java添加java类：ThirdWebserviceImpl.java，示例代码如下： 12345678910111213141516171819202122232425262728293031323334package com.weyoung.webservice;import org.springframework.stereotype.Component;import javax.jws.WebService;/** * @ClassName ThirdWebserviceImpl * @Description 对外发布webservice接口 * @Author Mr.wang * @Date 2019/2/26 0:45 * @Version 1.0 **/@Component("thirdService")@WebServicepublic class ThirdWebserviceImpl implements ThirdWebservice &#123; @Override public String getThirdPartyRequest(String code, String loginData, String intoData) throws Exception &#123; String result; switch (code) &#123; case "WS0001": result = "WS0001" + loginData + intoData; break; case "WS0002": result = "WS0001" + loginData + intoData; break; default: result = "OTHER" + loginData + intoData; break; &#125; return result; &#125;&#125; 测试接口访问地址：http://localhost:8080/ssm-note/webservice/ ，原访问项目后加”webservice/“，访问结果如下：点击蓝色链接后如下：使用soapUI测试webservice接口： 双击Request 1，填入参数，点击运行按钮，结果如下，调用成功： 二、配置druid数据库连接池，SQL监控0. pom.xmlpom.xml中添加依赖如下： 12345678910111213141516&lt;!--&lt;properties&gt;--&gt; &lt;druid.version&gt;1.0.25&lt;/druid.version&gt; &lt;log4j.version&gt;1.2.14&lt;/log4j.version&gt;&lt;!--&lt;/properties&gt;--&gt; &lt;!--druid==&gt;阿里巴巴数据库连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- log4j--&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; 1. web.xmlweb.xml中添加配置如下： 12345678910111213141516171819202122&lt;!-- ============阿里巴巴数据库连接池start============ --&gt;&lt;filter&gt; &lt;filter-name&gt;druidWebStatFilter&lt;/filter-name&gt; &lt;filter-class&gt;com.alibaba.druid.support.http.WebStatFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;exclusions&lt;/param-name&gt; &lt;param-value&gt;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;druidWebStatFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;servlet&gt; &lt;servlet-name&gt;druidStatView&lt;/servlet-name&gt; &lt;servlet-class&gt;com.alibaba.druid.support.http.StatViewServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;druidStatView&lt;/servlet-name&gt; &lt;url-pattern&gt;/druid/*&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;!-- ============阿里巴巴数据库连接池end============ --&gt; 2. spring-config.xmlspring-config.xml中添加配置，示例代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!-- MySQL数据源配置--&gt;&lt;bean id="MySQLDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"&gt; &lt;property name="driverClassName" value="$&#123;jdbc.mysql.driver&#125;"/&gt; &lt;property name="url" value="$&#123;jdbc.mysql.url&#125;"/&gt; &lt;property name="username" value="$&#123;jdbc.mysql.username&#125;"/&gt; &lt;property name="password" value="$&#123;jdbc.mysql.password&#125;"/&gt; &lt;!-- 配置初始化大小、最小、最大 --&gt; &lt;property name="initialSize" value="$&#123;jdbc.initialSize&#125;"/&gt; &lt;property name="minIdle" value="$&#123;jdbc.minIdle&#125;"/&gt; &lt;property name="maxActive" value="$&#123;jdbc.maxActive&#125;"/&gt; &lt;!-- 配置获取连接等待超时的时间 --&gt; &lt;property name="maxWait" value="$&#123;jdbc.maxWait&#125;"/&gt; &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt; &lt;property name="timeBetweenEvictionRunsMillis" value="$&#123;jdbc.timeBetweenEvictionRunsMillis&#125;"/&gt; &lt;property name="testWhileIdle" value="$&#123;jdbc.testWhileIdle&#125;"/&gt; &lt;!-- 这里建议配置为TRUE，防止取到的连接不可用 --&gt; &lt;property name="testOnBorrow" value="true" /&gt; &lt;property name="testOnReturn" value="false" /&gt; &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt; &lt;property name="poolPreparedStatements" value="true" /&gt; &lt;property name="maxPoolPreparedStatementPerConnectionSize" value="20" /&gt; &lt;!-- 配置提交方式，默认就是true，可以不用配置 --&gt; &lt;property name="defaultAutoCommit" value="$&#123;jdbc.defaultAutoCommit&#125;"/&gt; &lt;!-- 验证连接有效与否的SQL，不同的数据配置不同 --&gt; &lt;!--&lt;property name="validationQuery" value="select 1 " /&gt;--&gt; &lt;property name="filters" value="stat" /&gt; &lt;property name="proxyFilters"&gt; &lt;list&gt; &lt;ref bean="logFilter" /&gt; &lt;/list&gt; &lt;/property&gt;&lt;/bean&gt;&lt;bean id="logFilter" class="com.alibaba.druid.filter.logging.Log4jFilter"&gt; &lt;property name="statementExecutableSqlLogEnable" value="false" /&gt;&lt;/bean&gt; 测试Druid访问地址：http://localhost:8080/ssm-note/druid/ 访问后如下： 分享欢迎扫描下方二维码，关注weyoung公众号，一起交流学习~~ 更多联系方式 平台 链接 预览项目： https://nelucifer.gitee.io/ 个人微信公众号： weyoung segmentfault: https://segmentfault.com/u/nelucifer CSDN: https://me.csdn.net/wlx001 简书： https://www.jianshu.com/u/99211cc23788 掘金： https://juejin.im/user/59b08c575188250f4850e80e]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>spring</tag>
        <tag>webservice</tag>
        <tag>mybatis</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring系列学习之Spring核心组件]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FJava%E7%B3%BB%E5%88%97%2FJava%E7%B3%BB%E5%88%97-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-Spring%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6.html</url>
    <content type="text"><![CDATA[Spring系列学习之Spring核心组件前言 一、Spring的骨骼架构 二、Spring核心组件 Bean组件 Context组件 Core组件 Ioc容器 三、Spring中的AOP特性 动态代理的实现 Spring AOP的实现 四、设计模式解析之代理模式 五、设计模式解析之策略模式 一、Spring的骨骼架构 Spring中的三个核心组件就是 Core、Context、Bean。 Bean包装的是Object，而Object必然有数据； Context就是给Bean的数据提供生存环境，发现每个Bean之间的关系，为它们建立这种关系并且维护好这种关系。Context就是一个Bean关系的集合，这个关系集合又叫Ioc容器； Core就是发现、建立、维护每个Bean之间的关系所需要的一系列工具。 二、核心组件Bean组件 Spring Bean的创建是典型的工厂模式，它的顶级接口时BeanFactory。 Bean的定义主要是由BeanDefinition描述。Bean的定义完整地描述了在Spring的配置文件中定义的节点中所有的信息，包括各种子节点。 Bean的解析过程。Bean的解析主要就是对Spring配置文件的解析。 Context组件 Context就是给Spring提供一个运行时环境，用以保存各个对象的状态。Context作为Spring的Ioc容器，基本上整合了Spring的大部分功能，或者说是大部分功能的基础。 ApplicationContext是Context的顶级父类，除了能标识一个应用环境的基本信息外，还继承了5个接口。ApplicationContext继承了BeanFactory，说明了Spring容器中运行的主体对象是Bean。ApplicationContext继承了ResourceLoader接口，使得ApplicationContext可以访问到任何外部资源。 ApplicationContext的子类主要包含两个方面： ConfigurableApplicationContext表示该Context是可修改的，也就是在构建Context中，用户可以动态添加或修改已有的配置信息； WebApplicationContext就是为Web准备的Context，可以直接访问ServletContext。 Core组件Core组件包含了很多关键类，一个重要的组成部分就是定义了资源的访问方式。 Resource接口封装了各种可能的资源类型，也就是对使用者来说屏蔽了文件类型的不同。Resource接口继承了InputStreamSource接口，在这个接口中有个getInputStream方法，返回的是InputStream类。一个加载资源的问题，也就是资源的加载者要统一，这个任务是由ResourceLoader接口完成的，屏蔽了所有的资源加载者的差异，只需要实现这个接口就可以加载所有的资源，它的默认实现是DefaultResourceLoader。 Context把资源的加载、解析和描述工作委托给了ResourcePatternResolver类来完成，它把资源的加载、解析和资源的定义整合在一起便于其他组件使用。 Ioc容器Ioc容器实际上是Context组件结合其他两个组件共同构建了一个Bean关系网。 三、Spring中的AOP特性动态代理的实现]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring系列学习之IoC与AOP]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FJava%E7%B3%BB%E5%88%97%2FJava%E7%B3%BB%E5%88%97-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-Ioc%E4%B8%8EAOP.html</url>
    <content type="text"><![CDATA[前言spring框架的释义： Spring框架是由于软件开发的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。 为什么Spring用来完成EJB完成的事情，那么这个EJB是什么玩意？概念： EJB：Enterprise JavaBean，对于商务软件来说，其核心部分就是她的业务逻辑，业务逻辑抽象了整个商务过程的流程，并使用计算机语言将他们实现。……J2EE对于这个问题的处理方法是将业务逻辑从客户端软件中抽取出来，封装在一个组件中。这个组件运行在一个独立的服务器上，客户端软件通过网络调用组件提供的服务来实现业务逻辑，而客户端软件的仅仅负责发送调用请求和显示处理结果。在J2EE中，这个运行在一个独立的服务器上，并封装了业务逻辑的组件就是EJB组件。 从上面的概念中，可以理解为EJB概念说的就是C/S软件，简单来说EJB 就是将那些”类”放到一个服务器上，用C/S 形式的软件客户端对服务器上的”类”进行调用。感兴趣的可以看下这篇文章https://blog.csdn.net/jojo52013145/article/details/5783677 概念Spirng中的两个核心概念：依赖注入DI（dependency injection）和面向切面编程AOP（aspect-oriented programming）。 为了降低Java开发的复杂性，Spring采取了以下四种关键策略： 基于POJO（Plain Old Java Object）的轻量级和最小侵入性编程； 通过依赖注入和面向接口实现松耦合； 基于切面和管理进行声明式编程； 通过切面和模板减少样板式代码。 依赖注入传统的做法，每个对象负责管理它所依赖的对象的引用，这将会导致高度耦合和难以测试的代码。比如说，对象A要使用对象B，则在对象A中来控制对象B，如：1234567891011121314151617public class A &#123; private B b; public A () &#123; this.b = new B(); &#125; public String sayHello() &#123; return b.sayHello(userName); &#125;&#125;public class B &#123; public String sayHello(String userName) &#123; return "Hello "+ userName; &#125;&#125; 耦合具有两面性，一方面，紧密耦合的代码难以测试、难以复用、难以理解；另一方面，一定程度的耦合又是必须的——完全没有耦合的代码什么也做不了。总之，耦合是必须的，但是应当被合理地管理。 创建应用组件之间协作的行为通常称为装配。Spring有多种装配bean的方式，采用XMl、使用Java进行配置。 通过DI，对象的依赖关系将由系统中负责协调各对象的第三方组件在创建对象的时候进行设定。依赖注入的方式： 构造器注入； setter注入； 基于注解注入； 一、构造器注入如：123456789101112// 构造器注入public class A &#123; private B b; public A(B b) &#123; this.b = b; &#125; public String sayHello() &#123; return b.sayHello(userName); &#125;&#125; xml方式1234567&lt;!-- 注册A --&gt;&lt;bean id="a" class="com.lucifer.spring.di.A"&gt; &lt;constructor-arg ref="b"&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;&lt;!-- 注册B --&gt;&lt;bean id="b" class="com.lucifer.spring.di.B"&gt;&lt;/bean&gt; 二、setter注入1234567891011&lt;!-- 注册A --&gt;&lt;bean id="a" class="com.lucifer.spring.di.A"&gt; &lt;!-- 注意：这两种写法都可以，Spring将name值得每个单词的首字母转换为大写，再在前面拼上set构成set方法名，然后去对应的类中查找这个方法，通过反射调用实现注入，仅按照此种规则匹配，即对应的成员变量命名不做约束。也就是说 UserName 和 userName 都能匹配上 --&gt; &lt;!-- 写法一 --&gt; &lt;!-- &lt;property name="UserName" ref="b"&gt;&lt;/property&gt; --&gt; &lt;!-- 写法二 --&gt; &lt;property name="userName" ref="b"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 注册B --&gt;&lt;bean id="b" class="com.lucifer.spring.di.B"&gt;&lt;/bean&gt; 12345678910111213public class UserService implements IUserService &#123; private String userName123; public String sayHello(String userName) &#123; return "Hello "+ userName; &#125; public void setUserName(String userName) &#123; this.userName123 = userName; &#125;&#125; 三、基于注解的注入bean的属性autowire，autowire主要有三个属性值：constructor，byName，byType。 constructor：通过构造方法进行自动注入，spring会匹配与构造方法参数类型一致的bean进行注入，如果有一个多参数的构造方法，一个只有一个参数的构造方法，在容器中查找到多个匹配多参数构造方法的bean，那么spring会优先将bean注入到多参数的构造方法中。 byName：被注入bean的id名必须与set方法后半截匹配，并且id名称的第一个单词的首字母必须小写，这个和手动set注入有点不同。 byType：查找所有的set方法，将符合参数类型的bean注入。 注册bean的注解有以下几种： @Component：用于注册所有的bean； @Repository：用于注册dao层的bean； @Controller：用于注册控制层的bean； @Service：用于注册服务层的bean； 常见的问题，@Resource和@Autowired之间的区别是什么？描述依赖关系的主要有两种： @Resource：java的注解，默认以byName的方式去匹配与属性名相同的bean的id，如果没有再以byType的方式查找，如果byType查找到多个的话，使用@Qualifier注解（Spring注解）指定某个具体名称的bean； @Autowired：spring注解，默认是以byType的方式去匹配类型相同的bean，如果匹配到一个，那么就直接注入该bean，无论要注入的bean的那么是什么；如果匹配到多个，就会调用DefaultListableBeanFactory的determineAutowireCandidate方法来决定具体注入哪个bean。 determineAutowireCandidate方法的逻辑是： 先找Bean上有@Primary注解的，有则直接返回bean的name； 再找Bean上有@Order，@PriorityOrder注解的，有则返回bean的name； 最后再以名称匹配（ByName）的方式去查找相匹配的bean。 没有找到的话就抛出异常。 还有一点要注意：如果使用了 @Qualifier 注解，那么当自动装配匹配到多个 bean 的时候就不会进入 determineAutowireCandidate 方法，而是直接查找与 @Qualifer 指定的 bean name 相同的 bean 去注入，找到了就直接注入，没有找到则抛出异常。 注意如果通过set方法注入属性，那么Spring会通过默认的无参构造方法来实例化对象，所以如果在类中重写带有参数的构造方法，一定要把无参构造方法也写上，否则spring没有办法实例化对象，导致报错。 问题1.依赖注入（DI）和控制反转（IoC） 谁控制谁，控制什么： 传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。 为何是反转，哪些方面反转了： IoC：Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想，传统应用程序是由我们自己在对象中主动去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象，为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。 理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么” 谁依赖谁： 应用程序依赖于IoC容器； 为什么需要依赖： 应用程序需要IoC容器来提供对象需要的外部资源； 谁注入谁： 很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象； 注入了什么： 就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。 其实IoC和DI是同一个概念的不同角度描述，由于控制反转概念比较模糊（可能只是理解为容易控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。我认为可以这么理解：使用依赖注入来实现了控制反转。 面向切面编程DI能够让相互协作的软件组件保持松散耦合，而面向切面编程（aspect-oriented programming）允许把遍布在应用各处的功能分离出来形成可重用的组件。定义切点的表达式的语法采用的是AspectJ的切点表达式语言。 一、AOP的相关概念 Aspect（切面）：通知和切点共同定义了切面的全部内容； Joint Point（连接点）：程序执行过程中明确的点，是在应用执行过程中能够插入切面的一个点，切面代码利用这些点插入到应用的正常流程之中并添加新的行为； Advice（通知）：AOP在特定的切入点上执行的增强处理，五个通知类型： 前置通知（Before）：在目标方法被调用之前调用通知功能，@Before只需要指定切入点表达式即可； 后置通知（After）：在目标方法完成之后调用通知，此时不关心方法的输出是什么。不论拦截的方法是否有异常。在目标方法完成之后做增强，无论目标方法什么时候成功完成。@After可以指定一个切入点表达式； 环绕通知（Around）：需要放行操作。通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。环绕通知是最重要的通知类型，像事务、日志等都是环绕通知； 返回通知（After-returning）：在目标方法成功执行之后调用通知，@AfterReturning除了指定切入点表达式后，还可以指定一个返回值形参名returning，代表目标方法的返回值； 异常通知（After-throwing）：主要用来处理程序中未处理的异常，在目标抛出异常后调用通知，@AfterThrowing除了指定切入点表达式后，还可以指定一个throwing的返回值形参名，可以通过该形参名来访问目标方法中所抛出的异常对象； Pointcut（切入点）：带有通知的连接点，在程序中主要体现为书写切入点表达式。如果说通知定义了切面的“什么”和“何时”的话，那么切点就定义了“何处”； AOP代理：AOP框架创建的对象，代理就是目标对象的增强。Spring中的AOP代理可以使JDK动态代理，也可以是CGLIB代理，前者基于接口，后者基于子类； 织入（Weaving）：实现AOP代理所声明的功能，即把切面应用到目标对象并创建新的代理对象的过程。在目标对象的生命周期中，可以在编译期、类加载期、运行期进行织入； 关注点：切面的具体功能方法被称为关注点。 注解 通知 @After 通知方法会在目标方法返回或抛出异常后调用 @AfterReturning 通知方法会在目标方法返回后调用 @AfterThrowing 通知方法会在目标方法抛出异常后调用 @Around 通知方法会将目标方法封装起来 @Before 通知方法会在目标方法调用之前执行 Spring提供了4种类型的AOP支持： 基于代理的经典Spring AOP； 纯POJO切面； @AspectJ注解驱动的切面； 注入式AspectJ切面（适用于Spring各版本）； 前面三种都是Spring AOP实现的变体，Spring AOP构建在动态代理基础之上，因此，Spring对AOP的支持局限于方法拦截；也正是因为Spring基于动态代理，所以Spring只支持方法连接点。 AOP主要的作用是：日志记录，性能统计，安全控制，事务处理，异常处理，权限登录等等。AOP代理由Spring的IoC容器负责生成、管理，其依赖关系也由IoC容器负责管理。 二、Spring借助AspectJ的切点表达式语言来定义Spring切面Spring AOP所支持的AspectJ切点指示器|AspectJ指示器|描述||:—|:—||arg()|限制连接点匹配参数为指定类型的执行方法||@args()|限制连接点匹配参数由指定注解标注的执行方法||execution()|用于匹配是连接点的执行方法||this()|限制连接点匹配AOP代理的bean引用为指定类型的类||target|限制连接点匹配目标对象为指定类型的类||@target()|限制连接点匹配特定的执行对象，这些对象对应的类要具有指定类型的注解||within()|限制连接点匹配指定的类型||@within()|限制连接点匹配指定注解所标注的类型（当使用Spring AOP时，方法定义在由指定的注解所标注的类里）||@annotation|限定匹配带有指定注解的连接点| 12345678execution(* concert.Performance.perform(..))/* *：返回任意类型；concert.Performance：方法所属的类；perform：方法；..：使用任意参数；execution：在方法执行时触发；*/ 相关资料 Spring常用的三种注入方式:https://blog.csdn.net/a909301740/article/details/78379720 IoC基础——跟我学Spring3https://jinnianshilongnian.iteye.com/blog/1413846 Spring 实战（第四版） [美]Craig Walls 著 张卫滨 译 欢迎扫描下方二维码，关注weyoung公众号，一起交流学习~~ ![个人微信公众号](http://img.wanglixia.top/wechat_qrcode-2019115195545.jpg) 更多联系方式 平台 链接 预览项目： https://nelucifer.gitee.io/ 个人微信公众号： weyoung segmentfault: https://segmentfault.com/u/nelucifer CSDN: https://me.csdn.net/wlx001 简书： https://www.jianshu.com/u/99211cc23788 掘金： https://juejin.im/user/59b08c575188250f4850e80e]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架整合笔记（一）——详细注释]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0%2FSSM%E6%A1%86%E6%9E%B6-%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B00-%E8%AF%A6%E7%BB%86%E6%B3%A8%E9%87%8A.html</url>
    <content type="text"><![CDATA[前言&emsp;&emsp;接触SSM框架到现在也有很长时间了，之前也搭建过几个简单的项目，但是没有进行过记录学习和搭建的过程。网上关于ssm框架整合的资料也不少，不过说句实话，单看某一篇文章能够不踩坑的配置并跑起来的也不太多，在学习过程中筛选甄别这些就浪费了相当一部分时间。 相关文章 Spring系列学习之IoC与AOP SSM框架整合笔记（一）详细注释 SSM框架整合笔记（二）配置Druid和Webservice SSM框架整合笔记（三）配置Tiles、FreeMarker Spring系列学习之IoC与AOP 本文内容&emsp;&emsp;本文理论+实践的方式，分享ssm的相关概念以及采用实践操作的方式搭建整套系统。把搭建过程中踩过的坑、笔记记录整理一下，用以和感兴趣的朋友分享下。 demo下载地址该项目持续更新中，会在代码以及该文档里面详细注释和介绍。项目托管在码云开源平台上，链接：https://gitee.com/nelucifer/ssm-note，点击克隆/下载获取该项目。 前置技能 Maven IDEA Tomcat 环境 Spring：4.2.5.RELEASE Spring MVC Mybatis：3.3.1 MySQL：5.6 IntelliJ IDEA： 2018.2.3 cxf webservice： webservice接口 pagehelper： 分页 Interceptor：拦截器配置 数据结构：powerdesigner16.5 实践步骤一、创建项目 打开IDEA，选择New-&gt;Projects，按照下面的步骤选择：选择Maven，然后勾选Create from archetype，选择webapp这一个 完成之后填入相应的maven项目组信息，GroupId是项目组织的标识符，对应java的包结构；ArtifactId是项目的标识符，对应项目的名称，即项目根目录的名称。groupId和artifactId统称为“坐标”。 填写完成之后点击Next，选择setting.xml和repository路径，如下图： 点击Finish后，maven会根据原型自动创建需要的一些配置信息以及目录结构，等待配置完成，初始项目结构如下： 在main文件夹下创建文件夹java、resources，src文件夹下创建test，test文件夹下创建java文件夹；在java文件夹上右键 -&gt; Mark Directory as，java文件夹选择Sources Root，resources文件夹上选择Resources Root，test文件夹下的java文件夹上选择Test Resources Root，操作如下：完成后的项目结构如下： 二、配置pom.xml和spring详细的解释直接在代码里面注释了。开始贴代码： 1. pom.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;!--maven模块版本：声明项目描述符遵循哪一个POM模型版本，默认是4.0.0--&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!--项目组织的唯一标识符--&gt; &lt;groupId&gt;com.weyoung&lt;/groupId&gt; &lt;!--项目的唯一标识符，和groupId共同唯一标识该项目或组件--&gt; &lt;artifactId&gt;ssm-note&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;!--打包方式，可以选择war和jar--&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;!--项目的名称，Maven产生的文档用--&gt; &lt;name&gt;ssm-note Maven Webapp&lt;/name&gt; &lt;!--项目主页的URL，Maven产生的文档用--&gt; &lt;url&gt;http://www.example.com&lt;/url&gt; &lt;!--项目的详细描述，Maven产生的文档用--&gt; &lt;description&gt;maven+ssm项目整合笔记&lt;/description&gt; &lt;!--项目的问题管理系统--&gt; &lt;issueManagement&gt; &lt;system&gt;jira&lt;/system&gt; &lt;!--该项目使用的问题管理系统的URL--&gt; &lt;url&gt;&lt;/url&gt; &lt;/issueManagement&gt; &lt;!--项目开发者列表--&gt; &lt;developers&gt; &lt;!--某个项目开发者的信息--&gt; &lt;developer&gt; &lt;!--项目开发者id--&gt; &lt;id&gt;coder_lixia&lt;/id&gt; &lt;!--项目开发者的全名--&gt; &lt;name&gt;lixia&lt;/name&gt; &lt;email&gt;ne_lucifer@163.com&lt;/email&gt; &lt;!--项目开发者主页URL--&gt; &lt;url&gt;http://www.wanglixia.top/&lt;/url&gt; &lt;!--项目开发者项目中的角色--&gt; &lt;roles&gt; &lt;role&gt;Project Manager&lt;/role&gt; &lt;/roles&gt; &lt;!--项目开发者所属组织--&gt; &lt;organization&gt;&lt;/organization&gt; &lt;!--项目开发者所属组织的URL--&gt; &lt;organizationUrl&gt;&lt;/organizationUrl&gt; &lt;/developer&gt; &lt;/developers&gt; &lt;!-- 以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里 activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt; &lt;plugin.maven-compiler&gt;3.1&lt;/plugin.maven-compiler&gt; &lt;javac.target.version&gt;1.8&lt;/javac.target.version&gt; &lt;!-- 此处spring.version即为下面$&#123;spring.version的值&#125; --&gt; &lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt; &lt;jstl.version&gt;1.2&lt;/jstl.version&gt; &lt;commons-logging.version&gt;1.1.1&lt;/commons-logging.version&gt; &lt;mybatis.version&gt;3.3.1&lt;/mybatis.version&gt; &lt;mybatis-spring.version&gt;1.2.4&lt;/mybatis-spring.version&gt; &lt;mysql-connector-java.version&gt;5.1.26&lt;/mysql-connector-java.version&gt; &lt;log4j.version&gt;1.2.14&lt;/log4j.version&gt; &lt;slf4j.log4j12.version&gt;1.7.12&lt;/slf4j.log4j12.version&gt; &lt;servlet-api.version&gt;2.5&lt;/servlet-api.version&gt; &lt;commons-io.version&gt;2.4&lt;/commons-io.version&gt; &lt;commons-fileupload.version&gt;1.3&lt;/commons-fileupload.version&gt; &lt;gson.version&gt;2.2.2&lt;/gson.version&gt; &lt;druid.version&gt;1.0.25&lt;/druid.version&gt; &lt;cxf.version&gt;3.1.6&lt;/cxf.version&gt; &lt;fastjson.version&gt;1.2.32&lt;/fastjson.version&gt; &lt;pagehelper.version&gt;5.1.2&lt;/pagehelper.version&gt; &lt;jackson.version&gt;2.7.4&lt;/jackson.version&gt; &lt;/properties&gt; &lt;!-- 发现依赖和扩展的远程仓库列表 --&gt; &lt;repositories&gt; &lt;!-- 包含需要连接到远程仓库的信息 --&gt; &lt;repository&gt; &lt;!-- 远程仓库id，可以用来匹配在settings.xml文件里配置的远程仓库 --&gt; &lt;id&gt;public&lt;/id&gt; &lt;!-- 远程仓库名称 --&gt; &lt;name&gt;aliyun nexus&lt;/name&gt; &lt;!-- 远程仓库URL --&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;!-- 处理远程仓库里发布版本的下载 --&gt; &lt;releases&gt; &lt;!-- true或false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;!-- 更新构件的频率。Maven会比较本地POM和远程POM的时间戳。选项：always（一直），daily（默认每日），inteval：X（X是以分钟为单位），never（从不）--&gt; &lt;updatePolicy&gt;never&lt;/updatePolicy&gt; &lt;!-- 当Maven验证构件校验文件失败时怎么做：ignore（忽略），fail（失败），warn（警告） --&gt; &lt;checksumPolicy&gt;ignore&lt;/checksumPolicy&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;updatePolicy&gt;never&lt;/updatePolicy&gt; &lt;checksumPolicy&gt;ignore&lt;/checksumPolicy&gt; &lt;/snapshots&gt; &lt;!-- 用于定位和排序构件的仓库布局类型-可以使default（默认）或者legacy（遗留） --&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;!-- 发现插件的远程仓库列表，这些插件用于构建和报表 --&gt; &lt;pluginRepositories&gt; &lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt; &lt;pluginRepository&gt; &lt;id&gt;public&lt;/id&gt; &lt;name&gt;aliyun nexus&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;!--项目相关的所有依赖--&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;!-- 依赖的groupID --&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;!-- 依赖的artifactID--&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;!-- 依赖的版本号 --&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;!-- 依赖类型，默认类型是jar，类型一般和使用的打包方式对应，如jar，war等，也有例外，如test-jar等 --&gt; &lt;type&gt;jar&lt;/type&gt; &lt;!-- 依赖范围。 - compile：默认范围，用于编译 - provided：类似于编译 - runtime：在运行时使用 - test：用于test时使用 - system： 需要外在提供相应的元素。通过systemPath来取得 --&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;!-- systemPath：仅用于范围为system。提供相应的路径，不鼓励使用该元素 --&gt; &lt;!--&lt;systemPath&gt;&lt;/systemPath&gt;--&gt; &lt;!-- 可选依赖，当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;!-- 当计算传递依赖时，从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的 依赖。此元素主要用于解决版本冲突问题 --&gt; &lt;!--&lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;--&gt; &lt;/dependency&gt; &lt;!-- spring配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aop&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 1)Spring核心 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-expression&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 2)Spring DAO层 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jms&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-orm&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 3)Spring web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 4)Spring test --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-logging.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- mybatis包--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--mybatis spring插件--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis-spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- mysql连接驱动包--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql-connector-java.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--druid==&gt;阿里巴巴数据库连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- log4j--&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;$&#123;slf4j.log4j12.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- servlet--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;$&#123;servlet-api.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;$&#123;jstl.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 文件上传 --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-io&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-io.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-fileupload.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 解析json--&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt; &lt;artifactId&gt;gson&lt;/artifactId&gt; &lt;version&gt;$&#123;gson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-core&lt;/artifactId&gt; &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt; &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 分页助手 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;$&#123;pagehelper.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- cxf webservice --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-rt-frontend-jaxws&lt;/artifactId&gt; &lt;version&gt;$&#123;cxf.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-core&lt;/artifactId&gt; &lt;version&gt;$&#123;cxf.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-rt-transports-http&lt;/artifactId&gt; &lt;version&gt;$&#123;cxf.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- 构建项目需要的信息 --&gt; &lt;build&gt; &lt;!-- 产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125; --&gt; &lt;finalName&gt;ssm-note&lt;/finalName&gt; &lt;!-- 子项目可以引用的默认插件信息。 --&gt; &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt; &lt;!-- 插件列表 --&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;/plugin&gt; &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.8.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.22.1&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;3.2.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt;&lt;/project&gt; 2. spring-config.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"&gt; &lt;!-- base-package属性指定了需要扫描的类包，类包及其递归子包中所有的类都会被处理 如果某个类的头上带有特定的注解【@Component/@Repository/@Service/@Controller】， 就会将这个对象作为Bean注册进Spring容器 --&gt; &lt;context:component-scan base-package="com.weyoung.service"/&gt; &lt;context:component-scan base-package="com.weyoung.dao"/&gt; &lt;!-- 配置mybatis的sqlSessionFactory --&gt; &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;property name="dataSource" ref="MySQLDataSource"/&gt; &lt;!-- 自动扫描的mybatis mapper.xml文件路径 --&gt; &lt;property name="mapperLocations" value="classpath:/mappers/*.xml"/&gt; &lt;!-- Mybatis配置文件 --&gt; &lt;property name="configLocation" value="classpath:config/mybatis-config.xml"/&gt; &lt;/bean&gt; &lt;!-- 事务管理 --&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="MySQLDataSource"/&gt; &lt;/bean&gt; &lt;!-- 自动扫描的dao接口所在的包名 --&gt; &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;property name="basePackage" value="com.weyoung.dao"/&gt; &lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/&gt; &lt;/bean&gt; &lt;!-- 引入数据库配置文件 --&gt; &lt;bean id="dataSourceConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt; &lt;property name="location" value="classpath:config/jdbc.properties"/&gt; &lt;/bean&gt; &lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/&gt; &lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt; &lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"&gt; &lt;property name="messageConverters"&gt; &lt;list&gt; &lt;bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 配置事务通知属性 --&gt; &lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt; &lt;!-- 定义事务传播属性 --&gt; &lt;tx:attributes&gt; &lt;tx:method name="insert*" propagation="REQUIRED"/&gt; &lt;tx:method name="update*" propagation="REQUIRED"/&gt; &lt;tx:method name="edit*" propagation="REQUIRED"/&gt; &lt;tx:method name="save*" propagation="REQUIRED"/&gt; &lt;tx:method name="add*" propagation="REQUIRED"/&gt; &lt;tx:method name="new*" propagation="REQUIRED"/&gt; &lt;tx:method name="set*" propagation="REQUIRED"/&gt; &lt;tx:method name="remove*" propagation="REQUIRED"/&gt; &lt;tx:method name="delete*" propagation="REQUIRED"/&gt; &lt;tx:method name="change*" propagation="REQUIRED"/&gt; &lt;tx:method name="get*" propagation="REQUIRED" read-only="true"/&gt; &lt;tx:method name="find*" propagation="REQUIRED" read-only="true"/&gt; &lt;tx:method name="load*" propagation="REQUIRED" read-only="true"/&gt; &lt;tx:method name="*" propagation="REQUIRED" read-only="true"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!-- 配置事务切面 --&gt; &lt;aop:config&gt; &lt;aop:pointcut id="serviceOperation" expression="execution(* com.weyoung.service.*.*Impl.*(..))"/&gt; &lt;aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/&gt; &lt;/aop:config&gt; &lt;!-- MySQL数据源配置--&gt; &lt;bean id="MySQLDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"&gt; &lt;property name="driverClassName" value="$&#123;jdbc.mysql.driver&#125;"/&gt; &lt;property name="url" value="$&#123;jdbc.mysql.url&#125;"/&gt; &lt;property name="username" value="$&#123;jdbc.mysql.username&#125;"/&gt; &lt;property name="password" value="$&#123;jdbc.mysql.password&#125;"/&gt; &lt;!-- 配置初始化大小、最小、最大 --&gt; &lt;property name="initialSize" value="$&#123;jdbc.initialSize&#125;"/&gt; &lt;property name="minIdle" value="$&#123;jdbc.minIdle&#125;"/&gt; &lt;property name="maxActive" value="$&#123;jdbc.maxActive&#125;"/&gt; &lt;!-- 配置获取连接等待超时的时间 --&gt; &lt;property name="maxWait" value="$&#123;jdbc.maxWait&#125;"/&gt; &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt; &lt;property name="timeBetweenEvictionRunsMillis" value="$&#123;jdbc.timeBetweenEvictionRunsMillis&#125;"/&gt; &lt;property name="testWhileIdle" value="$&#123;jdbc.testWhileIdle&#125;"/&gt; &lt;!-- 这里建议配置为TRUE，防止取到的连接不可用 --&gt; &lt;property name="testOnBorrow" value="true" /&gt; &lt;property name="testOnReturn" value="false" /&gt; &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt; &lt;property name="poolPreparedStatements" value="true" /&gt; &lt;property name="maxPoolPreparedStatementPerConnectionSize" value="20" /&gt; &lt;!-- 配置提交方式，默认就是true，可以不用配置 --&gt; &lt;property name="defaultAutoCommit" value="$&#123;jdbc.defaultAutoCommit&#125;"/&gt; &lt;!-- 验证连接有效与否的SQL，不同的数据配置不同 --&gt; &lt;!--&lt;property name="validationQuery" value="select 1 " /&gt;--&gt; &lt;property name="filters" value="stat" /&gt; &lt;property name="proxyFilters"&gt; &lt;list&gt; &lt;ref bean="logFilter" /&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter"&gt; &lt;property name="statementExecutableSqlLogEnable" value="false" /&gt; &lt;/bean&gt;&lt;/beans&gt; 3. spring-mvc.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt; &lt;!-- 自动扫描该包，使SpringMVC认为包下(包括子集)用了@controller注解的类是控制器 --&gt; &lt;context:component-scan base-package="com.weyoung.controller"/&gt; &lt;context:annotation-config/&gt; &lt;!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 --&gt; &lt;!-- 默认的注解映射的支持 --&gt; &lt;mvc:annotation-driven&gt; &lt;mvc:message-converters&gt; &lt;ref bean="stringHttpMessageConverter"/&gt; &lt;/mvc:message-converters&gt; &lt;/mvc:annotation-driven&gt; &lt;!-- 解决js,main.webapp.layouts.css,images访问不到的问题--&gt; &lt;mvc:resources mapping="/plugins/**" location="/plugins/"/&gt; &lt;mvc:resources mapping="/layouts/**" location="/layouts/"/&gt; &lt;mvc:resources mapping="/statics/**" location="/statics/"/&gt; &lt;!--拦截器--&gt; &lt;mvc:interceptors&gt; &lt;mvc:interceptor&gt; &lt;mvc:mapping path="/**"/&gt; &lt;bean class="com.weyoung.system.LoginInterceptor"&gt;&lt;/bean&gt; &lt;/mvc:interceptor&gt; &lt;/mvc:interceptors&gt; &lt;!-- 文件上传配置注意:这里申明的id必须为multipartResolver --&gt; &lt;bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"&gt; &lt;!--文件编码--&gt; &lt;property name="defaultEncoding" value="UTF-8"/&gt; &lt;!--文件大小最大值--&gt; &lt;property name="maxUploadSize" value="10485760000"/&gt; &lt;!--内存中的最大值--&gt; &lt;property name="maxInMemorySize" value="40960"/&gt; &lt;/bean&gt; &lt;!--简单的上传异常处理--&gt; &lt;bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"&gt; &lt;property name="exceptionMappings"&gt; &lt;props&gt; &lt;prop key="org.springframework.web.multipart.MaxUploadSizeExceededException"&gt;/error/upload_error.jsp &lt;/prop&gt; &lt;/props&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!--根据 controller 返回的字符串 找到viewResolver --&gt; &lt;bean id="beanNameViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver"&gt; &lt;property name="order" value="1"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- HandlerMapping --&gt; &lt;bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/&gt; &lt;!-- HandlerAdapter --&gt; &lt;bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/&gt; &lt;bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"&gt; &lt;property name="favorParameter" value="false"/&gt; &lt;property name="parameterName" value="format"/&gt; &lt;property name="ignoreAcceptHeader" value="true"/&gt; &lt;property name="mediaTypes"&gt; &lt;value&gt; json=application/json xml=application/xml &lt;/value&gt; &lt;/property&gt; &lt;property name="defaultContentType" value="text/html"/&gt; &lt;/bean&gt; &lt;!-- SpringMVC消息处理——消息转换器 --&gt; &lt;bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter"&gt; &lt;constructor-arg value="UTF-8" index="0"/&gt; &lt;property name="supportedMediaTypes"&gt; &lt;list&gt; &lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!--spring-mvc 视图解析器--&gt; &lt;bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/&gt; &lt;property name="prefix" value="/front-end/"/&gt; &lt;property name="suffix" value=".jsp"/&gt; &lt;property name="order" value="1"/&gt; &lt;/bean&gt; &lt;bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"&gt; &lt;property name="contentNegotiationManager" ref="contentNegotiationManager"/&gt; &lt;property name="defaultViews"&gt; &lt;bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/&gt; &lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt; 4. jdbc.properties123456789101112131415161718192021#============================================================================# MySQL#============================================================================jdbc.mysql.driver=com.mysql.jdbc.Driverjdbc.mysql.url=jdbc:mysql://localhost:3306/SSM_NOTE?useUnicode=true&amp;characterEncoding=utf8jdbc.mysql.username=rootjdbc.mysql.password=lucifer#============================================================================# common settings#============================================================================jdbc.initialSize=5jdbc.minIdle=5jdbc.maxActive=100jdbc.maxWait=100000jdbc.defaultAutoCommit=falsejdbc.removeAbandoned=truejdbc.removeAbandonedTimeout=600jdbc.testWhileIdle=truejdbc.timeBetweenEvictionRunsMillis=60000jdbc.minEvictableIdleTimeMillis=300000 5. log4j.properties123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# 定义输出风格ConversionPattern=%d %-5p [%t] %c - %m%n# 配置根Logger## 日志输出级别log4j.rootLogger=debug,Console,Dlog4j.logger.com.cnblogs.lzrabbit=DEBUGlog4j.logger.org.springframework=ERRORlog4j.logger.org.mybatis=DEBUGlog4j.logger.org.apache.ibatis=DEBUGlog4j.logger.org.quartz=ERRORlog4j.logger.org.apache.axis2=ERRORlog4j.logger.org.apache.axiom=ERRORlog4j.logger.org.apache=ERRORlog4j.logger.httpclient=ERROR#log4j.additivity.org.springframework=false# ==========输出到控制台==========log4j.appender.Console=org.apache.log4j.ConsoleAppenderlog4j.appender.Console.Target=System.out# Layout：日志输出格式# org.apache.log4j.PatternLayout：可以灵活地指定布局模式# org.apache.log4j.HTMLLayout：以HTML表格形式布局# org.apache.log4j.SimpleLayout：包含日志信息的级别和信息字符串# org.apache.log4j.TTCCLayout：包含日志产生的时间、线程、类别等等信息log4j.appender.Console.layout=org.apache.log4j.PatternLayoutlog4j.appender.Console.layout.ConversionPattern=$&#123;ConversionPattern&#125;#log4j.appender.Console.encoding=UTF-8# ==========输出到日志文件==========# Appender为日志输出目的地，Log4j提供的appender有以下几种：# org.apache.log4j.ConsoleAppender（控制台），# org.apache.log4j.FileAppender（文件），# org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），# org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），# org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）log4j.appender.D=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.D.DatePattern=&apos;.&apos;yyyy-MM-dd&apos;.log&apos;log4j.appender.D.File=logs/ssm-note.loglog4j.appender.D.Append=true## 输出日志级别log4j.appender.D.Threshold=DEBUGlog4j.appender.D.layout=org.apache.log4j.PatternLayoutlog4j.appender.D.encoding=UTF-8# ==========输出异常信息日志文件==========log4j.appender.E=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.E.DatePattern=&apos;.&apos;yyyy-MM-dd&apos;.log&apos;log4j.appender.E.File=logs/daily.loglog4j.appender.E.Append=truelog4j.appender.E.Threshold=ERRORlog4j.appender.E.layout=org.apache.log4j.PatternLayoutlog4j.appender.E.encoding=UTF-8log4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%t:%r]-[%p] %m%n# 打印参数# %c 输出日志信息所属的类的全名# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d&#123;yyy-MM-dd HH:mm:ss&#125;，# 输出类似：2019-2-21 01:38:37# %f 输出日志信息所属的类的类名# %l 输出日志事件的发生位置，即输出日志信息的的语句处于它所在的类的第几行# %m 输出代码中指定的信息，如log(message)中的message# %n 输出一个回车换行符，Windows平台为&quot;rn&quot;,Unix平台为&quot;n&quot;# %p 输出优先级，即DEBUG.INFO,WARN,ERROR,FATAL.如果是调用debug()输出的，则为DEBUG,以此类推# %r 输出自应用启动到输出该日志信息所耗费的毫秒数# %t 输出产生该日志的线程名 6. 其他登录业务实现代码：LoginController.java，LoginDao.java，User.java，LoginService.java，LoginServiceImpl.java，LoginMapper.xml.xml的具体实现请下载源码。 三、数据结构1. 登录表结构 2. 登录表语句1234567891011121314151617181920212223drop database if exists ssm_note;create database ssm_note;use ssm_note;/*==============================================================*//* DBMS name: MySQL 5.0 *//* Created on: 2019/2/22 1:09:58 *//*==============================================================*/drop table if exists USER_LOGIN;/*==============================================================*//* Table: USER_LOGIN *//*==============================================================*/create table USER_LOGIN( id int not null, USER_NAME varchar(30) not null, PASSWORD varchar(20) not null, REG_TIME datetime not null default CURRENT_TIMESTAMP, primary key (id)); 项目预览一、登录页： 二、欢迎页： 资料推荐 Spring文档：https://spring.io/docs 史上最全的maven的pom.xml文件详解：https://www.cnblogs.com/hafiz/p/5360195.html Spring 实战（第四版） [美]Craig Walls 著 张卫滨 译 Spring MVC 和 Spring 总结：https://www.cnblogs.com/doudouxiaoye/p/5693399.html Mybatis 官方文档：http://www.mybatis.org/mybatis-3/zh/index.html 概念整理1. Spring&emsp;&emsp;创建Spring的主要目的是用来替代更加重量级的企业级Java技术，尤其是EJB。Spring提供了更加轻量级和简单的编程模型。增强了简单老式Java对象（Plain Old Java Object，POJO）的功能。 为了降低Java开发的复杂性，Spring采取了以下四种关键策略： 基于POJO（Plain Old Java Object）的轻量级和最小侵入性编程； 通过依赖注入和面向接口实现松耦合； 基于切面和管理进行声明式编程； 通过切面和模板减少样板式代码。 2. Spring MVC&emsp;&emsp;Spring MVC基于模型-视图-控制器（Model-View-Controller，MVC）模式实现，能够构建像Spring框架那样灵活和松耦合的Web应用程序。Spring MVC是一个基于mvc的web框架。Spring MVC是Spring框架的一个模块，Spring MVC和Spring无需通过中间整合层进行整合。 3. Mybatis&emsp;&emsp;Mybatis是一款优秀的持久层框架，支持定制化SQL、存储过程以及高级映射。可以使用简单的XML或注解来配置和映射原生信息，将接口和Java的Pojo映射成数据库中的记录。 分享欢迎扫描下方二维码，关注weyoung公众号，一起交流学习~~ 更多联系方式 平台 链接 预览项目： https://nelucifer.gitee.io/ 个人微信公众号： weyoung segmentfault: https://segmentfault.com/u/nelucifer CSDN: https://me.csdn.net/wlx001 简书： https://www.jianshu.com/u/99211cc23788 掘金： https://juejin.im/user/59b08c575188250f4850e80e]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>框架</tag>
        <tag>spring</tag>
        <tag>mybatis</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery学习笔记（四）DOM篇]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%2FJQuery%2FJQuery-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-DOM%E7%AF%87.html</url>
    <content type="text"><![CDATA[DOM包裹wrap()方法如果要将元素用其他元素包裹起来，也就是给它增加一个父元素，JQuery提供了一个wrap方法 .wrap(wrappingElement)：在集合中匹配的每个元素周围包裹一个HTML结构 1&lt;p&gt;p元素&lt;/p&gt; 给p元素增加一个div包裹 1$('p').wrap('&lt;div&gt;&lt;/div&gt;') 最后的结构，p元素增加了一个父div的结构 123&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; .wrap(function) ：一个回调函数，返回用于包裹匹配元素的 HTML 内容或 jQuery 对象使用后的效果与直接传递参数是一样，只不过可以把代码写在函数体内部，写法不同而已以第一个案例为例： 123$('p').wrap(function() &#123; return '&lt;div&gt;&lt;/div&gt;'; //与第一种类似，只是写法不一样&#125;) 注意：.wrap()函数可以接受任何字符串或对象，可以传递给$()工厂函数来指定一个DOM结构。这种结构可以嵌套好几层深，但应该只包含一个核心的元素。每个匹配的元素都会被这种结构包裹。该方法返回原始的元素集，以便之后使用链式方法。 DOM包裹unwrap()方法unwarp()方法 ，作用与wrap方法是相反的。将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置。 123&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; 要删除这段代码中的div，一般常规的方法会直接通过remove或者empty方法 1$('div').remove(); 但是如果还要保留内部元素p 1$('p').unwarp(); 找到p元素，然后调用unwarp方法，这样只会删除父辈div元素了结果： 1&lt;p&gt;p元素&lt;/p&gt; 这个方法不接受任何参数。 DOM包裹wrapAll()方法wrap是针对单个dom元素处理，如果要将集合中的元素用其他元素包裹起来，也就是给他们增加一个父元素，针对这样的处理，JQuery提供了一个wrapAll方法.wrapAll(wrappingElement)：给集合中匹配的元素增加一个外面包裹HTML结构简单的看一段代码： 12&lt;p&gt;p元素&lt;/p&gt;&lt;p&gt;p元素&lt;/p&gt; 给所有p元素增加一个div包裹 1$('p').wrapAll('&lt;div&gt;&lt;/div&gt;') 最后的结构，2个P元素都增加了一个父div的结构 1234&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; .wrapAll(function) ：一个回调函数，返回用于包裹匹配元素的 HTML 内容或 jQuery 对象通过回调的方式可以单独处理每一个元素以上面案例为例， 123$('p').wrapAll(function() &#123; return '&lt;div&gt;&lt;div/&gt;'; &#125;) 以上的写法的结果如下: 123456&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt;&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; 注意：.wrapAll()函数可以接受任何字符串或对象，可以传递给$()工厂函数来指定一个DOM结构。这种结构可以嵌套多层，但是最内层只能有一个元素。所有匹配元素将会被当作是一个整体，在这个整体的外部用指定的 HTML 结构进行包裹。 DOM包裹wrapInner()方法将合集中的元素内部所有的子元素用其他元素包裹起来，并当作指定元素的子元素.wrapInner( wrappingElement )：给集合中匹配的元素的内部，增加包裹的HTML结构 12&lt;div&gt;p元素&lt;/div&gt;&lt;div&gt;p元素&lt;/div&gt; 给所有元素增加一个p包裹 1$('div').wrapInner('&lt;p&gt;&lt;/p&gt;') 最后的结构，匹配的di元素的内部元素被p给包裹了 123456&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt;&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; .wrapInner(function) ：允许我们用一个callback函数做参数，每次遇到匹配元素时，该函数被执行，返回一个DOM元素，jQuery对象，或者HTML片段，用来包住匹配元素的内容。以上面案例为例， 123$('div').wrapInner(function() &#123; return '&lt;p&gt;&lt;/p&gt;'; &#125;) 结果如下: 123456&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt;&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; 注意：当通过一个选择器字符串传递给.wrapInner() 函数，其参数应该是格式正确的 HTML，并且 HTML 标签应该是被正确关闭的。 jQuery遍历之children()方法.children(selector) 方法是返回匹配元素集合中每个元素的所有子元素（仅儿子辈，这里可以理解为就是父亲-儿子的关系） 12345&lt;div class="div"&gt; &lt;ul class="son"&gt; &lt;li class="grandson"&gt;1&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 代码如果是$(“div”).children()，那么意味着只能找到ul，因为div与ul是父子关系，li与div是祖辈关系，因此无法找到。 children()无参数允许我们通过在DOM树中对这些元素的直接子元素进行搜索，并且构造一个新的匹配元素的jQuery对象注意：jQuery是一个合集对象，所以通过children是匹配合集中每一给元素的第一级子元素 .children()方法选择性地接受同一类型选择器表达式 1234567$("div").children(".selected")$('.div').children().css('border', '3px solid red')//找到所有class=div的元素//找到其对应的子元素ul，然后筛选出最后一个，给边宽加上颜色$('.div').children(':last').css('border', '3px solid blue') jQuery遍历之find()方法jQuery是一个合集对象，快速查找DOM树中的这些元素的后代元素可以用find()方法，这也是开发使用频率很高的方法。 12345&lt;div class="div"&gt; &lt;ul class="son"&gt; &lt;li class="grandson"&gt;1&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; $(“div”).find(“li”)，li与div是祖辈关系，通过find方法就可以快速的查找到了。 .find()方法要注意的知识点： find是遍历当前元素集合中每个元素的后代。只要符合，不管是儿子辈，孙子辈都可以。 与其他的树遍历方法不同，选择器表达式对于 .find() 是必需的参数。如果我们需要实现对所有后代元素的取回，可以传递通配选择器 ‘*’。 find只在后代中遍历，不包括自己。 选择器 context 是由 .find() 方法实现的；因此，$(‘.item-ii’).find(‘li’) 等价于 $(‘li’, ‘.item-ii’)(找到类名为item-ii的标签下的li标签)。 注意：.find()和.children()方法是相似的 children只查找第一级的子节点，是父子关系查找 find查找范围包括子节点的所有后代节点，（包含父子关系） jQuery遍历之parent()方法快速查找合集里面的每一个元素的父元素（父亲-儿子的关系），此时可以用parent()方法，这个方法只会向上查找一级123456&lt;div class="div"&gt; &lt;ul class="son"&gt; &lt;li class="grandson"&gt;1&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 12// 查找ul的父元素div$(ul).parent() parent()无参数parent()方法允许在DOM树中搜索到这些元素的父级元素，从有序的向上匹配元素，并根据匹配的元素创建一个新的 jQuery 对象 注意：jQuery是一个合集对象，所以通过parent是匹配合集中每一个元素的父元素parent()方法选择性地接受同一型选择器表达式,同样的也是因为jQuery是合集对象，可能需要对这个合集对象进行一定的筛选，找出目标元素，所以允许传一个选择器的表达式 jQuery遍历之parents()方法快速查找合集里面的每一个元素的所有祖辈元素，此时可以用parents()方法其实也类似find与children的区别，parent只会查找一级，parents则会往上一直查到查找到祖先节点理解节点查找关系： 1 在li节点上找到祖 辈元素div， 这里可以用$(“li”).parents()方法 parents()无参数parents()方法允许在DOM树中搜索到这些元素的祖先元素，有序的向上匹配元素，并根据匹配的元素创建一个新的 jQuery 对象;返回的元素秩序是从离他们最近的父级元素开始的注意：jQuery是一个合集对象，所以通过parent是匹配合集中所有元素的祖辈元素 parents()方法选择性地接受同一型选择器表达式同样的也是因为jQuery是合集对象，可能需要对这个合集对象进行一定的筛选，找出目标元素，所以允许传一个选择器的表达式注意事项： .parents()和.parent()方法是相似的，但后者只是进行了一个单级的DOM树查找 $( “html” ).parent()方法返回一个包含document的集合，而$( “html” ).parents()返回一个空集合。 123//找到当前元素的所有祖辈元素,筛选出class="first-div"的元素//并且附上一个边$('.item-b').parents('.first-div').css('border', '2px solid blue')]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>前端</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人人都可快速上手的GitBook使用笔记（持续更新中）]]></title>
    <url>%2F%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%2F%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-GitBook-%E4%BD%BF%E7%94%A8.html</url>
    <content type="text"><![CDATA[介绍GitBook是Markdown与HTML完美的结合。 百科介绍：GitBook是一个基于Node.js的命令行工具，可通过Markdown来制作电子书、在线文档等。GitBook支持输出多种格式： PDF： 需要安装gitbook-pdf依赖； eBook： 需要安装ebook-convert； 单HTML网页： 支持将内容输出为单页的HTML。 前置条件 需要安装Node.js； 安装GitBook命令行工具； MarkDown常用语法； 本文介绍环境配置 NPM版本： 5.6.0 OS版本：Windows10 CLI version: 2.3.2 GitBook version: 3.2.3 相关网站 Gitbook好用的插件：https://plugins.gitbook.com/ Gitbook使用文档：https://github.com/GitbookIO/gitbook 使用步骤GitBook的初始化，编译和预览等均需要在命令行进行，就像hexo编写个人博客一样。 安装GitBook工具1npm install gitbook-cli -g 初始化新建一个目录，命令行打开该目录，然后以下输入命令，就可以初始化书籍，生成两个文件（没有生成其他教程说的book.json）： README.md：书籍介绍 SUMMARY.md：书籍目录 1gitbook init 编译成html生成的文件在上述目录下的_book文件夹下 1gitbook build 本地进行预览浏览器中打开http://localhost:4000进行预览。 1gitbook serve 相关命令1gitbook update # 更新gitbook 手动给GitBook添加book.json因为使用gitbook init生成的目录默认是没有book.json的，那么要引入其他的插件的话就需要自己手动在根目录创建一个book.json，配置之后需要使用gitbook install安装book.json中配置的插件。基本格式如下： { &quot;gitbook&quot;: &quot;3.2.3&quot;, &quot;title&quot;: &quot;标题&quot;, &quot;description&quot;: &quot;文档描述&quot;, &quot;author&quot;: &quot;作者&quot;, &quot;language&quot;: &quot;zh-hans&quot;, &quot;links&quot;: { &quot;gitbook&quot;: true, &quot;sharing&quot;: { &quot;google&quot;: false, &quot;facebook&quot;: false, &quot;twitter&quot;: false, &quot;all&quot;: false } },//分享按钮是否展示 &quot;plugins&quot;: [ &quot;github&quot;, &quot;donate&quot;, &quot;splitter&quot;, &quot;anchor-navigation-ex&quot;, &quot;-sharing&quot;, &quot;sharing-plus&quot;, &quot;-highlight&quot;, &quot;prism&quot;, &quot;disqus&quot;, &quot;editlink&quot;, &quot;baidu&quot;, &quot;sitemap&quot;, &quot;tbfed-pagefooter&quot;, &quot;fontsettings&quot;, &quot;simple-page-toc&quot;, &quot;links&quot; ], &quot;pluginsConfig&quot;: { &quot;tbfed-pagefooter&quot;: { &quot;copyright&quot;: &quot;&quot;, &quot;modify_label&quot;: &quot;文件修改时间：&quot;, &quot;modify_format&quot;: &quot;YYYY-MM-DD HH:mm:ss&quot; },// 文件的修改时间，以及版权声明等 &quot;simple-page-toc&quot;: { &quot;maxDepth&quot;: 3, &quot;skipFirstH1&quot;: true }, &quot;sharing&quot;: { &quot;douban&quot;: false, &quot;facebook&quot;: false, &quot;google&quot;: false, &quot;hatenaBookmark&quot;: false, &quot;instapaper&quot;: false, &quot;line&quot;: false, &quot;linkedin&quot;: false, &quot;messenger&quot;: false, &quot;pocket&quot;: false, &quot;qq&quot;: false, &quot;qzone&quot;: false, &quot;stumbleupon&quot;: false, &quot;twitter&quot;: false, &quot;viber&quot;: false, &quot;vk&quot;: false, &quot;weibo&quot;: false, &quot;whatsapp&quot;: false, &quot;all&quot;: [ &quot;weibo&quot;, &quot;qq&quot;, &quot;qzone&quot;, &quot;google&quot;, &quot;douban&quot; ] }, &quot;github&quot;: { &quot;url&quot;: &quot;https://github.com/nelucifer&quot; }, &quot;donate&quot;: { &quot;wechat&quot;: &quot;&quot;, &quot;title&quot;: &quot;&quot;, &quot;button&quot;: &quot;赏&quot;, &quot;wechatText&quot;: &quot;微信打赏&quot; }, &quot;anchor-navigation-ex&quot;: { &quot;associatedWithSummary&quot;: false, &quot;showLevel&quot;: true, &quot;multipleH1&quot;: true, &quot;mode&quot;: &quot;float&quot;, &quot;pageTop&quot;: { &quot;showLevelIcon&quot;: false, &quot;level1Icon&quot;: &quot;fa fa-hand-o-right&quot;, &quot;level2Icon&quot;: &quot;fa fa-hand-o-right&quot;, &quot;level3Icon&quot;: &quot;fa fa-hand-o-right&quot; } }, &quot;theme-default&quot;: { &quot;showLevel&quot;: true }, &quot;fontsettings&quot;: { &quot;theme&quot;: &quot;white&quot;, &quot;family&quot;: &quot;serif&quot;, &quot;size&quot;: 2 },// 显示样式以及文字大小的主题 &quot;sidebar&quot;: { }, &quot;disqus&quot;: { &quot;shortName&quot;: &quot;webpack-handbook&quot; //生成评论 }, &quot;github&quot;: { &quot;url&quot;: &quot;https://github.com/nelucifer/front-template&quot; }, &quot;editlink&quot;: { &quot;base&quot;: &quot;https://github.com/nelucifer/&quot;, &quot;label&quot;: &quot;编辑本页面&quot; //内容顶部显示 编辑本页 链接，点击跳转到配置的源码存放位置 }, &quot;baidu&quot;: { &quot;token&quot;: &quot;&quot; //百度站长工具统计 }, &quot;sitemap&quot;: { &quot;hostname&quot;: &quot;http://baidu.com/&quot;//站点地图 }, &quot;prism&quot;: { &quot;css&quot;: [ &quot;prismjs/themes/prism-tomorrow.css&quot; ] } } }]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>GitBook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis系列——windows下redis设置及安装windows服务]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FRedis%E7%B3%BB%E5%88%97-0-Windows%E4%B8%8B%E5%AE%89%E8%A3%85Redis%E6%9C%8D%E5%8A%A1.html</url>
    <content type="text"><![CDATA[前言Redis是一个开源（BSD许可），内存数据结构存储，用作数据库，缓存和消息代理。 它支持数据结构，如字符串，散列，列表，集合，带有范围查询的排序集，位图，超级日志，带有半径查询和流的地理空间索引。 Redis具有内置复制，Lua脚本，LRU驱逐，事务和不同级别的磁盘持久性，并通过Redis Sentinel提供高可用性并使用Redis Cluster自动分区。本文简单记录一下windows下redis设置及安装成windows服务。 介绍 REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。 百度百科：Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 官网介绍: Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.Google 翻译：Redis是一个开源（BSD许可），内存数据结构存储，用作数据库，缓存和消息代理。 它支持数据结构，如字符串，散列，列表，集合，带有范围查询的排序集，位图，超级日志，带有半径查询和流的地理空间索引。 Redis具有内置复制，Lua脚本，LRU驱逐，事务和不同级别的磁盘持久性，并通过Redis Sentinel提供高可用性并使用Redis Cluster自动分区。 准备下载windows版的redis（解压版），下载地址：https://github.com/ServiceStack/redis-windows/tree/master/downloads下载Redis可视化工具 Redis Desktop Manager，下载地址：https://redisdesktop.com/download百度网盘：链接：https://pan.baidu.com/s/1vcRywB4JTA2xPCUvh0n1DA 提取码：y1vv安装步骤解压redis-64.3.0.503.zip；cmd命令进入该目录 文件 作用 redis-server 启动redis redis-cli redis命令行工具 redis-benchmark 基准测试工具 redis-check-aof AOF持久化文件检测工具和修复工具 redis-check-dump RDB持久化文件检测工具和修复工具 redis-sentinel 启动redis-sentinel 在解压后的文件夹里面，按住shift，然后鼠标右键点击空白区域，选择【在此处打开命令窗口】，快捷打开cmd窗口和当前目录。 启动：带配置文件启动redis:redis.windows.conf 这个文件是redis的配置文件，使用以下命令启动： 1redis-server.exe redis-windows.conf 不带配置文件启动：双击redis-server.exe；或者使用以下命令启动：1redis-server.exe 出现如下图时，启动成功。 登录redis启动redis服务后，需要登录redis来进行操作，这个时候需要按照上面步骤重新打开一个命令窗口，使用redis-cli命令进行登录，命令如下 -h 服务器/主机地址，本地就是127.0.0.1 -p 端口号，默认应该是6379 -a 密码 1redis-cli.exe -h 127.0.0.1 -a lucifer 登录成功后，如下图示： 重置密码打开redis.conf配置文件，我下载的版本配置文件名是redis-windows.conf，找到# requirepass foobared，去掉注释，井号代表注释，然后修改如下即可:1requirepass 你的密码 #我设置的是lucifer 安装成windows服务自己本地练习的时候呢，每一次都要打开目录，然后输入命令来启动服务，再打开另外一个窗口进行操作，确实是不方便，接下来将redis服务安装成windows服务。命令窗口执行以下命令： 1redis-server --service-install redis.windows.conf 常用命令 启动命令： 1redis-server --service-start 停止命令： 1redis-server --service-stop 卸载命令： 1redis-server --service-uninstall Redis可视化工具RedisDesktopManager使用黑窗口操作虽然看起来足够炫酷，但是终究还是不那么方便，因此，需要使用到RDM工具，这块比较简单了就。安装，一路next。填入连接名，随便填，你认识就行；服务器地址、端口号、密码，点测试连接；可以缓存到内容 结束]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>windows</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[好用的前端响应式框架——Bootstrap]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%2FBootstrap%2FBootstrap-%E5%88%86%E4%BA%AB%E7%AC%94%E8%AE%B01.html</url>
    <content type="text"><![CDATA[引言Bootstrap是美国Twitter公司的设计师Mark Otto和Jacob Thornton合作基于HTML、CSS、JavaScript 开发的简洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。 Bootstrap的优点： 移动设备优先。 响应式设计。基于bootstrap的网站和系统，能够自适应于台式机、平板电脑和手机。 容易上手。前置技能：HTML和CSS的基础知识即可。 浏览器支持比较好。IE、FireFox、Chrome、Opera、Safari等。 文档比较完善、内置组件比较多，容易定制。 开源。 准备Bootstrap提供多种使用方式：直接下载Bootstrap并引入；使用BootstrapCDN；包管理工具；npm、RubyGems、Composer、NuGet。这里主要说一下使用第一种方式（直接下载Bootstrap并引入），也是最常见的一种方式，也可以直接使用BootstrapCDN提供的免费CDN加速版本。 下载版本： 下载适用于生产环境的Bootstrap（不包含文档）； 下载Bootstrap源码（包含文档）； Sass 用于快速地在 Rails、Compass 或 只针对 Sass 的项目中引入。 下载链接：https://v3.bootcss.com/getting-started/#download-composer开始文件结构bootstrap/ css/ bootstrap.css bootstrap.min.css bootstrap-theme.css bootstrap-theme.min.css js/ bootstrap.js bootstrap.min.jsBootstrap使用在使用Bootstrap的html模板中进行使用。12345678910111213&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Bootstrap使用和效果预览&lt;/title&gt; &lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt; &lt;link rel="stylesheet" href="/css/bootstrap.min.css"&gt; &lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt; &lt;link rel="stylesheet" href="/css/bootstrap-theme.min.css"&gt; &lt;!-- jQuery (Bootstrap 的 JavaScript 插件需要引入 jQuery) --&gt; &lt;script src="/js/jquery.js"&gt;&lt;/script&gt; &lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt; &lt;script src="/js/bootstrap.min.js"&gt;&lt;/script&gt;&lt;/head&gt; Bootstrap的相关概念Bootstrap 包含了一个响应式的、移动设备优先的、不固定的网格系统，可以随着设备或视口大小的增加而适当地扩展到 12 列。前面有说过bootstrap的一个优点，那就是移动设备优先：优先设计更小的宽度，即默认设计是移动设备的样式，再使用媒体查询来设置平板电脑、台式电脑以及大台式电脑。1234567891011/* 超小设备（手机，小于 768px） *//* Bootstrap 中默认情况下没有媒体查询 *//* 小型设备（平板电脑，768px 起） */@media (min-width: @screen-sm-min) &#123; ... &#125;/* 中型设备（台式电脑，992px 起） */@media (min-width: @screen-md-min) &#123; ... &#125;/* 大型设备（大台式电脑，1200px 起） */@media (min-width: @screen-lg-min) &#123; ... &#125; 具体设置及行为见下表： 超小设备手机（&lt;768px） 小型设备平板电脑（≥768px） 中型设备台式电脑（≥992px） 大型设备台式电脑（≥1200px） 网格行为 一直是水平的 以折叠开始，断点以上是水平的 以折叠开始，断点以上是水平的 以折叠开始，断点以上是水平的 最大容器宽度 None (auto) 750px 970px 1170px Class 前缀 .col-xs- .col-sm- .col-md- .col-lg- 列数量和 12 12 12 12 最大列宽 Auto 60px 78px 95px 间隙宽度 30px（一个列的每边分别 15px） 30px（一个列的每边分别 15px） 30px（一个列的每边分别 15px） 30px（一个列的每边分别 15px） 可嵌套 Yes Yes Yes Yes 偏移量 Yes Yes Yes Yes 列排序 Yes Yes Yes Yes Bootstrap怎么用？在一个div中的class中定义col--，第一个星号的值范围是[xs,sm,md,lg] ，第二个星号的值范围是1-12；因此设置的时候需要注意数值是否规范。12345678&lt;div class="container"&gt; &lt;div class="row"&gt; &lt;!-- 在一个div中的class中定义col-*-*，第一个星号的值范围是[xs,sm,md,lg] ，第二个星号的值范围是1-12--&gt; &lt;div class="col-*-*"&gt;&lt;/div&gt; &lt;div class="col-*-*"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="row"&gt;...&lt;/div&gt;&lt;/div&gt; Bootstrap布局组件 Bootstrap 字体图标 Bootstrap 下拉菜单 Bootstrap 按钮组 Bootstrap 按钮下拉菜单 Bootstrap 输入框组 Bootstrap 导航元素 Bootstrap 导航栏 Bootstrap 面包屑导航 Bootstrap 分页 Bootstrap 标签 Bootstrap 徽章 Bootstrap 超大屏幕 Bootstrap 页面标题 Bootstrap 缩略图 Bootstrap 警告 Bootstrap 进度条 Bootstrap 多媒体对象 Bootstrap 列表组 Bootstrap 面板 Bootstrap WellsBootstrap插件 Bootstrap 过渡效果 Bootstrap 模态框 Bootstrap 下拉菜单 Bootstrap 滚动监听 Bootstrap 标签页 Bootstrap 提示工具 Bootstrap 弹出框 Bootstrap 警告框 Bootstrap 按钮 Bootstrap 折叠 Bootstrap 轮播 Bootstrap 附加导航Bootstrap常用插件 表单验证插件 bootstrapValidator Messenger 弹框组件库结语文档上提供的BootstrapDialog模态框组件的实现比较繁琐，因此可以在网上找相关插件处理。文档 Bootstrap官网：http://www.bootcss.com/ Bootstrap官方文档：https://v3.bootcss.com/components/致谢在学习过程中，经常在菜鸟教程http://www.runoob.com/查阅资料，表示感谢。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>前端</tag>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mybatis常见错误记录]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E6%A1%86%E6%9E%B6%2FMybatis%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;Mybatis使用过程中，常见的一些问题汇总记录。 1. Mybatis执行SQL，查出来的比使用PL/SQL等工具查出来的记录多。 问题描述：由于查询要使用到not in，因此 not in ()括号里面的东西自己使用了前端拼接传值，传值格式为’’,’’ 问题处理：在Mapper.xml中使用了#{}，这块涉及到#{}和${}的区别。替换成${} 就好了。2. MyBatis mapper文件中的变量引用方式#{}与${}的差别默认情况下,使用#{}语法,MyBatis会产生PreparedStatement语句中，并且安全的设置PreparedStatement参数，这个过程中MyBatis会进行必要的安全检查和转义。示例1：执行SQL：1Select * from emp where name = #&#123;employeeName&#125; 参数：employeeName传入值为：Smith解析后执行的SQL：1Select * from emp where name = ? 执行SQL：1Select * from emp where name = $&#123;employeeName&#125; 参数：employeeName传入值为：Smith解析后执行的SQL：1Select * from emp where name = Smith 综上所述、${}方式会引发SQL注入的问题、同时也会影响SQL语句的预编译，所以从安全性和性能的角度出发，能使用#{}的情况下就不要使用${}${}的使用场景：有时候可能需要直接插入一个不做任何修改的字符串到SQL语句中。这时候应该使用${}语法。比如，动态SQL中的字段名，如：ORDER BY ${columnName}，not in ${items}注意：当使用${}参数作为字段名或表名时、需指定statementType为“STATEMENT”，如：123&lt;select id="queryMetaList" resultType="Map" statementType="STATEMENT"&gt; Select * from emp where name = $&#123;employeeName&#125; ORDER BY $&#123;columnName&#125;&lt;/select&gt; 3. ssm-web项目启动报错（一） Could not resolve type alias ‘map ‘. Cause: java.lang.ClassNotFoundException: Cannot find class: map123&lt;select id="selectByCode" resultType="com.lucifer.pojo.BaseParams" parameterType="java.util.map"&gt; SELECT BP.ID,BP.NAME FROM BASE_PARAMS BP WHERE BP.DOMAIN=#&#123;domain&#125; AND BP.IS_CANCEL='N'&lt;/select&gt; 处理方式：把resultType改为resultMap，把parameterType改为parameterMap，重新发布并运行。 4. ssm-web项目启动报错（二） org.mybatis.spring.transaction.SpringManagedTransaction - JDBC Connection [**] will not be managed by Spring 处理方式：]]></content>
      <categories>
        <category>错误</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记使用hexo搭建个人博客-报错集锦]]></title>
    <url>%2FHexo%2FHexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E6%8A%A5%E9%94%99%E9%9B%86%E9%94%A6.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;使用hexo+github/coding+next搭建个人博客过程中遇到的一些问题集中整理，包括： 报错一：TypeError: Cannot set property ‘lastIndex’ of undefined 报错二：Permission denied (publickey). 报错三：Error: ERROR: Repository not found. fatal: Could not read from remote repository. 报错一：TypeError: Cannot set property ‘lastIndex’ of undefined问题描述：使用hexo g 报错 TypeError: Cannot set property ‘lastIndex’ of undefined 问题处理：在hexo中的_config.yml 文件中的高亮功能设置错了，不是主题的_config.yml，其中的 auto_detect 应该设置为 false。12345highlight: enable: true line_number: true auto_detect: false tab_replace: 改过之后再执行就好了。 报错二： Permission denied (publickey).问题处理：第一步：创建SSH Key。windows下的目录C:\Users\用户名.ssh，看看有没有.ssh目录，，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub&lt;/code&gt;这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：1ssh-keygen -t rsa -C "ne_lucifer@163.com" 你需要把邮件地址换成你自己的邮件地址，然后点击回车，使用默认值即可。第二步：登录Github（登录后路径https://github.com/settings/keys）或者Coding(登录后路径&lt;/code&gt;)，按如下步骤操作，用记事本打开id_rsa.pub，全选，把里面的内容粘贴到公钥内容里，title随便起一个 报错三： Error: ERROR: Repository not found. fatal: Could not read from remote repository.问题描述：使用hexo d部署项目到pages服务时报错1234567891011121314Please make sure you have the correct access rightsand the repository exists.FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: ERROR: Repository not found.fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. at ChildProcess.&lt;anonymous&gt; (F:\WorkSpaces\hexo\blog\node_modules\hexo-util\lib\spawn.js:37:17) at ChildProcess.emit (events.js:182:13) at ChildProcess.cp.emit (F:\WorkSpaces\hexo\blog\node_modules\cross-spawn\lib\enoent.js:40:29) at maybeClose (internal/child_process.js:962:16) at Socket.stream.socket.on (internal/child_process.js:381:11) at Socket.emit (events.js:182:13) at Pipe._handle.close (net.js:606:12) 查看远端有没有这个分支；使用ssh -T git@git.coding.net命令，会出现下面信息，输入yes然后回车即可部署。123The authenticity of host &apos;git.coding.net (118.25.166.124)&apos; can&apos;t be established.RSA key fingerprint is SHA256:这块是一串编码.Are you sure you want to continue connecting (yes/no)?]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>coding</tag>
        <tag>next</tag>
        <tag>gitalk</tag>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记使用hexo搭建个人博客（三）]]></title>
    <url>%2FHexo%2FHexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A23.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;使用hexo+next+github/coding+gitalk添加博客评论系统,以及hexo+next+码云+issue，这里使用的是next主题，如有问题，可以在博客下方评论。本文内容如下： 使用gitalk为博客添加评论功能、 vscode 使用七牛云做图床、 Hexo Next主题SEO优化、 Hexo 添加RSS订阅 next主题添加gitalk 准备在使用gitalk作为评论系统之前，需要在github上注册新的应用； 注册GitHub应用链接。按如下描述填写:填写完成后，点击绿色按钮，跳转到一下页面，可以看到Client ID和Client Secret，后面会用到。在项目目录下执行如下命令npm install gitalk —save 安装gitalk； 修改的内容新建gitalk.swig；路径themes/next/layout/_third-party/comments/gitalk.swig，内容如下：12345678910111213141516&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt; &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var gitalk = new Gitalk(&#123; clientID: &apos;&#123;&#123; theme.gitalk.ClientID &#125;&#125;&apos;, clientSecret: &apos;&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;&apos;, repo: &apos;&#123;&#123; theme.gitalk.repo &#125;&#125;&apos;, owner: &apos;&#123;&#123; theme.gitalk.githubID &#125;&#125;&apos;, admin: [&apos;&#123;&#123; theme.gitalk.adminUser &#125;&#125;&apos;], id: location.pathname, distractionFreeMode: &apos;&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;&apos; &#125;) gitalk.render(&apos;gitalk-container&apos;) &lt;/script&gt;&#123;% endif %&#125; 修改comments.swig路径themes/next/layout/_partials/comments.swig，在最后一个div里面加上如下内容：12&#123;% elseif theme.gitalk.enable %&#125; &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt; 修改index.swig路径themes/next/layout/_third-party/comments/index.swig，在最后一行加上如下内容：1&#123;% include &apos;gitalk.swig&apos; %&#125; 新建gitalk.styl路径themes/next/source/css/_common/components/third-party/gitalk.styl，内容如下：1234.gt-header a, .gt-comments a, .gt-popup a border-bottom: none;.gt-container .gt-popup .gt-action.is--active:before top: 0.7em; 修改third-party.styl路径themes/next/source/css/_common/components/third-party/gitalk.styl，在最后一行加上如下内容：1@import &quot;gitalk&quot;; 修改文件_config.yml路径themes/next/_config.yml，注意是主题的配置文件，增加内容如下：12345678910gitalk: enable: true githubID: nelucifer # 例：nelucifer repo: nelucifer.github.io # 存储你评论 issue 的 Github 仓库名（建议直接用 GitHub Page 的仓库名） 例：nelucifer.github.io ClientID: 这块填注册Github应用成功之后的ClientID ClientSecret: 注册Github应用成功之后的ClientSecret #owner: 'Github 用户名', adminUser: ['nelucifer'] #指定可初始化评论账户，Github仓库的管理员，可以有多个 distractionFreeMode: true #id: 'window.location.pathname' #页面的唯一标识，gitalk根据这个标识自动创建的issue的标签,此处使用页面的相对路径作为标识 参考文章&emsp;&emsp;在使用gitalk作为评论系统的时候，参考了以下文章，特此添加链接，表示感谢： hexo 博客next主题集成gitment或者gitalk评论系统 hexo next主题深度优化(五)，评论系统换成gittalk vscode + 七牛云现在使用七牛云做图床需要已经备案的域名，测试域名不能用啦。 准备 下载vscode，这儿是下载链接 七牛云，传送门安装七牛云插件 安装插件：qiniu-upload-image 文件&gt;首选项&gt;设置，在右侧setting.json填写自己的配置覆盖默认配置。配置文件如下，使用的配置是七牛云里面的【密钥管理】：123456789101112131415161718192021&#123; // 一个有效的七牛 AccessKey 签名授权。 &quot;qiniu.access_key&quot;: &quot;密钥管理里面的AK&quot;, // 七牛图片上传空间。 &quot;qiniu.bucket&quot;: &quot;weyoung-pub&quot;, // 七牛图床域名。 &quot;qiniu.domain&quot;: &quot;自己配置的图床域名，使用二级域名就行&quot;, // 七牛图片上传工具开关 &quot;qiniu.enable&quot;: true, // 七牛图片上传路径，参数化命名。 &quot;qiniu.remotePath&quot;: &quot;$&#123;fileName&#125;-$&#123;dateTime&#125;&quot;, // 一个有效的七牛 SecretKey 签名授权。 &quot;qiniu.secret_key&quot;: &quot;密钥管理里面的SK&quot;, &quot;files.autoSave&quot;: &quot;afterDelay&quot;, &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\Windows\\System32\\cmd.exe&quot;,&#125; 使用快捷键 粘贴图片路径上传：SHIFT + P直接选择图片上传：SHIFT + O 安装插件Ctrl+P 输入命令：1ext install qiniu-upload-image 完成Hexo Next 主题SEO优化SEO ？汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。 针对百度搜索引擎的优化1. 添加百度sitemap，生成sitemap文件安装两个插件12npm install hexo-generator-sitemap --save-devnpm install hexo-generator-baidu-sitemap --save-dev 上面的是传统的sitemap，下面的是百度专有的sitemap。测试是否安装成功。使用命令hexo s本地预览。本地预览：[http://localhost:4000/sitemap.xml]http://localhost:4000/sitemap.xml 和 [http://localhost:4000/baidusitemap.xml]http://localhost:4000/baidusitemap.xml 显示sitemap文件内容。 2. 注册百度搜索资源工具地址：https://ziyuan.baidu.com/添加网站之后，需要验证，验证方式有文件验证、HTML标签验证、CNAME验证。网上的例子：使用文件验证进行验证。 下载验证文件，放到博客项目的source文件夹下，使用hexo g -d，部署到自己的网站上； 部署之后，在站长工具页面点击验证，能够访问证明验证成功； 然后点击【完成验证】按钮，为保持验证通过的状态,成功验证后请不要删除HTML文件。 我使用这个验证失败，hexo会为文件加上一些样式，验证好几次验证不通过 使用HTML标签验证进行验证。我使用的是Hexo + NexT。 在themes/next/layout/_partials/head.swig文件中，修改meta标签为站长工具里面给出的标签。123&#123;% if theme.baidu_site_verification %&#125; &lt;meta name=&quot;baidu-site-verification&quot; content=&quot;这块修改&quot; /&gt;&#123;% endif %&#125; 或者在 themes/next/_config.yml 添加或者修改，注意格式 12# 百度搜索引擎优化baidu_site_verification: 站长工具里面给出的标签 在themes/next/_config.yml中将false``` 改为true12345678* 使用&lt;code&gt;hexo g -d&lt;/code&gt;，部署到自己的网站上，如果不清楚部署的可以看前两篇文章；* 然后点击【完成验证】按钮，等待百度的审核结果#### 3. 添加robots，方便搜索蜘蛛进行检索&amp;emsp;&amp;emsp;百度百科：robots是网站跟爬虫间的协议，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，也就是说robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。新建&lt;code&gt;robots.txt&lt;/code&gt;文件，添加以下文件内容，把&lt;code&gt;robots.txt&lt;/code&gt;放在的&lt;code&gt;source&lt;/code&gt;文件下。文件内容： hexo robots.txtUser-agent: * Allow: /Allow: /archives/Allow: /about/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /images/ Sitemap: http://www.wanglixia.top/sitemap.xmlSitemap: http://www.wanglixia.top/baidusitemap.xml12345678910111213在百度站长工具-【链接提交】中填写数据文件地址并提交。#### 4. 优化结构 这个我不懂，参考资料: 作者：浪子燕青啦啦啦 [HEXO SEO 高级优化](https://blog.csdn.net/lzy98/article/details/81140704)seo搜索引擎优化认为，网站的最佳结构是用户从首页点击三次就可以到达任何一个页面，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下：```yml# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://www.wanglixia.top/ #你的域名root: /#permalink: :year/:month/:day/:title/ 为了利于SEO，改为以下方式permalink: :title.htmlpermalink_defaults: 首页标题优化，SEO最重要的是你的标题，一般搜索都是搜索你的标题，更改index.swig文件(your-hexo-site\themes\next\layout); 您的站点有链接未通过https检验因为一直使用的是http，百度验证需要使用https。我是使用coding+github双线部署的； coding 设置强制https访问打开项目，【代码】-&gt;【Pages服务】-&gt;【强制 HTTPS 访问】 github 设置强制https访问打开项目，【setting】-&gt;【Enforce HTTPS】的勾打上；完成；访问一下，看下有没有变化啦！ Hexo添加RSS订阅安装feed插件1npm install hexo-generator-feed 在项目根目录的_config.yml添加内容：1234567# Extensionsplugins: hexo-generator-feedfeed: # 实现博客订阅功能 type: atom path: atom.xml limit: 20 使用hexo g -d生成并部署。使用方法：邮件中【新建订阅】，我的订阅地址为：https://www.wanglixia.top/atom.xml，如图： 完成]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>coding</tag>
        <tag>next</tag>
        <tag>gitalk</tag>
        <tag>gitee</tag>
        <tag>码云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[npm常用命令]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%2FNpm-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"><![CDATA[&emsp;&emsp; 使用npm的时候，有一些命令及配置常用到，记录。 npm修改源&emsp;&emsp;使用npm在npm install时，速度特别慢，因此修改npm的数据源1npm config set registry https://registry.npm.taobao.org 修改后，即可进行下载啦，速度快了好多~~]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记之陀氏-穷人的美德]]></title>
    <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E9%99%80%E6%B0%8F-%E7%A9%B7%E4%BA%BA%E7%9A%84%E7%BE%8E%E5%BE%B7.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;陀氏的《穷人的美德》，摘部分内容于此文中。 目录穷人的美德就是会赚钱 穷人最重要的美德就是会赚钱，道德就是一个人不该成为其他人的累赘 。 要爱别人，首先爱自己，因为世界上的一切都是以个人利益为基础的。 有几个人的表现特别突出，自然招来一些流言蜚语。因为没有流言蜚语，世界就无法存在，千百万人就会像苍蝇一样，因为寂寞无聊而死去。 用千万件好事去抵一桩小罪 命定的事总是会实现的，有价值的人将占有他应有的位置，而无价值的人将永远躲进小胡同，躲进他肮脏的小胡同，他喜爱而且正适合于他的小胡同，并且就在那污秽和臭气中，心甘情愿而且愉快地结束他的生命。 我们每个人都应该对世上一切人和一切事物负责，这一点是毫无疑义的，这不但是因为大家都参与了整个世界的罪恶，也是因为个人本来就应该为世上的一切人和一切事物负责。 在这种放荡生活里至少有一种固定不变的东西，它甚至是以天性为基础，而不是为幻想所左右的，它犹如血液中永不熄灭的炭火，永远燃烧着，还要燃烧很久很久，随着年龄的增长，或许也不能让它很快熄灭。 一时糊涂与意志衰退天才人物与犯罪的权利 总而言之，我得出结论，所有这些人，不仅是那些伟大的，就连那些稍微越出常轨的人，也就是说，就连那些稍微能提出点儿什么新见解的人，就其天性来说，必须是罪人—当然，只是在一定程度上，不然，他们就难以越出常轨；而让他们循规蹈矩，不越雷池一步，他们当然不会同意，这又是由于他们的天性，而照我看，他们甚至有责任不同意。 按照自然规律，人一般可以分作两类：一类是低级的（平凡的），也可以这么说吧。仅仅是一种繁殖同类的材料；另一类是名副其实的人，也就是有天赋或天才，能在自己的社会上发表新见解的人。……第一类人永远是当代的主人，第二类人却是未来的主人。第一类人保全世界，增加人的数量；第二类人则推动世界向前发展，引导它达到自己的目的。无论是这一类人，还是那一类人，都有完全同等的生存权利。 我杀死的只是原则 一般说，有新思想的人，即使只是稍微能发表某种新见解的人，通常是生得很少的，甚至少得出奇。明确的只有一点：必须有某种自然法则来正确无误地确定人的出生规律，正确无误地确定分类和区分他们的规律。 对于一个知识全面、思想深刻的人，痛苦是必然的，既有精神上的痛苦，也有肉体上的痛苦，我觉得，真正的伟人应该察觉到人世间极大地忧虑。 ……“单就这一点来说，我就是一只虱子，因为，第一，现在我认为我是只虱子；第二，因为整整一个月来，我一直在打搅仁慈的上帝，请他作证，说是，我这么做不是为了自己肉体上的享受和满足自己的淫欲，而是有一个让人感到高兴的崇高目的—哈—哈！… …” 谁能敢作敢为，谁就最最正确 权力只会给予敢于觊觎并夺取它的人。这里只有一个条件，仅仅一个条件：只要敢作敢为！ 既然我反复自问：我有没有权利掌握权力？—那么，这就是说，我没有权利掌握权力。 总是希望生命有更大的意义 他一向认为，单单生存是不够的，他总是希望生命有更大的意义。也许只是由于他抱有希望，当时他才自认为是一个比别人享有更多权利的人吧！]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>陀思妥耶夫斯基</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习jdk1.8-Lambda 表达式 与Collections]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2FJava%E7%B3%BB%E5%88%97%2FJava%E7%B3%BB%E5%88%97-Java8.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;直到现在jdk1.8版本已经发布了有近5个年头了。今天做一个浅显的学习和记录，便于后面的查找。如果你也有兴趣，不妨一起交流交流，如有不对之处，还请指点指点… 写在前面&emsp;&emsp;看牛逼的代码，到处都是知识点。咱研究研究一些简单的，使用一些示例代码来进行操作。 Lambda 表达式老版本的Java中的排序方式,实现一组字符串按照字典反序排列，排序结果[“peter”,”jany”,”brain”,”anna”,”alex”]：12345678List&lt;String&gt; names = Arrays.asList("peter","anna","brain","jany","alex");Collections.sort(names, new Comparator&lt;String&gt;()&#123; @Override public int compare(String a, String b)&#123; return b.compareTo(a); &#125;&#125;) Comparator 中 compare方法介绍：Collections 中 sort方法介绍：该方法默认的排序是正序String的compareTo方法：public int compareTo(String anotherString)如果参数字符串等于此字符串，则值为0 ; 如果这个字符串的字典比字符串参数小，则值小于0; 如果此字符串的字典大小超过字符串参数，则值大于0 。Java8中的lambda表达式：123Collections.sort(names,(String a, String b) -&gt; &#123; return b.compareTo(a);&#125;) 更简单的方式:1Collections.sort(names,(String a, String b) -&gt; b.compareTo(a)); 更更简单的方式：1Collections.sort(names,(a,b) -&gt; b.compareTo(a)); 一种不使用lambda表达式的方法，reverseOrder() 以反字典（字母顺序）排列阵列：1Collections.sort(names, Comparator.reverseOrder()); Stream 接口&emsp;&emsp;Java8 中的 Stream 是对集合（Collection）对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作（aggregate operation），或者大批量数据操作 (bulk data operation)。Stream API 借助于同样新出现的 Lambda 表达式，极大的提高编程效率和程序可读性，串行Stream上的操作是在一个线程中依次完成，而并行Stream则是在多个线程上同时执行。 创建一个stream的方式,Collection.stream()创建了一个串行的stream；Collection.parallelStream()创建了一个并行的stream；：1234567List&lt;String&gt; stringCollection = new ArrayList&lt;&gt;();stringCollection.add("ddd");stringCollection.add("ccc");stringCollection.add("bbb");stringCollection.add("aaa");Stream&lt;String&gt; stream = stringCollection.stream();Stream&lt;String&gt; stringStream = stringCollection.parallelStream();]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jdk1.8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows server 2012 的一些使用记录]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%2FWindows-server-2012.html</url>
    <content type="text"><![CDATA[写在前面windows server 2012 的一些操作记录。 关闭IIS服务器 关闭IIS服务器&emsp;&emsp;win+r输入services.msc打开服务，找到 World Wide Web Publishing Service 选择停止，用不到的话，选择禁用，然后确定；]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle中的常用函数]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FOracle%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html</url>
    <content type="text"><![CDATA[写在前面整理一些oracle中最常用的方法，以作记录，便于使用时进行查找。（持续更新…） 常用的一些函数nvl函数的使用:nvl(paramA,paramA)用于返回一个不为null的值；1. 有一个参数为null的情况，返回不为null的那个值；下例返回的就是 &lt;code&gt;1&lt;/code&gt;; 1select nvl(1, null) from dual; 2. 两个参数都为null的情况，返回值为null；下例返回的结果就是&lt;code&gt;null&lt;/code&gt;; 1select nvl(null,null) from dual; 3. 两个参数都不为null的情况，返回第一个参数；下例返回的结果就是&lt;code&gt;1&lt;/code&gt;; 1select nvl(1,2) from dual; 注意 123select nvl('',0.08) from dual;--在oracle中返回的是.08select decode('',null,0.08) from dual;--返回0.08]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[winsows10环境下解决vmware中windows server服务器ping不通]]></title>
    <url>%2F%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%2F%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-Vmware-%E9%97%AE%E9%A2%981.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;使用vmware安装了windows server 2012，安装完毕之后，想从宿主机上远程到虚拟机中，发现本地网络和虚拟机网络不能ping通，试用了一个办法，可以ping通了，特意记录一下。 环境参考 VMware® Workstation 14 Pro：14.1.1 build-7528167 宿主机：windows 10 虚拟机：windows server 2012 解决办法 下面是宿主机的ip，即现在使用的是本地的主机： 打开VMware-编辑-虚拟网络编辑器，选择右下角更改设置，设置NAT模式的子网地址跟主机一样，这里设置为192.168.2.0 NAT设置 网关IP 也为192.168.2.*，DHCP的起始IP和结束IP的前三段也设置成跟主机一样的。然后就可以主机就可以ping通虚拟机了。 在远程的过程中还有一个问题&emsp;&emsp;就是在远程的时候提示“出现身份验证错误，要求的函数不受支持…可能是由于CredSSP加密Oracle修正”，错误如下：处理这个问题是应该在本地机器进行修改，修改的方法是： win+r键打开运行框，然后输入gpedit.msc，回车，打开本地组策略编辑器； 在 “计算机配置-管理模板-系统-凭据分配”中 找到允许Oracle修正，之后双击，打开如下界面，点击已启用，保护级别选择易受攻击，保存即可。 修正 2018-07-22 22:10&emsp;&emsp;上述方法会导致虚拟机不能联网，以下能够保证虚拟机上网，且主机能够远程虚拟机的办法。本次不使用虚拟机进行网络设置，改为使用windows自带的网络设置。该方法，主机修改为静态IP。首先，在主机命令行中执行ipconfig/all命令，查看本机IP，默认网关、以及DNS服务器地址。再将本机TCP/IPv4设置为以下属性：主机TCP/IPv4共享属性：即可。]]></content>
      <categories>
        <category>vmware</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记使用hexo搭建个人博客（二）]]></title>
    <url>%2FHexo%2FHexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;使用hexo+github/coding免费搭建个人博客，本文记录hexo博客的一些个性化配置。包括： 修改主题、 头像、 评论、 搜索、 DaoVoice在线联系、 顶部加载条、 访问量统计、 第三方统计、 个性化配置修改主题下载next主题，完成后，修改站点配置文件的 theme: landscape 为 theme: next，然后执行 hexo s 预览 1git clone https://github.com/iissnan/hexo-theme-next themes/next 增加头像并加旋转特效增加统计字数、阅读时长&emsp;&emsp;在主题配置文件themes/next/_config.yml中找到以下内容：将wordcount、min2read修改为true 123456post_wordcount: item_text: true wordcount: true min2read: true totalcount: true separated_meta: true 本地完成以上配置之后还需要增加hexo-wordcount插件，在命令行中执行以下命令： 1npm i --save hexo-wordcount 安装完毕之后，就可以预览了效果了。自定义样式，如字数统计:*修改为字数统计:*字,在themes/next/layout/_macro/post.swig中找到以下内容 123&lt;span title=&quot;&#123;&#123; __(&apos;post.wordcount&apos;) &#125;&#125;&quot;&gt; &#123;&#123; wordcount(post.content) &#125;&#125;&lt;/span&gt; 修改为123&lt;span title=&quot;&#123;&#123; __(&apos;post.wordcount&apos;) &#125;&#125;&quot;&gt; &#123;&#123; wordcount(post.content) &#125;&#125; 字&lt;/span&gt; 阅读时长:*修改为阅读时长:*分钟 123&lt;span title=&quot;&#123;&#123; __(&apos;post.min2read&apos;) &#125;&#125;&quot;&gt; &#123;&#123; min2read(post.content) &#125;&#125; &lt;/span&gt; 修改为123&lt;span title=&quot;&#123;&#123; __(&apos;post.min2read&apos;) &#125;&#125;&quot;&gt; &#123;&#123; min2read(post.content) &#125;&#125; 分钟&lt;/span&gt; 即可。 hexo增加七牛云图床及上传参考自： 使用VSCode+七牛云图床插件+自定义快捷键配置Hexo博文编写环境 工具： 使用VSCode进行博客编写； qiniu-upload-image插件，需要进行配置； vscode-Hexo插件； 使用七牛云,点击访问作为图床，这个需要自己申请和认证哈，我的认证花了两天时间~~]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记使用hexo搭建个人博客（一）]]></title>
    <url>%2FHexo%2FHexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A21.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;作为一个码农来说，笔记是必不可少的，一是为了记录，二是为了分享。特意将使用hexo+github/coding免费搭建个人博客的过程也记录了一下，网上类似的文章太多了，有些配置的版本不一样，本文记录hexo环境的搭建及部署到coding/github上. Hexo是什么？&emsp;&emsp;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&emsp;&emsp;详情可参考Hexo官方文档 环境及版本 系统: windows 10 git: version 2.9.0.windows.1 node: v10.6.0 hexo: 3.7.1 hexo-cli: 1.1.0 安装到此步骤已经认为你已经安装了git和node.js。 创建一个目录，比如在E盘根目录下，创建一个hexo文件夹，使用命令行进入此文件夹，(也可以进入此文件夹，右键Git Bash Here)输入： 12npm install -g hexo-clinpm install hexo --save 命令执行后的效果参考： 初始化项目，输入hexo init 项目名，如hexo init blog,将会自动生成blog目录，并自动生成一些目录及文件； 123hexo init blogcd blognpm install 现在可以开始预览了,会出现提示在网址http://localhost:4000/预览 12hexo ghexo s 常用命令&emsp;&emsp;在项目根目录，有个_config.yml,这个是站点配置文件，一些重要的配置都是在这里进行的。 详细的通用配置就参考官网吧，就不重复说了。下面主要记录一下一些个性化的功能。 常用命令： hexo clean ：清除缓存文件 (db.json) 和已生成的静态文件 (public)。 hexo g ：生成静态文件。 hexo s ：本地发布预览。 hexo d ：远程发布。 在coding上部署&emsp;&emsp;访问coding官网，注册账号，注册时的用户名，就是你访问自己博客地址的主体部分，注意点哦。 创建项目: 查看静态pages服务，Coding Pages 已经运行在 https://[你的用户名].coding.me时，说明你配置成功了，我这边是解析自己的域名，略有点不一样。如下图所示： 接下来就要开始准备把项目发布到coding上面了，需要先获取SSHKey，然后修改站点配置文件为coding的项目对应的ssh地址；设置Git的user name和email： 12git config --global user.name "你的git用户名，可以随便起一个"git config --global user.email "你的邮箱地址" 执行以下命令，查看是否已经有了ssh密钥：cd ~/.ssh，输入第二条命令之后，连续3次enter 12cd ~/.sshssh-keygen -t rsa -C "你的邮箱地址" 在C:\Users\你的电脑用户名.ssh 目录下，会有两个文件id_rsa和id_rsa.pub，使用记事本打开id_rsa.pub，复制里面的值，然后浏览器打开你的coding到如下页面，将复制的内容粘贴到公钥内容的文本框里面，点击保存。如下图：测试公钥是否配置成功：ssh -T git@git.coding.net，输入之后，会提示你是否确认，输入yes，回车；提示你通过ssh协议认证。修改你的站点配置文件，这个是在你的本地配置远程服务器地址，hexo项目根目录下的_config.yml，这种文件的格式非常严格，多一个空格就可能会报错。 码云和GitHub双线部署的配置，站点配置文件_config.yml下修改配置，修改为自己的仓库：12345deploy:type: gitrepo: coding: git@git.coding.net:weyoung/weyoung.coding.me.git,master github: git@github.com:nelucifer/nelucifer.github.io.git,master 执行命令,就将你的博客部署到coding上了，如果要解析为自己的域名的话，可以百度、google查看步骤。 123hexo cleanhexo ghexo d github 的部署和在coding上部署基本是一样的]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PowerDesigner导出PDM和rtf文件]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FPowerDesigner-export-PDM-rtf.html</url>
    <content type="text"><![CDATA[前言&emsp;&emsp;power designer是能进行数据库设计的强大的软件，是一款开发人员常用的数据库建模工具。使用它可以分别从概念数据模型(Conceptual Data Model)和物理数据模型(Physical Data Model)两个层次对数据库进行设计。 使用PowerDesigner导出rtf文件和PDM 准备 PowerDesigner 16.5已有pdm导出rtf打开pdm后，右键点击后选择New-&gt;Report。 出现以下界面，里面的结构可以按你的要求自由组合。一般将名称、代码、数据类型、注释选择导出即可。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>PowerDesigner</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信授权登录(微信订阅号使用测试账号)]]></title>
    <url>%2FWeChat%2FWeChat-login.html</url>
    <content type="text"><![CDATA[微信作为现在最火的社交App，使用微信扫描二维码登录也更加方便和快捷，也不至于注册一大堆账号，想起来都烦。使用花生壳+微信测试账号+微信公众号+java做一个demo熟悉下微信开发。demo地址：wxlogin-demo _Updated By Mr.wang 2019-1-4： 这个文章是在2017-09-17 在博客园写的，边写代码边写博客，记录的不够详细，还请包涵。微信把接口好像调整了，订阅号现在没有这个测试登录的权限了，但是整体实现应该是没有区别的。_ 准备 花生壳：用来作为内网穿透，以便微信登录接口（需要公网中能够访问到的地址）回调，花生壳下载链接 微信公众号：设置【授权回调页面域名】； 微信公众号开发测试账号：点击访问申请地址注意事项在微信公众号请求用户网页授权之前，开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头； 开发demo所需要的jar包 直接上代码AuthUtil.java1234567891011121314151617181920212223242526272829303132333435package com.wanglixia;import net.sf.json.JSONObject;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.util.EntityUtils;import java.io.IOException;/** * 功能描述: * &lt;p&gt; * Created by Mr.wang on 2017/9/17 11:57. */public class AuthUtil &#123; public static final String APPID = "这块填appid"; public static final String APPSECRET = "这块是appsecret"; public static JSONObject doGetJson(String url) throws IOException &#123; JSONObject jsonObject = null; DefaultHttpClient client = new DefaultHttpClient(); HttpGet httpGet = new HttpGet(url); HttpResponse httpResponse = client.execute(httpGet); HttpEntity entity = httpResponse.getEntity(); if (entity != null) &#123; String result = EntityUtils.toString(entity, "UTF-8"); jsonObject = JSONObject.fromObject(result); &#125; httpGet.releaseConnection(); return jsonObject; &#125;&#125; CallBackServlet.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.wanglixia;import net.sf.json.JSONObject;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;/** * 功能描述: * &lt;p&gt; * Created by Mr.wang on 2017/9/17 13:06. */@WebServlet("/callBack")public class CallBackServlet extends HttpServlet &#123; protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; String code = req.getParameter("code"); String url = "https://api.weixin.qq.com/sns/oauth2/access_token?" + "appid=" + AuthUtil.APPID + "&amp;secret=" + AuthUtil.APPSECRET + "&amp;code=" + code + "&amp;grant_type=authorization_code"; JSONObject jsonObject = AuthUtil.doGetJson(url); System.out.println(jsonObject.toString()); String openid = jsonObject.getString("openid"); String token = jsonObject.getString("access_token");// String expires_in = jsonObject.getString("expires_in");// String refresh_token = jsonObject.getString("refresh_token");// String scope = jsonObject.getString("scope"); String infoUrl = "https://api.weixin.qq.com/sns/userinfo?" + "access_token=" + token + "&amp;openid=" + openid + "&amp;lang=zh_CN"; JSONObject userInfo = AuthUtil.doGetJson(infoUrl); System.out.println(userInfo); //1、使用微信用户信息直接登录，无需注册和绑定// req.setAttribute("info", userInfo);// req.getRequestDispatcher("/index1.jsp").forward(req, resp); &#125;&#125; WxLogin.java12345678910111213141516171819202122232425262728package com.wanglixia;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.net.URLEncoder;/** * 功能描述: * &lt;p&gt; * Created by Mr.wang on 2017/9/17 11:17. */@WebServlet("/wxLogin")public class WxLogin extends HttpServlet &#123; protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; String backUrl = "http://这儿是你的回调地址，上图填的那个/callBack"; String url = "https://open.weixin.qq.com/connect/oauth2/authorize?" + "appid=" + AuthUtil.APPID + "&amp;redirect_uri=" + URLEncoder.encode(backUrl) + "&amp;response_type=code" + "&amp;scope=snsapi_userinfo" + "&amp;state=STATE#wechat_redirect"; resp.sendRedirect(url); &#125;&#125; index.jsp1234567891011121314151617&lt;%-- Created by IntelliJ IDEA. User: Mr.wang Date: 2017/9/17 Time: 11:02 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt; &lt;meta name="viewport" content="width=device-width,initial-scale=1.0"&gt; &lt;title&gt;$Title$&lt;/title&gt;&lt;/head&gt;&lt;body style="font-size: 40px;text-align: center;"&gt;&lt;a href="/wxLogin"&gt;微信公众授权登录&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; index1.jsp12345678910111213141516171819&lt;%-- Created by IntelliJ IDEA. User: Mr.wang Date: 2017/9/17 Time: 11:02 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt; &lt;meta name="viewport" content="width=device-width,initial-scale=1.0"&gt; &lt;title&gt;$Title$&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt;登录成功！&lt;/div&gt;&lt;div&gt;$&#123;info&#125;&lt;/div&gt;&lt;div&gt;&lt;img style="width: 100px;height: 100px;" src="$&#123;info.headimgurl&#125;"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 中间遇到的问题： 接口回调地址设置错误，这个地址需要是公网中能够访问到的地址，因此需要用花生壳来进行内网映射； 因为没有微信公众服务号，因此，找了半天，突然想起有个测试账号。 参考慕课网教程：http://www.imooc.com/learn/713]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端模板引擎Freemarker的使用（一）]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%2FFreemarker-%E5%89%8D%E7%AB%AF%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8.html</url>
    <content type="text"><![CDATA[介绍：FreeMarker 是一款 模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， 不是 像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。 记录Freemarker在项目中的配置与使用 准备 框架：Spring+SpringMvc+Mybatis Freemarker：官网介绍配置Maven中需要引入的依赖1234567&lt;!-- freemarker的版本号 --&gt;&lt;freemarker.version&gt;2.3.20&lt;/freemarker.version&gt;&lt;dependency&gt; &lt;groupId&gt;org.freemarker&lt;/groupId&gt; &lt;artifactId&gt;freemarker&lt;/artifactId&gt; &lt;version&gt;$&#123;freemarker.version&#125;&lt;/version&gt;&lt;/dependency&gt; 视图解析器，一般在spring-mvc.xml中配置12345678910&lt;!-- ViewResolver For FreeMarker --&gt;&lt;bean id="freemarkerResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"&gt; &lt;property name="viewClass"&gt; &lt;value&gt;org.springframework.web.servlet.view.freemarker.FreeMarkerView&lt;/value&gt; &lt;/property&gt; &lt;property name="suffix" value=".ftl"/&gt; &lt;property name="contentType" value="text/html;charset=utf-8"/&gt; &lt;property name="requestContextAttribute" value="request"/&gt; &lt;property name="order" value="0"/&gt;&lt;/bean&gt; 123456789101112131415161718192021222324&lt;!-- ViewResolver For FreeMarkerConfigurer --&gt; &lt;bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"&gt; &lt;property name="templateLoaderPaths"&gt; &lt;list&gt; &lt;value&gt;/front-end/&lt;/value&gt; &lt;value&gt;/front-end/main-frame&lt;/value&gt; &lt;value&gt;/&lt;/value&gt;&lt;!-- 配置文件路径 --&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name="freemarkerSettings"&gt;&lt;!-- 设置FreeMarker环境属性 --&gt; &lt;props&gt; &lt;prop key="template_update_delay"&gt;5&lt;/prop&gt;&lt;!--刷新模板的周期，单位为秒 --&gt; &lt;prop key="default_encoding"&gt;UTF-8&lt;/prop&gt;&lt;!--模板的编码格式 --&gt; &lt;prop key="locale"&gt;UTF-8&lt;/prop&gt;&lt;!-- 本地化设置 --&gt; &lt;prop key="datetime_format"&gt;yyyy-MM-dd HH:mm:ss&lt;/prop&gt; &lt;prop key="time_format"&gt;HH:mm:ss&lt;/prop&gt; &lt;prop key="number_format"&gt;0.####&lt;/prop&gt; &lt;prop key="boolean_format"&gt;true,false&lt;/prop&gt; &lt;prop key="whitespace_stripping"&gt;true&lt;/prop&gt; &lt;prop key="tag_syntax"&gt;auto_detect&lt;/prop&gt; &lt;prop key="url_escaping_charset"&gt;UTF-8&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt; &lt;/bean&gt; 前端.ftl文件结构 Controller.java123ModelAndView mav = new ModelAndView();mav.setViewName("/main-frame");return mav; 公用布局模板拆分_使用freemarker的macro、import、include指令，我们可以将布局模板拆分为如下几个文件_ /layout defaultLayout.ftl footer.ftl header.ftl sidebar.ftldefaultLayout.ftl123456789101112131415161718&lt;#macro layout&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=&quot;width: 700px; text-align:center; font-size:30px;&quot;&gt; &lt;#include &quot;header.ftl&quot;&gt; &lt;#include &quot;sidebar.ftl&quot;&gt; &lt;#-- 在这里嵌入main content --&gt; &lt;#nested&gt; &lt;#include &quot;footer.ftl&quot;&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;/#macro&gt; header.ftl1&lt;div style="background-color: #b4efb8;"&gt;header&lt;/div&gt; sidebar.ftl123&lt;div style="width:30%; height:300px; float:left; background-color: #8825ae;"&gt; sidebar&lt;/div&gt; footer.ftl1&lt;div style="background-color: #B3D3F3;"&gt;footer&lt;/div&gt; 那么在任何一个使用该布局的页面，我们只要写如下的代码，修改要嵌入到layout中的main content就好了。1234567891011121314151617181920212223&lt;#-- 引入布局指令的命名空间 --&gt;&lt;#import &quot;../layout/defaultLayout.ftl&quot; as defaultLayout&gt;&lt;#-- 调用布局指令 --&gt;&lt;@defaultLayout.layout&gt; &lt;#-- 将下面这个main content嵌入到layout指令的nested块中 --&gt; &lt;div style=&quot;width:70%; height:300px; float:left; background-color: #12c5ae;&quot;&gt; main content&lt;/div&gt;&lt;/@defaultLayout.layout&gt;&lt;#-- 引入布局指令的命名空间 --&gt;&lt;#import &quot;../layout/defaultLayout.ftl&quot; as defaultLayout&gt; &lt;#-- 调用布局指令 --&gt;&lt;@defaultLayout.layout&gt; &lt;#-- 将下面这个main content嵌入到layout指令的nested块中 --&gt; &lt;div style=&quot;width:70%; height:300px; float:left; background-color: #12c5ae;&quot;&gt; main content&lt;/div&gt; &lt;/@defaultLayout.layout&gt; 而且如果要更换布局，比如修改header，也不用每个页面都去改一遍了。这就实现了模板的可复用。问题使用模板拆分，遇到的问题：123456Caused by: java.io.FileNotFoundException: Template "../main-frame/main-frame.ftl" not found. at freemarker.template.Configuration.getTemplate(Configuration.java:742) at freemarker.core.Environment.getTemplateForInclusion(Environment.java:1694) at freemarker.core.Environment.getTemplateForImporting(Environment.java:1748) at freemarker.core.LibraryLoad.accept(LibraryLoad.java:111) ... 48 more 处理方法：模板路径不对，需要找到模板所在文件夹的上一级再往下找。 freemarker默认配置使用时，如果传到前端的值为null或者不存在，后台会报错。处理方法：12345678910111213&lt;bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"&gt; &lt;property name="templateLoaderPath" value="/template/" /&gt; &lt;property name="freemarkerSettings"&gt; &lt;!-- 设置默认的编码方式，原先是GBK，需要设置成utf-8 --&gt; &lt;props&gt; &lt;!--用于解决前端报空指针问题--&gt; &lt;prop key="classic_compatible"&gt;true&lt;/prop&gt; &lt;prop key="defaultEncoding"&gt;utf-8&lt;/prop&gt; &lt;prop key="template_exception_handler"&gt;rethrow&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt;&lt;/bean&gt; 增加了一行：1&lt;prop key="classic_compatible"&gt;true&lt;/prop&gt; 参考链接：点击查看原文问题原因：在freemarker中的空值的处理，默认情况以${xxx}的方式取值会报错，我们一般都采用${xxx?if_exists} 的方式去处理，烦死人了。经过查资料，很多人都建议使用classic_compatible=true的方式来处理，目测单词的意思应该是：“兼容传统模式”的意思。但是经过使用发现这个属性设置为true时，也有很多其他问题，比如boolean值的处理，比如include指令必须使用绝对路径，总之也会带来很多烦人的事情。最后找到源码，在Freemarker源码的Configurable类的isClassicCompatible方法上找到了详细的注释，这里翻译下，不过本人英语比较差，可能会有错误，如果有人不确定可以去看源码。 原注释大意如下： 该方法返回Freemarker模板解析引擎是否工作在“Classic Compatibile”模式下。如果这个模式被激活，则Freemarker模板解析引擎将以以下的方式工作：（类似于1.7.x这个版本的运行方式，这个也是1.7.x的版本被称为“经典的Freemarker”的由来）。（译者注：以下的1、2、3、4、5、6是译者自己加的，方便读者看） 处理未定义的表达式，也就是说”expr”为null值。 1、作为像表达式“”、“${expr}”、“ otherexpr == expr“、“otherexpr != expr”条件表达式或者是“hash[expr]”表达式的参数，这个参数将被当成空字符来对待。（译者注：这里注意空字符和null是不一样的). 2、作为“”、“”这样的表达式的参数，其循环体将不会被执行，和list的长度为0是一样的。 3、作为“”或者其他布尔表达式命令的参数，空值将被当成是false来处理。非布尔数据模型或者逻辑操作数也可以放在“”表达式中，空模型（长度为零的字符串，空的数组或者hash集合）都被当成是false来对待，其他情况下都被当成是true来处理。 4、当布尔值被当成字符串（比如用${…}输出，或者是和其他字符串连接），true值将被转换成“true”字符串处理，false值将被转换成空字符串。 5、提供给和的标量数据模型参数将被当成只包含一个该模型的list来处理。（译者注：就是说，传给和的参数不是list或者数组类型的，而是单个元素，则会被当成只有一个元素的list或者数组） 6、“”标签的路径参数将被作为绝对路径处理。（译者注：这里很多网上的文档都没有提过，是本人经过观察发现的，然后从源码和其注释中找到的。在这种情况下，如果传入的ftl路径是相对路径，则会报找不到文件的异常）。 在其他方面，甚至是在兼容模式下，这个Freemaker解析引擎是2.1引擎，你不会因此而丢掉其他新的功能。 以上就是译文， 那么如果我们设置了全局的classic_compatible属性，而在某个页面上又不想遵守这个属性该怎么办呢？这样就可以在当前这个页面上采用以下的办法，让当前的页面不再支持传统模式：&lt;#setting classic_compatible=false&gt;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>Freemarker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery学习笔记（三）DOM篇]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%2FJQuery%2FJQuery-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-DOM%E7%AF%87.html</url>
    <content type="text"><![CDATA[本文内容有： DOM内部插入append()与appendTo() DOM内部插入prepend()与prependTo() DOM外部插入after()与before() DOM外部插入insertAfter()与insertBefore() DOM节点删除之empty()的基本用法 DOM节点删除之empty和remove区别 DOM节点删除之保留数据的删除操作detach() DOM节点删除之detach()和remove()区别 （一）DOM内部插入append()与appendTo() 创建节点及节点属性 创建元素：document.createElement 设置属性：setAttribute 添加文本：innerHTML 加入文档：appendChild 几个问题： 每一个元素节点都必须单独创建 节点是属性需要单独设置，而且设置的接口不是很统一 添加到指定的元素位置不灵活最后还有一个最重要的：浏览器兼容问题处理 jQuery节点创建与属性的处理 把这个节点的结构给通过HTML标记字符串描述出来，通过$()函数处理，$(“html结构”)；eg： 12var div = $("&lt;div class='right'&gt;&lt;div class='aaron'&gt;动态创建DIV元素节点&lt;/div&gt;&lt;/div&gt;") $body.append(div) 选择器 描述 append(content) 向每个匹配的元素内部追加内容 $(A).appentTo(B) 把所有匹配的元素追加到指定的元素集合中，把A追加到B中 （二）DOM内部插入prepend()与prependTo() 选择器 描述 prepend 向每个匹配的元素内部前置内容 prependTo 把所有匹配的元素前置到指定的元素集合中，把A追加到B中 方法详解： .prepend()方法将指定元素插入到匹配元素里面作为它的第一个子元素 (如果要作为最后一个子元素插入用.append()). .prepend()和.prependTo()实现同样的功能，主要的不同是语法，插入的内容和目标的位置不同 对于.prepend() 而言，选择器表达式写在方法的前面，作为待插入内容的容器，将要被插入的内容作为方法的参数 而.prependTo() 正好相反，将要被插入的内容写在方法的前面，可以是选择器表达式或动态创建的标记，待插入内容的容器作为参数。 这里总结下内部操作四个方法的区别： append()向每个匹配的元素内部追加内容 prepend()向每个匹配的元素内部前置内容 appendTo()把所有匹配的元素追加到另一个指定元素的集合中 prependTo()把所有匹配的元素前置到另一个指定的元素集合中 1234567//找到class="aaron1"的div节点//然后通过prepend在内部的首位置添加一个新的p节点 $('.aaron1').prepend('&lt;p&gt;prepend增加的p元素&lt;/p&gt;')//找到class="aaron2"的div节点//然后通过prependTo内部的首位置添加一个新的p节点$('&lt;p&gt;prependTo增加的p元素&lt;/p&gt;').prependTo($('.aaron2')) （三）DOM外部插入after()与before() |:—-|:—-||.after(content)|在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点||.before(content)|在匹配元素的前面插入内容| before与after都是用来对相对选中元素外部增加相邻的兄弟节点 2个方法都是都可以接收HTML字符串，DOM 元素，元素数组，或者jQuery对象，用来插入到集合中每个匹配元素的前面或者后面 2个方法都支持多个参数传递after(div1,div2,….) 可以参考右边案例代码 注意点： after向元素的后边添加html代码，如果元素后面有元素了，那将后面的元素后移，然后将html代码插入 before向元素的前边添加html代码，如果元素前面有元素了，那将前面的元素前移，然后将html代码插入 （四）DOM外部插入insertAfter()与insertBefore() |:—-|:—-||.insertBefore(content)|在匹配元素前面插入集合中每个匹配的元素||.insertAfter(content)|在匹配元素后面插入集合中每个匹配的元素| 1234567//在test1元素前后插入集合中每个匹配的元素//不支持多参数$('&lt;p style="color:red"&gt;测试insertBefore方法增加&lt;/p&gt;', '&lt;p style="color:red"&gt;多参数&lt;/p&gt;').insertBefore($(".test1")) //在test2元素前后插入集合中每个匹配的元素//不支持多参数$('&lt;p style="color:red"&gt;测试insertAfter方法增加&lt;/p&gt;', '&lt;p style="color:red"&gt;多参数&lt;/p&gt;').insertAfter($(".test2")) （五）DOM节点删除之empty()的基本用法 这个方法不仅移除子元素（和其他后代元素），同样移除元素里的文本。因为，根据说明，元素里任何文本字符串都被看做是该元素的子节点。 过remove方法移除div及其内部所有元素，remove内部会自动操作事件销毁方法 1234//通过remove处理$('.hello').remove()//结果：&lt;div class="hello"&gt;&lt;p&gt;慕课网&lt;/p&gt;&lt;/div&gt; 全部被移除//节点不存在了,同事事件也会被销毁 remove表达式参数：remove比empty好用的地方就是可以传递一个选择器表达式用来过滤将被移除的匹配元素集合，可以选择性的删除指定的节点我们可以通过$()选择一组相同的元素，然后通过remove（）传递筛选的规则处理 1234567$("p").filter(":contains('3')").remove()$("button:last").on('click', function() &#123; //找到所有p元素中，包含了3的元素 //这个也是一个过滤器的处理 $("p").remove(":contains('3')")&#125;) （六）DOM节点删除之empty和remove区别 要用到移除指定元素的时候，jQuery提供了empty()与remove([expr])二个方法，两个都是删除元素，但是两者还是有区别empty方法 严格地讲，empty()方法并不是删除节点，而是清空节点，它能清空元素中的所有后代节点 empty不能删除自己本身这个节点 remove方法 该节点与该节点所包含的所有后代节点将同时被删除 提供传递一个筛选的表达式，删除指定合集中的元素 （七）DOM节点删除之保留数据的删除操作detach() 如果我们希望临时删除页面上的节点，但是又不希望节点上的数据与事件丢失，并且能在下一个时间段让这个删除的节点显示到页面，这时候就可以使用detach方法来处理detach从字面上就很容易理解。让一个web元素托管。即从当前页面中移除该元素，但保留这个元素的内存模型对象。来看看jquery官方文档的解释：这个方法不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。与remove()不同的是，所有绑定的事件、附加的数据等都会保留下来。$(“div”).detach()这一句会移除对象，仅仅是显示效果没有了。但是内存中还是存在的。当你append之后，又重新回到了文档流中。就又显示出来了。当然这里要特别注意，detach方法是JQuery特有的，所以它只能处理通过JQuery的方法绑定的事件或者数据 12345if (!$("p").length) return; //去重//通过detach方法删除元素//只是页面不可见，但是这个节点还是保存在内存中//数据与事件都不会丢失p = $("p").detach() （八）DOM节点删除之detach()和remove()区别 remove()和detach()可能就是其中的一个，可能remove()我们用得比较多，而detach()就可能会很少了 通过一张对比表来解释2个方法之间的不同|方法名|参数|事件及数据是否也被移除|元素自身是否被移除||:—-|:—-|:—-|:—-||remove|支持选择器表达|是|是（无参数时），有参数时要根据参数所涉及的范围||detach|参数同remove|否|情况同remove| remove：移除节点 无参数，移除自身整个节点以及该节点的内部的所有节点，包括节点上事件与数据 有参数，移除筛选出的节点以及该节点的内部的所有节点，包括节点上事件与数据 detach：移除节点 移除的处理与remove一致 与remove()不同的是，所有绑定的事件、附加的数据等都会保留下来 例如：$(“p”).detach()这一句会移除对象，仅仅是显示效果没有了。但是内存中还是存在的。当你append之后，又重新回到了文档流中。就又显示出来了。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>前端</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery学习笔记（二）样式篇]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%2FJQuery%2FJQuery-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E6%A0%B7%E5%BC%8F%E7%AF%87.html</url>
    <content type="text"><![CDATA[本文内容有： jQuery的属性与样式之html()及.text() jQuery的属性与样式之增加样式.addClass() jQuery的属性与样式之删除样式.removeClass() jQuery的属性与样式之切换样式.toggleClass() jQuery的属性与样式之样式操作.css() .css()与.addClass()设置样式的区别 jQuery的属性与样式之.val() jQuery的属性与样式之元素的数据存储 （一）jQuery的属性与样式之html()及.text() .html()方法：&emsp;&emsp;获取集合中第一个匹配元素的HTML内容 或 设置每一个匹配元素的html内容，具体有3种用法： .html() 不传入值，就是获取集合中第一个匹配元素的HTML内容 .html(htmlString) 设置每一个匹配元素的html内容 .html(function(index, oldhtml)) 用来返回设置HTML内容的一个函数 注意事项：.html()方法内部使用的是DOM的innerHTML属性来处理的，所以在设置与获取上需要注意这个操作是针对整个HTML内容（不仅仅只是文本内容） .text()方法得到匹配元素集合中每个元素的文本内容结合，包括他们的后代，或设置匹配元素集合中每个元素的文本内容为指定的文本内容。，具体有3种用法： .text() 得到匹配元素集合中每个元素的合并文本，包括他们的后代 .text(textString) 用于设置匹配元素内容的文本 .text(function(index, text)) 用来返回设置文本内容的一个函数 注意事项：.text()结果返回一个字符串，包含所有匹配元素的合并文本 .html与.text的异同: .html与.text的方法操作是一样，只是在具体针对处理对象不同 .html处理的是元素内容，.text处理的是文本内容 .html只能使用在HTML文档中，.text 在XML 和 HTML 文档中都能使用 如果处理的对象只有一个子文本节点，那么html处理的结果与text是一样的 火狐不支持innerText属性，用了类似的textContent属性，.text()方法综合了2个属性的支持，所以可以兼容所有浏览器 （二）jQuery的属性与样式之增加样式.addClass() &emsp;&emsp;在HTML结构中里，多个class以空格分隔，当一个节点（或称为一个标签）含有多个class时，DOM元素响应的className属性获取的不是class名称的数组，而是一个含有空格的字符串，这就使得多class操作变得很麻烦。 .addClass(className)方法 .addClass(className) : 为每个匹配元素所要增加的一个或多个样式名 .addClass(function(index, currentClass)): 这个函数返回一个或更多用空格隔开的要增加的样式名 注意事项： .addClass()方法不会替换一个样式类名。它只是简单的添加一个样式类名到元素上 （三）jQuery的属性与样式之删除样式.removeClass() jQuery的属性与样式之删除样式.removeClass() jQuery通过.addClass()方法可以很便捷的增加样式。如果需要样式之间的切换，同样jQuery提供了一个很方便的.removeClass()，它的作用是从匹配的元素中删除全部或者指定的class .removeClass( )方法 1. .removeClass( [className ] )：每个匹配元素移除的一个或多个用空格隔开的样式名 2. .removeClass( function(index, class) ) ： 一个函数，返回一个或多个将要被移除的样式名 注意事项 如果一个样式类名作为一个参数,只有这样式类会被从匹配的元素集合中删除 。 如果没有样式名作为参数，那么所有的样式类将被移除 （四）jQuery的属性与样式之切换样式.toggleClass() &emsp;&emsp;jQuery提供一个toggleClass方法用于简化互斥的逻辑，通过toggleClass方法动态添加删除Class，一次执行相当于addClass，再次执行相当于removeClass。 &emsp;&emsp;.toggleClass()方法：在匹配的元素集合中的每个元素上添加或删除一个或多个样式类,如果存在（不存在）就删除（添加）一个类。 .toggleClass(className)：在匹配的元素集合中的每个元素上用来切换的一个或多个（用空格隔开）样式类名 .toggleClass(className, switch)：一个布尔值，用于判断样式是否应该被添加或移除 .toggleClass([switch])：一个用来判断样式类添加还是移除的 布尔值 .toggleClass(function(index, class, switch) [,switch])：用来返回在匹配的元素集合中的每个元素上用来切换的样式类名的一个函数。接收元素的索引位置和元素旧的样式类作为参数 注意事项： toggleClass是一个互斥的逻辑，也就是通过判断对应的元素上是否存在指定的Class名，如果有就删除，如果没有就增加； toggleClass会保留原有的Class名后新增，通过空格隔开。 （五）jQuery的属性与样式之样式操作.css() .css() 方法：获取元素样式属性的计算值或者设置元素的CSS属性获取： .css( propertyName ) ：获取匹配元素集合中的第一个元素的样式属性的计算值 .css( propertyNames )：传递一组数组，返回一个对象结果设置： .css(propertyName, value )：设置CSS .css( propertyName, function )：可以传入一个回调函数，返回取到对应的值进行处理 .css( properties )：可以传一个对象，同时设置多个样式注意事项： 浏览器属性获取方式不同，在获取某些值的时候都jQuery采用统一的处理，比如颜色采用RBG，尺寸采用px .css()方法支持驼峰写法与大小写混搭的写法，内部做了容错的处理当一个数只被作为值（value）的时候， jQuery会将其转换为一个字符串，并添在字符串的结尾处添加px，例如 .css(“width”,50}) 与 .css(“width”,”50px”})一样 （六）.css()与.addClass()设置样式的区别 &emsp;&emsp;对于样式的设置，我们学了addClass与css方法，那么两者之间有什么区别？ 可维护性： &emsp;&emsp;.addClass()的本质是通过定义个class类的样式规则，给元素添加一个或多个类。css方法是通过JavaScript大量代码进行改变元素的样式。 &emsp;&emsp;通过.addClass()我们可以批量的给相同的元素设置统一规则，变动起来比较方便，可以统一修改删除。如果通过.css()方法就需要指定每一个元素是一一的修改，日后维护也要一一的修改，比较麻烦 灵活性： &emsp;&emsp;通过.css()方式可以很容易动态的去改变一个样式的属性，不需要在去繁琐的定义个class类的规则。一般来说在不确定开始布局规则，通过动态生成的HTML代码结构中，都是通过.css()方法处理的 样式值： &emsp;&emsp;.addClass()本质只是针对class的类的增加删除，不能获取到指定样式的属性的值，.css()可以获取到指定的样式值。 样式的优先级： css的样式是有优先级的，当外部样式、内部样式和内联样式同一样式规则同时应用于同一个元素的时候，优先级如下外部样式 &lt; 内部样式 &lt; 内联样式 .addClass()方法是通过增加class名的方式，那么这个样式是在外部文件或者内部样式中先定义好的，等到需要的时候在附加到元素上； 通过.css()方法处理的是内联样式，直接通过元素的style属性附加到元素上的通过.css方法设置的样式属性优先级要高于.addClass方法。 总结： &emsp;&emsp;.addClass与.css方法各有利弊，一般是静态的结构，都确定了布局的规则，可以用addClass的方法，增加统一的类规则 &emsp;&emsp;如果是动态的HTML结构，在不确定规则，或者经常变化的情况下，一般多考虑.css()方式 （七）jQuery的属性与样式之.val() jQuery中有一个.val()方法主要是用于处理表单元素的值，比如 input, select 和 textarea。 .val()方法 .val()无参数，获取匹配的元素集合中第一个元素的当前值 .val( value )，设置匹配的元素集合中每个元素的值 .val( function ) ，一个用来返回设置值的函数 注意事项： 通过.val()处理select元素， 当没有选择项被选中，它返回null .val()方法多用来设置表单的字段的值 如果select元素有multiple（多选）属性，并且至少一个选择项被选中， .val()方法返回一个数组，这个数组包含每个选中选择项的值 .html(),.text()和.val()的差异总结： .html(),.text(),.val()三种方法都是用来读取选定元素的内容；只不过.html()是用来读取元素的html内容（包括html标签），.text()用来读取元素的纯文本内容，包括其后代元素，.val()是用来读取表单元素的”value”值。其中.html()和.text()方法不能使用在表单元素上,而.val()只能使用在表单元素上；另外.html()方法使用在多个元素上时，只读取第一个元素；.val()方法和.html()相同，如果其应用在多个元素上时，只能读取第一个表单元素的”value”值，但是.text()和他们不一样，如果.text()应用在多个元素上时，将会读取所有选中元素的文本内容。 .html(htmlString),.text(textString)和.val(value)三种方法都是用来替换选中元素的内容，如果三个方法同时运用在多个元素上时，那么将会替换所有选中元素的内容。 .html(),.text(),.val()都可以使用回调函数的返回值来动态的改变多个元素的内容。 （八）jQuery的属性与样式之元素的数据存储 jQuery提供的存储接口 jQuery.data( element, key, value ) //静态接口,存数据 jQuery.data( element, key ) //静态接口,取数据 .data( key, value ) //实例接口,存数据 .data( key ) //实例接口,存数据 &emsp;&emsp;2个方法在使用上存取都是通一个接口，传递元素，键值数据。在jQuery的官方文档中，建议用.data()方法来代替。 &emsp;&emsp;把DOM可以看作一个对象，那么我们往对象上是可以存在基本类型，引用类型的数据的，但是这里会引发一个问题，可能会存在循环引用的内存泄漏风险 &emsp;&emsp;通过jQuery提供的数据接口，就很好的处理了这个问题了，我们不需要关心它底层是如何实现，只需要按照对应的data方法使用就行了。&emsp;&emsp;同样的也提供2个对应的删除接口，使用上与data方法其实是一致的，只不过是一个是增加一个是删除罢了jQuery.removeData(element [, name]).removeData([name]) 结尾本文属于学习过程中整理自慕课网jQuery基础： 课程链接：https://www.imooc.com/learn/418； 作者：Aaron艾伦https://www.imooc.com/u/290139/courses?sort=publish 谢谢]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>前端</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery学习笔记（一）样式篇]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%2FJQuery%2FJQuery-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B00-%E6%A0%B7%E5%BC%8F%E7%AF%87.html</url>
    <content type="text"><![CDATA[前言jQuery是一个JavaScript代码库（或者JavaScript框架）。jQuery的宗旨是“Write Less，Do more”（写更少的代码，做更多的事情）。jQuery的核心特性可以总结为：具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。jQuery兼容各种主流浏览器，如IE 6.0+、FF 1.5+、Safari 2.0+、Opera 9.0+等。 jQuery学习之样式篇选择器 选择器 描述 $(“parent &gt; child”) 子选择器：选择所有指定的“parent”元素中指定的“child”的直接子元素，相邻上下级关系 $(“ancestor descendant”) 后代选择器：选择给定的祖先元素的所有后代元素，包含这个元素的直接子元素或者、孙子、曾孙等 $(“prev + next”) 相邻兄弟选择器：选择紧跟在“prev”元素后的“next”元素 $(“prev ~ siblings”) 一般兄弟选择器：匹配“prev”元素之后的所有兄弟元素。一般兄弟指具有相同的父元素，并匹配过滤“siblings”选择器 $(“:first”) 匹配第一个元素，如$(“input:first”)找到的是第一个input $(“:last”) 匹配最后一个元素 $(“:not(selector)”) 选择所有不是给定选择器的元素 $(“:eq(index)”) 选择索引值为index的元素 $(“:gt(index)”) 选择所有索引值大于index的元素 $(“:lt(index)”) 选择所有索引值小于index的元素 $(“:even”) 索引值为偶数的元素，从零开始 $(“:odd”) 索引值为奇数的元素，从零开始 $(“:header”) 选择所有标题元素，如h1，h2等 $(“:lang(language)”) 选择指定语言的元素 $(“:root”) 选择该文档的根元素 $(“:animated”) 所有正在执行动画效果的元素 $(“:contains(text)”) 所有包含指定文本的元素，如果匹配的文本包含在其子元素中，同样匹配 $(“:has(selector)”) 所有元素中至少包含指定选择器的元素 $(“:parent”) 所有包含子元素或者文本的元素 $(“:empty”) 所有没有子元素的元素 选择器 描述 $(“:visible”) 选择所有显示的元素 $(“:hidden”) 选择所有隐藏的元素 属性选择器 $(“input[name~-‘objname’]”)$(“[attribute|-‘value’]”)选择指定属性值等于给定字符串或以该文字串为前缀（该字符串后跟一个连字符”-“）的元素 选择器 描述 $(“[attribute*=’value’]”) 选择指定属性包含给定的子字符串的元素 $(“[attribute~-‘value’]”) 选择指定属性用空格分割的值中包含一个给定值的元素 $(“[attribute=’value’]”) 选择指定属性是给定值的元素 $(“[attribute!=’value’]”) 选择指定属性不等于给定值的元素 $(“[attribute^=’value’]”) 选择指定属性是以给定字符串开始的元素 $(“[attribute$-‘value’]”) 选择指定属性是以给定字符串结尾的元素 $(“[attribute]”) 选择所有具有指定属性的元素 $(“[attributeFilter1][attributeFilterN]”) 选择匹配所有指定的属性筛选器的元素 表单元素选择器 选择器 描述 $(“:input”) 选择所有input，textarea，select和button元素 $(“:text”) 所有文本框 $(“:password”) 所有密码框 $(“:radio”) 所有单选按钮 $(“:checkbox”) 所有复选框 $(“:submit”) 所有提交按钮 $(“:image”) 所有图像域 $(“:reset”) 所有重置按钮 $(“:button”) 所有按钮 $(“:file”) 所有文件域 表单对象属性筛选选择器 选择器 描述 $(“:enabled”) 匹配可用的表单元素 $(“:disabled”) 匹配不可用的表单元素 $(“:checked”) 匹配被选中的123456789101112131415|$(&quot;:selected&quot;)|匹配被选中的```&lt;option&gt;```元素|### jQuery选择器之特殊选择器thisthis和$(this) 的区别？答：this 是JavaScript中的关键字，指的是当前的上下文对象，简单的说就是方法/属性的拥有者；eg:```jsvar ilucifer = &#123;name:&quot;寒江&quot;,getName:funcion()&#123; //this,就是imooc对象 return this.name; &#125;&#125;ilucifer .getName();//寒江 在JavaScript中this是动态的，即这个上下文对象都是可以被动态改变的(可以通过call,apply等方法)同样的在DOM中this就是指向了这个html元素对象，因为this就是DOM元素本身的一个引用通过把$()方法传入当前的元素对象的引用this，把这个this加工成jQuery对象。 结尾本文整理自慕课网jQuery基础 (一)—样式篇，课程链接：https://www.imooc.com/learn/418；作者：Aaron艾伦https://www.imooc.com/u/290139/courses?sort=publish谢谢]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>前端</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用SoapUI 5.3.0调试webservice接口（参数格式XML）]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E6%8E%A5%E5%8F%A3%E7%9B%B8%E5%85%B3%2FSoapUI-webservice.html</url>
    <content type="text"><![CDATA[最近项目中经常要调试webservice接口，从朋友处了解到他们调试webservice接口时使用SoapUI，觉得十分好用，个人也对此十分感兴趣，因此简要记录一下这个工具的使用。 准备 下载SoapUI，我使用的是5.3.0 下载SoapUI传送门 WebService 服务接口进入正题新建调试项目输入项目名称及要调试的接口有效地址，输入完毕点击OKsoapUI会自动获取所有已开放接口，在想要调试的接口方法上面选中右击，选择new request,输入名称后如下图会自动生成如下格式代码；其中 中填写入参_注意：xml格式的入参最好使用 &lt;[CDATA[]]&gt; 包起来。点击左上角的绿色三角就可以调试接口了。_新建测试套件 New TestSuite在项目名称上右击，选择 New TestSuite,输入名称保存在自己新建的TestSuite名称上右击，选择 New TestCase,输入名称保存在Test Steps上右击 选择 Add Step —&gt;SOAP Request,输入名称并选择接口，名称最好容易识别一点接下来就可以加入入参进行调试。一次简单的工具使用，记录下来，希望可以帮助到你，祝你好运。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>接口</tag>
        <tag>SoapUI</tag>
        <tag>Webservice</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript-操作数组array]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%2FJavaScript%2FJavaScript-array.html</url>
    <content type="text"><![CDATA[shift：删除原数组第一项，并返回删除元素的值，原数组为空则返回undefined。 unshift:将参数添加到原数组开头，并返回数组的长度。 pop:删除原数组最后一项，并返回删除元素的值，原数组为空则返回undefined。 push:将参数添加到原数组末尾，并返回数组的长度。 shift：删除原数组第一项，并返回删除元素的值，原数组为空则返回undefined。unshift:将参数添加到原数组开头，并返回数组的长度。pop:删除原数组最后一项，并返回删除元素的值，原数组为空则返回undefined。push:将参数添加到原数组末尾，并返回数组的长度。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql导出导入数据库]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMysql-export-database.html</url>
    <content type="text"><![CDATA[要在两台不同的电脑上进行开发，数据库需要统一，由于自己第一次完整的设计表结构，因此多次更改表结构，造成了很多不必要的麻烦，需要将数据库导出成sql脚本。 命令行下具体用法如下： mysqldump -用户名 -p密码 -d 数据库名 表名 脚本名;导出数据库名为ssm_web的表结构（其中用户名为root,密码为root,生成的脚本名为db.sql）1mysqldump -u root -proot -d ssm_web&gt;db.sql; 导出数据库名为ssm_web某张表(test)结构1mysqldump -u root -proot -d ssm_web test&gt;test.sql; 导出数据库名为ssm_web所有表结构及表数据（不加-d）1mysqldump -u root -proot ssm_web&gt;e:\lucifer\ssm_web.sql 导出数据库名为ssm_web某张表(test)结构及表数据（不加-d）1mysqldump -u root -proot ssm_web test&gt;test.sql; 导入脚本 1234567MySQL&gt; select now();+---------------------+| now() |+---------------------+| 2013-09-18 13:55:45 |+---------------------+1 row in set (0.00 sec) 执行编写好的sql脚本1234567mysql&gt; source H:/1.sql+---------------------+| now() |+---------------------+| 2013-09-18 13:54:04 |+---------------------+1 row in set (0.00 sec) select …into outfile 方式执行sql12345678910mysql&gt; select now() into outfile 'h:/data/2.sql';Query OK, 1 row affected (0.00 sec)4.使用mysql命令执行H:&gt;mysql -uaHmin -p -e "select now()"Enter passworH: ****+---------------------+| now() |+---------------------+| 2013-09-18 13:57:09 |+---------------------+ mysql命令执行sql，并将查询结果保存到文本中 执行简单sql，如果sql很长，这种方式就不是很适合了。 1mysql -uaHmin -proot test -e "select now()" -N &gt;H:/work/target1.txt 执行复杂sql，可以将复杂的sql事先编辑好，存放到文本中在执行。 1H:&gt; mysql -uroot -pmypwH -h127.0.0.1 -p3306 test &lt; H:/work/source.sql &gt; H:/work/target.txt 将最后一种执行方式加上操作系统的定时任务，就可以在mysql中实现定时执行sql，并保存执行结果的目的了。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[防止js全局变量污染方法总结]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%2FJavaScript%2FJavaScript-%E9%98%B2%E6%AD%A2js%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E6%B1%A1%E6%9F%93%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[转载自防止js全局变量污染方法总结-待续javaScript 可以随意定义保存所有应用资源的全局变量。但全局变量可以削弱程序灵活性，增大了模块之间的耦合性。在多人协作时，如果定义过多的全局变量 有可能造成全局变量冲突，也就是全局变量污染问题,以下是两种解决办法 定义全局变量命名空间只创建一个全局变量，并定义该变量为当前应用容器，把其他全局变量追加在该命名空间下123456789var MY=&#123;&#125;; my.name=&#123; big_name:"zhangsan", small_name:"lisi"&#125;;my.work=&#123; school_work:"study", family_work:"we are"&#125;; 利用匿名函数将脚本包裹起来12345678(function()&#123; var exp=&#123;&#125;; var name="aa"; exp.method=function()&#123; return name;&#125;; window.ex=exp;&#125;)();]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SqlServer2008R2-问题汇总]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FSqlserver2008r2.html</url>
    <content type="text"><![CDATA[新安装数据库sqlserver2008r2,使用客户端登录不上问题处理 1. 新安装数据库sqlserver2008r2,使用客户端登录不上问题处理问题处理：鼠标右键【计算机】—&gt;【管理】，打开界面如下：选择自己数据库的实例名：选择TCP/IP：右键【属性】，将所有TCP动态端口的【0】删掉，TCP端口设为1433；重启服务，即可连接。]]></content>
      <categories>
        <category>错误</category>
      </categories>
      <tags>
        <tag>SqlServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript-常用功能]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%2FJavaScript%2FJavaScript-utils.html</url>
    <content type="text"><![CDATA[使用JS获取request参数 document.write(‘&lt;%=request.getAttribute(“param”)%&gt;’); window.navigator.userAgent 记录浏览器信息以及操作系统信息。 var searchParam = location.search.配合使用string的相关方法即可得到。 js获取上下文路径：123456getContextPath: function () &#123; var pathName = document.location.pathname; var index = pathName.substr(1).indexOf("/"); var result = pathName.substr(0, index + 1); return result; &#125; js获取项目路径：123456789101112function getRootPath()&#123; //获取当前网址，如： http://localhost:8083/uimcardprj/share/meun.jsp var curWwwPath=window.document.location.href; //获取主机地址之后的目录，如： uimcardprj/share/meun.jsp var pathName=window.document.location.pathname; var pos=curWwwPath.indexOf(pathName); //获取主机地址，如： http://localhost:8083 var localhostPaht=curWwwPath.substring(0,pos); //获取带"/"的项目名，如：/uimcardprj var projectName=pathName.substring(0,pathName.substr(1).indexOf('/')+1); return(localhostPaht+projectName); &#125;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用apache的poi组件上传并解析excel]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%2F%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%2FExcel%E8%A7%A3%E6%9E%90-POI%E8%A7%A3%E6%9E%90%E5%AE%9E%E4%BE%8B.html</url>
    <content type="text"><![CDATA[通过apache的poi组件解析excel，以便将数据存储到数据库中。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public List&lt;String[]&gt; paseUserStoryFile(MultipartFile file) &#123; List&lt;String[]&gt; list = new ArrayList&lt;String[]&gt;(); try &#123; POIFSFileSystem pois = new POIFSFileSystem(file.getInputStream()); //新建WorkBook HSSFWorkbook wb = new HSSFWorkbook(pois); //获取Sheet（工作薄）总个数 int sheetNumber = wb.getNumberOfSheets(); for (int i = 0; i &lt; sheetNumber; i++) &#123; //获取Sheet（工作薄） HSSFSheet sheet = wb.getSheetAt(i); //开始行数 int firstRow = sheet.getFirstRowNum(); //结束行数 int lastRow = sheet.getLastRowNum(); //判断该Sheet（工作薄)是否为空 boolean isEmpty = false; if (firstRow == lastRow) &#123; isEmpty = true; &#125; if (!isEmpty) &#123; for (int j = firstRow + 1; j &lt;= lastRow; j++) &#123; //获取一行 HSSFRow row = sheet.getRow(j); //开始列数 int firstCell = row.getFirstCellNum(); //结束列数 int lastCell = row.getLastCellNum(); //判断该行是否为空 String[] value = new String[lastCell]; if (firstCell != lastCell) &#123; for (int k = firstCell; k &lt; lastCell; k++) &#123; //获取一个单元格 HSSFCell cell = row.getCell(k); Object str = null; //获取单元格，值的类型 int cellType = cell.getCellType(); if (cellType == 0) &#123; str = cell.getNumericCellValue(); &#125; else if (cellType == 1) &#123; str = cell.getStringCellValue(); &#125; else if (cellType == 2) &#123; &#125; else if (cellType == 4) &#123; str = cell.getBooleanCellValue(); &#125; value[k] = (String) str; &#125; &#125; //每一行循环完对应的就是一个用户故事的所有属性全部拿到 list.add(value); &#125; &#125; &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; return list; &#125;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>java</tag>
        <tag>excel</tag>
        <tag>poi</tag>
      </tags>
  </entry>
</search>
